[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d Cow"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "https://travis-ci.com/CS2103-AY1819S1-T09-1/main[image:https://travis-ci.com/CS2103-AY1819S1-T09-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T09-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T09-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "////"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "////"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[quote, The Old Kroy Times]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "____________________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The latest and greatest project management tool. You have to try it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "____________________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "{sp} +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[quote, 24-7Mac]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "____________________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The clean minimal UI fits perfectly with the image I want to project as a stylish Mac user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "____________________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "{sp} +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[quote, Winter Singapore]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "____________________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "A simply outstanding piece of software. Unbelievable that this was built by a team of students."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "____________________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "{sp} +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* This is a desktop Address Book + Task Management application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* One of our primary aims is to allow users to quickly and effectively manage their group projects."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Cow has an extremely simple GUI that gets out of the way and lets you immerse yourself in the work that needs to be done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Our command line driven user interface allows you to achieve maximum productivity. Your fingers never need to leave the keyboard."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "////"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* What\u0027s different from https://github.com/se-edu/addressbook-level3[level 3]:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "** A more sophisticated GUI that includes a list  panel and an in-built Browser."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "** More test cases, including automated GUI testing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "////"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* This project is based off the excellent https://github.com/se-edu/[AddressBook-Level4] project created by the SE-EDU initiative."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 29,
      "indocomsoft": 2,
      "-": 31
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"githubId\": \"tuesmiddt\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"authorNames\": [\"tuesmiddt\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"githubId\": \"indocomsoft\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"authorNames\": [\"indocomsoft\", \"Julius Putra Tanu Setiaji\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"githubId\": \"taneliang\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"authorNames\": [\"taneliang\", \"E-Liang Tan\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"githubId\": \"zxjtan\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"authorNames\": [\"zxjtan\", \"Jolene Tan\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"githubId\": \"jaypeeteedee\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \"authorNames\": [\"jaypeeteedee\", \"John Phua\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \u0027headless.geometry\u0027: \u00271920x1080-32\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u0027site-name\u0027: \u0027Cow\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T09-1/main\u0027"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 1,
      "indocomsoft": 2,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d Tan E-Liang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::taneliang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "{empty}[http://www.eliangtan.com[homepage]] [https://github.com/taneliang[github]] [\u003c\u003ctaneliang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d Julius Putra Tanu Setiaji"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::indocomsoft.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "{empty}[http://github.com/indocomsoft[github]] [\u003c\u003cindocomsoft#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Responsibilities: QC"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d Jolene Tan"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::zxjtan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "{empty}[http://github.com/zxjtan[github]] [\u003c\u003czxjtan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Responsibilities: Task management"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d John Phua Tai Da"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::jaypeeteedee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "{empty}[http://github.com/JayPeeTeeDee[github]] [\u003c\u003cjaypeeteedee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d Chen Shaowei"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::tuesmiddt.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "{empty}[http://github.com/tuesmiddt[github]] [\u003c\u003ctuesmiddt#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 12,
      "indocomsoft": 10,
      "-": 32
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d Cow - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "By: `Team T09-1`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure IntelliJ to check style-compliance as you write code."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::uiclassdiagram[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Additionally, the link:{repoURL}/blob/master/src/main/java/seedu/address/ui/CalendarPanel.java[`CalendarPanel`] consists of link:{repoURL}/blob/master/src/main/java/seedu/address/ui/CalendarHeaderCell.java[`CalendarHeaderCell`] to indicate days of week, link:{repoURL}/blob/master/src/main/java/seedu/address/ui/CalendarContentCell.java[`CalendarContentCell`] to indicate the date, and link:{repoURL}/blob/master/src/main/java/seedu/address/ui/CalendarTaskCard.java[`CalendarTaskCard`] for each of the tasks that falls on that date"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::uiclassdiagram[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::logiccomponent[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".  `Logic` uses the `AppParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".  `AppParser` then sends the command to the appropriate module parser."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"contacts delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".Interactions Inside the Logic Component for the `contacts delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::logiccomponent[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::modelcomponent[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* stores Person and Task data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::modelcomponent[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`XmlAdaptedPerson` depends on `XmlAdaptedTaskId` to keep track of tasks assigned to the person. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`XmlAdaptedTask` depends on `XmlAdaptedPersonId` to keep track of persons assigned to the task."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::taskclass[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d Task class"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".Structure of the Task class"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "image::TaskComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "The `Task` class consists of list of `Tag` objects and a `Name` object, corresponding to the same classes in the `Person` namespace. It also has two `DateTime` objects, one for the start date and time and the other for the end date and time of the task."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "The `DateTime` class encapsulates a Java `Calendar` object to store a date and time. It also includes methods to parse and validate date/time inputs from the user, and methods to return the date or time as a `String`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::taskclass[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::addtasks[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d Addition of tasks"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Adding a task is fairly straightforward. The user command is given to the parser, which validates the input and creates the task and the objects it is associated with. One aspect with a more involved implementation is the accomodation of optional start date and time fields in the user input, which is illustrated here."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".Interactions for derivation of start date and time from optional input in AddCommandParser"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "image::AddTaskSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1. The `AddCommandParser` receives the input string and calls `ArgumentTokenizer.tokenize()` to create an `ArgumentMultiMap`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2. It then creates a Date object for the current moment in time and uses the `INPUT_DATE_FORMAT` and `INPUT_TIME_FORMAT` `DateFormat` s in `DateTime` to parse the Date object into date and time strings in the correct format."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3. It then retrieves the start date and start time strings from `argMultiMap`, which returns an `Optional\u003cString\u003e` for each of them."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4. `orElse()` is then called on each `Optional\u003cString\u003e` to obtain the string encapsulated by the `Optional`, or the string for the current date/time if the `Optional` is empty."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "5. Finally, `ParserUtil.parseDateTime()` is called with the resultant date and time strings."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::addtasks[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "// tag::listfindtasks[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d Listing and finding of tasks"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Listing and finding of tasks is facilitated by `ModelManager` and displayed through `TaskListPanel`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`ModelManager` implements the following relevant methods:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `ModelManager#updateFilteredTaskList(Predicate\u003cTask\u003e predicate)` --"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Updates the the internal `filteredTasks` list with the predicate given. Exposed through the `Model` interface."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `ModelManager#getFilteredTaskList()` -- Returns an unmodifiable view of the internal `filteredTasks` list that"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "updates with any changes to the baselist."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Exposed through the `Logic` and `Model` interfaces."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`ModelManager#filteredTasks` is a JavaFX FilteredList around the unmodifiable list of tasks provided by `VersionedAddressBook#getTaskList())`. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`TaskListPanel` is constructed with the JavaFX ObservableList returned by"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`ModelManager#getFilteredTaskList()` when the application is started and displays it."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "To find specific tasks, the appropriate predicate is passed into `ModelManager#updateFilteredTaskList()`, which updates"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "the `filteredTasks` list, propagating the change up to the `TaskListPanel` display."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ".Filtering of Tasks in Model Component"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "image::TaskListFindModelSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Currently, there are 2 use cases where `ModelManager#updateFilteredTaskList()` is called, examples are given below."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Case 1: On application startup or after running `tasks list` command"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`ModelManager#updateFilteredTaskList()` is called with"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`Model#PREDICATE_SHOW_ALL_TASKS` which returns _true_ for all tasks."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ".Sequence Diagram of Tasks List Command"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "image::TaskListLogicSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Case 2: After running `tasks find [n/KEYWORD]... [sd/START_DATE] [ed/END_DATE] [t/TAG]…` command"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`ModelManager#updateFilteredTaskList()` is called with predicate built by `TaskPredicateAssembler`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " which combines the different predicates from input."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`TaskPredicateAssembler` combines the following predicates:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `NameContainsKeywordsPredicate`: Returns true if tasks name contains any of the full keywords"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `MatchesStartDatePredicate`: Returns true if start date of task matches input"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `MatchesEndDatePredicate`: Returns true if end date of task matches input"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `HasTagsPredicate`: Returns true if task contains any of the specified tags"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ".Sequence Diagram of Tasks Find Command"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "image::TaskFindLogicSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating of UI when list is filtered"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* **Alternative 1 (current choice):** Using `ObservableList` and `ListView` from JavaFX in UI component."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Automatically updates `ListView` when changes are made to `ObservableList`, no manual events are needed."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Addition, updates and deletion of tasks will only need to interface with `Logic` and `Model`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** `ObservableList` does not raise change events when tasks in the base list are mutated."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Any edits to existing tasks will need to replace the old `Task` instance"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "with a new one for changes to be reflected on the UI."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* **Alternative 2:** Using Java `List` in UI component."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Does not enforce immutability on tasks."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Full control over when and what UI should update."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Events will need to be raised manually when tasks are changed."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Filtering of lists"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* **Alternative 1 (current choice):** Using `FilteredList` from JavaFX."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Convenient as the filter is maintained even when the base list is changed."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Abstracts away filtering logic, only need to be concerned with the predicate used."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Any filter updates will automatically update UI as it implements `ObservableList`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Only works as a simple filter."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* **Alternative 2:** Using `Streams` from Java."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Powerful, can also be used to transform tasks as an intermediate operation."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** For the same predicate, a new stream will need to be made when the task list is changed."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Events will need to be raised to update UI on newly filtered list of tasks."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d Future Enhancements"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Currently, searching by task name only matches full keywords. In the future, part of words can be matched to"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "allow users to search with incomplete keywords."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "// end::listfindtasks[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// tag::calendarShow[]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Calendar show feature"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The calendar show feature is facilitated by the `ModelManager` and displayed through the `CalendarPanel`. The purpose of this feature is to allow the user to more easily view his tasks."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "This feature can be broken down into two stages: updating the model based on user input and rendering the UI."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Stage 1: Input handling"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The following operation is exposed via the `Model` interface:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* `Model#updateCalendarMonth()` -- Saves the given calendar that encapsulates the month to be displayed in the calendar panel."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The basic flow of the `calendar show` command is as such:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 1. The user enters the command `calendar show y/2018 m/12`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 2. The command is parsed and a `ShowCommand` object is created with the appropate values for year and month."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 3. The `ShowCommand#execute()` method is invoked, and `Model#updateCalendarMont()` is called with a `Calendar` object encapsulating the first day of the specified month `1 Dec 2018`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The date of the month is arbitrarily chosen. However this is not strictly necessary as the necessary processing will be done by the UI component when rendering the calendar."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "This is summarised in the following image."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".Calendar Show Command Logic Sequence Diagram"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "image::CalendarShowCommandSequence.png[width\u003d\"1280\"]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Stage 2: UI Rendering"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The following operation is exposed via the `Model` interface:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* `Model#getCalendarMonth()` -- Returns an `ObservableValue\u003cCalendar\u003e` for the calendar"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "UI elements to determine the month to display and the weekday it starts on."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Given below is how the calendar UI is initialised."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 1. The user launches the application. The `Model` is initialised with a `ObservableValue\u003cCalendar\u003e` representing the current date. The `MainWindow` class calls `Model#getCalendarMonth()` and `Model#getFilteredTaskList()` when creating the `CalendarPanel`. This initialises the `CalendarPanel` with an `ObservableList\u003cTask\u003e` and `ObservableValue\u003cCalendar\u003e` to allow it to perform UI updates when necessary."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 2. The `CalendarPanel` constructs a `GridPane` and sets the row and column constraints."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 3. The `CalendarPanel` populates the `GridPane`. The cells in the header row are populated with `CalendarHeaderCell` elements containing the days of a week. All other cells are populated with `CalendarContentCell` elements based on its position in the grid. The `CalendarContentCell` elements are intialised with the `ObservableList\u003cTask\u003e` and `ObservableValue\u003cCalendar\u003e`."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 4. The `CalendarContentCell` computes the date that it represents based on the calendar it receives and its position in the grid. It then creates a `FilteredList\u003cTask\u003e` from the `ObservableList\u003cTask\u003e` that only contains tasks belonging to that state. Finally, the `ListView\u003cTask\u003e` element configured to display elements in the `FilteredList\u003cTask\u003e` with `CalendarTaskCard` elements."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 5. The `CalendarContentCell` listens to updates to the `ObservableValue\u003cCalendar\u003e` that would update the predicate for the `FilteredList\u003cTask\u003e`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 6. The `CalendarPanel` writes the header for the month and year it is displaying."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 7. The `CalendarPanel` listens to updates to the `ObservableValue\u003cCalendar\u003e` that would update the calendar header with the month and year of the new value."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Initialisation complete. +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Given below is how `calendar show` command is handled by the UI components."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 1. The user enters `calendar show y/2018 m/1`. This causes `Model#updateCalendarMonth` to called, which sets the new value for the `ObservableValue\u003cCalendar\u003e`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 2. The update to the `ObservableValue\u003cCalendar\u003e` triggers the listener registered by the `CalendarPanel`. This causes the calendar header to be updated via `CalendarPanel#handleUpdateCalendar`."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Step 3. The update to the `ObservableValue\u003cCalendar\u003e` triggers the listener registered by the `CalendarContentCell`. This causes it to recompute the date that it represents and update the predicate for its `FilteredList\u003cTask\u003e`. This causes cell to display the appropriate tasks based on the new designated month."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Update complete. +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "The image below summarises the abovementioned mechanism for a single cell in the calendar."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".Calendar UI Rendering Sequence Diagram"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "image::CalendarRenderSequence.png[width\u003d\"1280\"]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Where to filter tasks by month for displaying in the calendar."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* **Alternative 1 (current choice):** Calendar object representing current month and full task list passed to calendar pane, all filter operations done in the calendar pane."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Less data duplication."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Allows effect of task filtering via the CLI to also be visible in the calendar view."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Allows display of tasks in adjacent months."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Slightly less efficient since each cell needs to filter the entire task list."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* **Alternative 1:** Done in the model"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Application logic does not reside in the view layer."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Repeated filtering at multiple steps."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Task data is duplicated in multiple places."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Difficult to display events from adjacent months."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Construction of grid cell."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* **Alternative 1 (current choice):** Cells are constructed once and contents are updated each time the month is changed"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Better performance: Deleting and recreating elements incurs some computational cost."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Cleaner abstraction: Code better follows Single Responsibility Principle. Updating of predicate for a `FilteredList\u003cTask\u003e` more accurately represents the actual behaviour being modelled."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Increased complexity of implementation."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* **Alternative 2:** Delete and regenerate cell contents each time the month is changed"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Ease of implementation."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Poorer performance."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Messy code. One huge class will be used for the entire calendar."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// end::calendarShow[]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::editdeletetasks[]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Editing and Batch Deleting Tasks"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "The code for editing and deleting tasks is actually pretty similar to how it is implemented for persons. This is a combination of adding support for two additional commands: `tasks edit` and `tasks delete` inside `TasksParser`, defining the parser classes `EditCommandParser` and `DeleteCommandParser`, and the command classes `EditCommand` and `DeleteCommand`, and finally, adding `void updateTask(Task target, Task editedTask);` and `void deleteTask(Task target);` in the `Model` interface, and implementing them in the `ModelManager` class."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "As for validation, in `EditCommandParser`, user input will be checked whether they conform to the format, else `ParseException` is thrown and usage message will be shown to the user. Meanwhile, `EditCommand` does another kind of validation: that the start date and time are before the end date and time, else `CommandException` is thrown and the user will be informed to ensure the chronological order of start and end `DateTime`. All these validations are done using methods defined inside `DateTime`."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "taneliang"
        },
        "content": "To explain more clearly, you can see below a sequence diagram of what happens when the user asks the program to edit a task:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".Sequence Diagram of `tasks edit` Command in the `Logic` Component"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::EditTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".Sequence Diagram of `tasks edit` Command in the `Model` Component"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::EditTaskModelSequenceDiagram.png[]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Please do note that `DeleteCommand` for `Task` is different from that of `Person` in that the former actually takes in a list of indices to be deleted, which is required to support batch deleting tasks. Changes are also made in `DeleteCommandParser` to add support for multiple indices user input, and to recognise the keyword `\"all\"`. Should the keyword `\"all\"` be encountered, the list passed to `DeleteCommand` is `null`, which is a special value to indicate to `DeleteCommand` to delete all tasks in the current displayed list. You can find below the sequence diagram for batch-deleting task(s)."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".Sequence Diagram of `tasks delete` Command in the `Logic` Component"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::DeleteTaskModelSequenceDiagram.png[]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".Sequence Diagram of `tasks delete` Command in the `Model` Component"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::DeleteTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "These diagrams are generated using http://plantuml.com/[PlantUML]. The files used to generate the image files are stored inside `docs/plantuml`."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Note the `AddressBookChangedEvent` that is raised -- this will notify `StorageManager` that there is a change in the `AddressBook`, and so to save to disk."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d\u003d Future Enhancements"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Currently, the methods `void updateTask(Task target, Task editedTask)` and `void updatePerson(Person target, Person editedPerson)` in the `Model` interface are very similar. Perhaps in the future `Model` can be refactored as a generic so that there is minimum code duplication."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::editdeletetasks[]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// tag::assigning-tasks-and-contacts[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d Assigning and unassigning tasks and contacts"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Tasks and contacts can be assigned to each other using the commands `tasks assign` and `contacts assign`, and unassigned by the `tasks unassign` and `contacts unassign` commands."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "taneliang"
        },
        "content": "This many-to-many relationship is stored as a list of task IDs and person IDs in the Person and Task classes respectively. The IDs are UUIDs, chosen because they are guaranteed to be globally unique and are not dependent on the IDs of other tasks and persons. The IDs are generated randomly by the Person and Task classes if they are not provided to their respective constructors."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "taneliang"
        },
        "content": "The commands are parsed by `AssignCommandParser` and `UnassignCommandParser`, which are used by both `TasksParser` and `ContactsParser`. Both parsers will execute their respective `AssignCommand` and `UnassignCommand`. If both the specified task and contact are found, the task and person IDs will be added to `Person.taskIds` and `Task.personIds` respectively, and the edited objects will be saved to disk. As happens when the edit commands are run, `indicateAddressBookChanged()` is called to update the UI. The data flow is similar to the one for `EditCommand` in the previous section."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "taneliang"
        },
        "content": "The figure below is a sequence diagram that illustrates what happens when the user assigns a contact to a task. The process for assigning tasks to contacts and the unassign process are both very similar to this."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".Sequence Diagram of Task Assign Command"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "taneliang"
        },
        "content": "image::AssignTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "taneliang"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "taneliang"
        },
        "content": "These diagrams are generated using http://plantuml.com/[PlantUML]. The files used to generate the image files can be found in `docs/diagrams/plantuml`."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d\u003d Error handling"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "taneliang"
        },
        "content": "`AssignCommand` will also throw errors if a user tries to assign a task to a contact when the contact has already been assigned. Although this is not strictly necessary as the IDs are stored in sets and it would have been impossible to assign someone twice, the error message assures the user that no double assignments will be made, and thus improves the user experience. Similarly, `UnassignCommand` throws errors if the user attempts to unassign a contact from a task when the contact is not assigned to it."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d\u003d Alternative implementations considered"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "taneliang"
        },
        "content": "An alternative implementation that was considered was to model the many-to-many relationship using an `Assignment` class, which will act like a join table in relational databases. This would have slightly decoupled the `Person` and `Task` classes. However, we chose not to implement it this way as a `Person` will always be assigned to a `Task`, and also because implementing such a relationship with manually managed IDs is extremely complex without a relational database to abstract away the complexity."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d\u003d Future Enhancements"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Both `AssignCommand` and `UnassignCommand` have nearly identical implementations for both tasks and contacts. This is intentional, as this leaves room for the implementation of task or contact specific features. An example of such a possibility is an unassign all feature, e.g. `contacts unassign c/3`, which will be able to unassign contact 3 from all his tasks."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// end::assigning-tasks-and-contacts[]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Target User: NUS Computing students doing group projects"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Target user profile: - is a student managing a project with multiple"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "team members - has a need to manage a significant number of contacts -"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "has a need to manage a significant number of tasks - prefer desktop apps"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "over other types - can type fast - prefers typing over mouse input - is"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Value proposition: manage tasks faster than a typical mouse/GUI driven"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "app"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::userstories[]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`,"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[cols\u003d\",,,\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|Priority |As a… |I want to… |So that I can…"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|`* * *` |user |CRUD Tasks |"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* * *` |project manager |assign other tasks to people |track who’s"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "supposed to complete them and notify them that they are"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "supposed to complete the task"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* * *` |project manager |see the tasks assigned to each person |know"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "what they’re supposed to do"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* * *` |project manager |see an overview of all tasks and people"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "assigned |get a sense of the state of my project"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "and tasks"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* * *` |existing user |search for people and tasks |quickly find the person or task I watn"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|`* * *` |existing user |group tasks according to categories/tags"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|manage a larger number of tasks easily"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* *` |existing user |be alerted to tasks near their deadline |complete tasks on time"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* *` |project manager |send email notifications to people I assigned tasks to"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|ensure they are on track with tasks"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* *` |user |see milestones visualised using a calendar |have a more chronological sense of my tasks"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|`* *` |user |view team members’ calendars and share my own |coordinate"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "meetings and track progress"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|`* *` |user |track the extent of others’ involvement in each task"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|ensure fair distribution of credit"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|`* *` |user |use this product as a web app |easily access my tasks/work"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "on all platforms"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* *` |user |create recurring tasks |avoid repeatedly creating a new task for each recurrence"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`* *` |user |have Autocomplete when typing tags |find existing tags faster"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`*` |power user |create command aliases |enter commands more efficiently"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`*` |power user |vim-mode CLI |enter commands more efficiently"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|`*` |power user |emacs-mode CLI |enter commands more efficiently"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::userstories[]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Use cases"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Create a contact"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to add a person, together with all the attributes."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2.  Cow adds that person to the contacts."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 1a. User provides an invalid attribute."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  ** 1a1. Cow shows an error message."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d List contacts"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2.  Cow shows a list of persons."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Update a contact"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2.  Cow shows a list of persons."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "3.  User requests to update a specific person in the list, together with"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "the new attributes."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4.  Cow updates the person with the given attribute."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid index."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid attribute."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Select a contact"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1. User requests to list contacts."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2. Cow shows a list of contacts."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3. User requests to select a specific contact in the list."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4. Cow selects the contact."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid index."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Delete a contact"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2.  Cow shows a list of persons."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3.  User requests to delete a specific person in the list."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4.  Cow deletes the person."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid index."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::addtaskusecase[]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Create a task"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to add a task, together with all the attributes."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "2.  Cow adds that task."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 1a. User provides an invalid attribute."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** 1a1. Cow shows an error message."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::addtaskusecase[]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d List tasks"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to list tasks."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2.  Cow shows a list of tasks."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::editusecases[]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Edit a task"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to list tasks."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2.  Cow shows a list of tasks."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "3.  User requests to edit a specific task in the list, together with the new attributes."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "4.  Cow edits the task with the given attribute."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid index."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid attribute."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::editusecases[]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Select a task"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1. User requests to list tasks."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2. Cow shows a list of tasks."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3. User requests to select a specific task in the list."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4. Cow selects the task."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid index."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::deleteusecases[]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Delete a task"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1.  User requests to list tasks."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2.  Cow shows a list of tasks."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3.  User requests to delete a specific task in the list."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4.  Cow deletes the task."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides an invalid index."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::deleteusecases[]"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::batchdeletetasks[]"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Batch delete tasks"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1. User requests to list tasks."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2. Cow shows a list of tasks."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3. User requests to delete a number of tasks in the list."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4. Cow deletes the specified tasks."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 3a. User provides a list of indices containing an invalid index."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** 3a1. Cow shows an error message."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Delete all tasks"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "1. User requests to list tasks."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "2. Cow shows a list of tasks."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "3. User requests to delete all tasks in the list."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "4. Cow deletes all tasks in the list."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::batchdeletetasks[]"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// tag::assignpeopletotask[]"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d Assign people to a task"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1. User requests to list people."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2. Cow shows a list of people."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3. User requests to list tasks."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4. Cow shows a list of tasks."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "5. User requests to assign a person to a task."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "6. Cow assigns the person to the task."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 4a. The list is empty."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 5a. User provides an invalid person or task index."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** 5a1. Cow shows an error message."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* 5b. User requests to assign a person already assigned to the task."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** 5b1. Cow shows a message telling the user the person is already assigned."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d Unassign person from a task"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "1. User searches for a contact."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "2. Cow displays the contact."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "3. User requests to view tasks assigned to the contact."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "4. Cow displays a list of tasks assigned to the contact."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "taneliang"
        },
        "content": "5. User requests to unassign a contact from a task."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "taneliang"
        },
        "content": "6. Cow unassigns the contact from the task."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "taneliang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "taneliang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "taneliang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "taneliang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* 4a. The list is empty."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "taneliang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "taneliang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* 5a. User provides an invalid person or task index."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** 5a1. Cow shows an error message."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "taneliang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* 5b. User requests to unassign a person that is not assigned to the task."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** 5b1. Cow shows a message telling the user the person is not assigned."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "taneliang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// end::assignpeopletotask[]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// tag::calendarUseCases[]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d View calendar"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "1. User requests to display calendar for specified month and year."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "2. Cow displays the specified month and year in the calendar panel populated with tasks based on task end date."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d List calendars"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "1. User requests to list calendars."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "2. Cow displays list of all calendars I have access to, including shared calendars."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Import calendar"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "1. User requests to import calendar XML file and specifies calendar name."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "2. Cow imports tasks contained in XML file into the a calendar with the specified name."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* 2a. A calendar already exists with the specified name."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** 2a1. Cow notifies the user and merges the incoming calendar with the pre-existing calendar."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Share calendar"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "1. User requests to share his calendar."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "2. Cow exports an XML file containing all current existing tasks to the specified path."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// end::calendarUseCases[]"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Non-Functional Requirements"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Disability friendly"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** colour scheme"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** compatibility with screen readers"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** on-screen keyboard"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Infinitely scalable (serverless back end on AWS Lambda-equivalent)"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Support alternative (better, faster) forms of storage"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 9 or higher"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "installed."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Advanced analytics on tasks for work efficiency insights"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* Remove all N+1 queries and O(n)"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "lookups"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Mainstream OS"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Tasks"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Text describing work to be done, may be attached to one or more"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "contacts"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Alternative storage"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** Local/Remote databases"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Contact"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Represents a person, with name, email, etc."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Product survey"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* GitHub/GitLab/Bitbucket Issues"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Bugzilla"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Jira"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Launchpad"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Asana"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Trello"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Pen and paper"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Email"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Orgmode"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::manualtestingindocomsoft[]"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts and tasks."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   The window size should be optimum if your screen\u0027s resolution is at least 1920x1080."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. In case window size is not optimum, resize the window to an optimum size."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ". Closing the application"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `exit`"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: the application should exit and the window should disappear."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::ManualTestingAddTasks[]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d\u003d Adding Tasks"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ". Adding a task while all tasks are listed"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".. Prerequisites: List all tasks using the `tasks list` command. There can be any number of tasks in the list."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".. Test case: `tasks add n/Brush the cows sd/20180101 st/0000 ed/20181231 et/2359 t/Chill`"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "   Expected: A new task with the fields entered is added to the bottom of the task list."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".. Test case: `tasks add n/Slaughter the cows ed/20190101 et/1200`"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "   Expected: A new task with the entered name and end date and time is added with the current date and time as the"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "   start date and time."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".. Test case: `tasks add n/Feed the cows sd/20180101 st/2359 ed/20180101 et/0000`"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "   Expected: No task is added. An error message is shown."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".. Test case: `tasks add n/Feed the cows ed/19700101 et/0000`"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "   Expected: No task is added. An error message is shown."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".. Test case: `tasks add n/Feed the cows sd/20180101 st/0000 ed/20180231 et/2500`"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "   Expected: No task is added. An error message is shown."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ".. Other incorrect tasks add commands to try: Names containing non-alphanumeric characters, dates that don\u0027t exist on"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "   the calendar, times outside the range 0000-2359 inclusive, wrongly formatted dates and times."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::ManualTestingAddTasks[]"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Editing Tasks"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ". Editing a task while all tasks are listed"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Prerequisites: List all tasks using the `tasks list` command. There are at least 4 tasks in the list."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 1 n/Slaughter the cow` +"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: First task is edited such that its name is now `Slaughter the cow`. New details of the edited task are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 1 sd/20180101 st/0000 ed/20180101 et/2359` +"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: First task is edited such that its start date and time are 1 January 2018, 00.00am and its end date and time are 1 January 2018, 23.59pm."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   New details of the edited task are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 1 t/` +"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: First task is cleared of any tags that it might have had."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   New details of the edited task are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 1 t/messy` +"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: First task\u0027s tag is now only `messy`."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   New details of the edited task are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 1 t/messy t/mean` +"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: First task\u0027s tags are now `mean` and `messy`. They are shown in no particular order."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   New details of the edited task are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Other correct tasks edit command to try: Combining editing name with start and/or end date and time and/or tags,"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Editing only start date and time as long as they are before the end date and time."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 0 n/Slaughter the cow` +"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: No task is edited. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 1 sd/20181231 st/0000 ed/20180101 et/2359` +"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: No task is edited. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks edit 1` +"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: No task is edited. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Other incorrect tasks edit command to try: `tasks edit`, `tasks edit x` (where x is negative or larger than the list size),"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Editing with invalid start and/or date and/or time, Editing with non-alphanumeric characters in the task name."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Deleting Task(s)"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Prerequisites: List all tasks using the `tasks list` command. There are at least 4 tasks in the list."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks delete 1` +"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: First task is deleted from the task list. Details of the deleted task are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks delete 0` +"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: No task is deleted. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Other incorrect tasks delete command to try: `tasks delete`, `tasks delete x` (where x is negative or larger than the list size)"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ". Deleting multiple tasks while all tasks are listed"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Prerequisites: List all tasks using the `tasks list` command. There are at least 4 tasks in the list."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks delete 1 3 2` +"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: First, second and third tasks are deleted from the task list. Details of the deleted tasks are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks delete 1 4 0` +"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: No task is deleted. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Other incorrect tasks delete command to try: `tasks delete 1 2 x` (where x is negative or larger than the list size)"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ". Deleting all tasks shown in the task list"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Prerequisites: List all tasks using the `tasks list` command. There are at least 1 task."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ".. Test case: `tasks delete all` +"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "   Expected: All tasks shown in the task list are deleted. Details of the deleted tasks are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::manualtestingindocomsoft[]"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// tag::filterTasksManualTestInstructions[]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Filtering tasks"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ". Searching for tasks"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Prerequisites: There are multiple tasks in the list for visible results."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks find n/work` +"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Any tasks with `work` in the name are listed in the tasks list panel. Number of tasks listed is shown in the status message."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks find t/farm` +"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Any tasks with the `farm` tag are listed in the tasks list panel. Number of tasks listed is shown in the status message."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks find sd/20180105` +"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Any tasks that starts at `20180105` are listed in the tasks list panel. Number of tasks listed is shown in the status message."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks find n/hello sd/20181103` +"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Any tasks with `hello` in the name and start date `20181103` are listed in the tasks list panel. Number of tasks listed is shown in the status message."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks find t/` +"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Task list is not changed. Error details is shown in the status message."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Other incorrect commands to try: `tasks find n/`, `tasks find sd/invaliddate`, `tasks find ed/` +"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// end::filterTasksManualTestInstructions[]"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// tag::calendarManualTestInstructions[]"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Calendar Show"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Tasks with long names will be truncated in the calendar. +"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "If there are more than 5 tasks ending on that day, the cell will be scrollable, but a scroll bar is not displayed due to space constraints."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ". Calendar show command displays specified month in calendar."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `calendar show y/2018 m/1` +"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Calendar header changes to \"January 2018\". Days of the week should be correctly displayed."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ". Calendar displays tasks ending in specified month."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Pre-requisites:"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... List all tasks using the `tasks list` command."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... Display calendar for January 2018 using the `calendar show y/2018 m/1` command."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks add n/test calendar show sd/20170101 ed/20180115 et/1200` +"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Cell corresponding to 15 Jan 2018 contains the entry displaying \"test calendar show\"."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ". Calendar displays multiple tasks due on the same day"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Pre-requisites: List all tasks using the `tasks list` command."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Enter the `tasks add n/test calendar multiple sd/20170101 ed/20181212 et/1200` command 3 times."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Enter the `calendar show y/2018 m/12` command. +"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Cell corresponding to 12 December 2018 has multiple entries displaying \"test calendar multiple\"."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ". Calendar displays adjacent months correctly."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Pre-requisites:"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... List all tasks using the `tasks list` command."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... Display calendar for December 2018 using the `calendar show y/2018 m/12` command."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks add n/test calendar previous month sd/20170101 ed/20181127 et/1200`. +"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Cell corresponding to 27 November 2018 has one new entry displaying \"test calendar previous month\"."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test case: `tasks add n/test calendar following month sd/20170101 ed/20190102 et/1200` +"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Cell corresponding to 2 Jan 2019 has one new entry displaying \"test calendar following month\"."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ". Default displayed calendar on app startup."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Create task ending in the current month."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Shut down the app"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Launch the app +"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Calendar displays the current month. Calendar should be populated with tasks ending in the current month."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ". User input is validated."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".. Test cases:"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... `calendar show y/0 m/12`"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... `calendar show y/10000 m/12`"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... `calendar show y/2018 m/0`"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "... `calendar show y/2018 m/13`"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "+"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Expected: Calendar is unchanged. Error details shown in the status message."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// end::calendarManualTestInstructions[]"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// tag::assignManualTestInstructions[]"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d Assigning a Task to a Contact"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "taneliang"
        },
        "content": ". Assigning a task to a contact and vice versa while some or all tasks and contacts are listed."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Prerequisites: List tasks using the `tasks list` or `tasks find` commands, and list contacts using the `contacts list` or `contacts find` commands. There must be at least 1 task and 2 contacts on screen."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `tasks assign c/1 k/1` +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: First task is assigned to the first contact. Details of the assignment are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `tasks assign c/1 k/1` +"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No assignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `contacts assign c/1 k/1` +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No assignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `contacts assign c/2 k/1` +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: Second contact is assigned to the first task. Details of the assignment are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `contacts assign c/2 k/1` +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No assignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `tasks assign c/2 k/1` +"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No assignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Other incorrect assign commands to try: `tasks assign` or `contacts assign`, `tasks assign c/x` or `contacts assign c/x` (where x is any integer), `tasks assign k/x` or `contacts assign k/x` (where x in any integer), `tasks assign c/x k/y` or `contacts assign c/x k/y` (where x is negative or larger than the contacts list size and/or y is negative or larger than the task list size)."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d\u003d Unassigning a Task from a Contact"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "taneliang"
        },
        "content": ". Unassigning a task from a contact and vice versa while some or all tasks and contacts are listed."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Prerequisites: List tasks using the `tasks list` or `tasks find` commands, and list contacts using the `contacts list` or `contacts find` commands. There must be at least 1 task and 2 contacts on screen. Task 1 must be assigned to contacts 1 and 2, as detailed in the previous test case."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `tasks unassign c/1 k/1` +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: First task is unassigned from the first contact. Details of the unassignment are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `tasks unassign c/1 k/1` +"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No unassignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `contacts unassign c/1 k/1` +"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No unassignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `contacts unassign c/2 k/1` +"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: Second contact is unassigned from the first task. Details of the unassignment are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `contacts unassign c/2 k/1` +"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No unassignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Test case: `tasks unassign c/2 k/1` +"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "taneliang"
        },
        "content": "   Expected: No unassignment is made. Error detail is shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".. Other incorrect unassign commands to try: `tasks unassign` or `contacts unassign`, `tasks unassign c/x` or `contacts unassign c/x` (where x is any integer), `tasks unassign k/x` or `contacts unassign k/x` (where x in any integer), `tasks unassign c/x k/y` or `contacts unassign c/x k/y` (where x is negative or larger than the contacts list size and/or y is negative or larger than the task list size)."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// end::assignManualTestInstructions[]"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 104,
      "tuesmiddt": 328,
      "taneliang": 98,
      "indocomsoft": 150,
      "zxjtan": 178,
      "-": 631
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d Cow - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "By: `Team T09-1`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Cow is an application for those who prefer to use a desktop app for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "managing tasks and contacts. It is optimized for those who prefer to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "work with a Command Line Interface (CLI) while still having the benefits"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "of a Graphical User Interface (GUI). If you can type fast, Cow can"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "get your contact and task management done faster than traditional GUI"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "apps."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::quickstart[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "1.  Ensure you have JRE 9 or later installed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "2.  Download the latest `.jar` file link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "3.  Place it in the folder where you want the data files to be stored."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "4.  Double-click the `.jar` file to start the app. The GUI should appear"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "in a few seconds"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "5.  Type in a command and press kbd:[Enter] to execute it. For a start, type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`help` and press kbd:[Enter] to see the help page."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "6.  Some example commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` : lists all contacts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney`: adds contact named `John Doe` to Cow"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks list` : lists all tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks delete 2` : deletes the 2nd task shown in the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `exit` : exits Cow"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Ensure that your screen resolution is at least 1920x1080, or the calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "might not show properly."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::quickstart[]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "e.g. in `contacts add n/NAME`, `NAME` is a parameter which can be used as"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts add n/John Doe`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Items with `…` after them can be used multiple times including zero"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "times e.g. `[t/TAG]...` can be used as"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "`\\` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "`n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "When `INDEX` is a parameter, it refers to the index of the item shown on the task or person list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Don\u0027t worry about having friends or tasks with the same name -- just add them and Cow will process them correctly."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Besides this help page, running a command with the wrong format will also show"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "you how to use the command properly."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "The help page will be shown in another window, but you can resize and move it"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "around. This can be useful to refer to when using the app."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Contacts"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "You are allowed to have entries with the same name."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d View all contacts: `contacts list`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Shows a list of all people in Cow. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Format: `contacts list`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Add contact: `contacts add`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Adds a person to Cow. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `contacts add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "A person can have any number of tags (including 0)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts add n/John Doe p/98765432 e/johnd@example.com a/1 Cow Ave, #02-25 t/intern`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts add n/Jane Smith p/92948232 e/janes@example.com a/10 Cow Boulevard #02-25 t/employee`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Edit contact: `contacts edit`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Edits an existing person in Cow. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "`contacts edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* You can specify `t/` to indicate that you want to clear all existing tags."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts edit 2 n/Jane Doe t/` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Edits the name of the 2nd person to be `Jane Doe` and clears all existing tags."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Find contact: `contacts find`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Finds people whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `contacts find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts find John` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Delete contact: `contacts delete`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Deletes the specified person in Cow. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `contacts delete INDEX`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts delete 2` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Deletes the 2nd person in Cow"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts find Jane` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts delete 1` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Deletes the 1st person in the list of people resulting from the `contacts find`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "command"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// tag::assigntasktocontact[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Assign tasks to contact: `contacts assign`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Assigns a task to a specified person in Cow. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Format: `contacts assign c/CONTACT_INDEX k/TASK_INDEX`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Assigns the person at the specified `CONTACT_INDEX` to the task at the specified"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`TASK_INDEX`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `CONTACT_INDEX` refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `TASK_INDEX` refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* These indices *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts assign c/2 k/1` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Assigns the 2nd person in Cow to the 1st task in Cow"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts find Alex` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts assign c/1 k/3`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Assigns the 1st person in the list of people resulting from the `contacts find`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "command to the 3rd task in Cow"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Unassign tasks from contact: `contacts unassign`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Unassigns a task from a specified person in Cow. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Format: `contacts unassign c/CONTACT_INDEX k/TASK_INDEX`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// end::assigntasktocontact[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Unassigns an *already existing assignment* between the person at the specified"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`CONTACT_INDEX` to the task at the specified `TASK_INDEX`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `CONTACT_INDEX` refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `TASK_INDEX` refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* These indices *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts unassign c/2 k/1` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Unassigns the 2nd person in Cow from the 1st task in Cow"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts find Alex` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts assign c/1 k/3`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Unassigns the 1st person in the list of people resulting from the `contacts find`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "command from the 3rd task in Cow"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d Show tasks assigned to contact: `contacts assigned`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Displays all tasks assigned to the specified contact in the tasks pane."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "When the command is entered, you should see the list of tasks update to show only the"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "tasks that are assigned to the specified contact. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Format: `contacts assigned INDEX`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Displays all tasks assigned to the person at the specified `INDEX`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "The person specified at `INDEX` will be highlighted, and the tasks assigned are"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "displayed on the displayed tasks list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts assigned 2` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Displays all tasks assigned to the 2nd person in the current displayed person list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts find Jane` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts assigned 1`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Displays all tasks assigned to the 1st person in the list of people resulting"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "from the `contacts find` command"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Tasks"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Format for entering dates is `YYYYMMDD`, e.g. `20183112`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Format for entering times is `HHMM` in 24-hour time, e.g. `2359`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Most task commands have a similar format to their equivalents for contacts, except"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "that they have different prefixes (`tasks` vs `contacts`)."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "You are allowed to have entries with the same name."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d View all tasks: `tasks list`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Shows a list of all tasks in Cow. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `tasks list`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// tag::addtasks[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Add task: `tasks add`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Adds a task to Cow. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "`tasks add n/TASK_NAME [sd/START_DATE] [st/START_TIME] ed/END_DATE et/END_TIME [t/TAG]…`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* The end date and time cannot be earlier than the start date and time."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "If start date or time is not entered, the missing field(s) will default to the current date/time."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Therefore, it is invalid to enter an end date and time before the current date and time."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks add n/Math Assignment sd/20180101 st/0000 ed/20181231 et/2359 t/school t/urgent`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* `tasks add n/Milk the cows ed/20181129 et/2359 t/farm`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "// end::addtasks[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::edittasks[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Edit task: `tasks edit`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Edits an existing task in Cow. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks edit INDEX [n/TASK_NAME] [sd/START_DATE st/START_TIME] [ed/END_DATE et/END_TIME] [t/TAG]…`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* You can specify `t/` to indicate that you want to clear all existing tags."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Date and time are regarded as one field, and after editing, start date and time"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "must be before end date and time."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks edit 1 sd/20050108 st/1235` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Edits the start date and time of the 1st task to be 8 January 2005, 12:35pm."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `task edit 2 n/Brush the cows t/` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Edits the name of the 2nd task to be `Brush the cows` and clears all existing tags."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::edittasks[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "// tag::listfindtasks[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d\u003d\u003d Search for tasks: `tasks find`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Find tasks based on name, start date, end date and/or tags. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "When the command is entered, you should see the list of tasks update to show only the"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "tasks that match your search request. +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "`tasks find [n/KEYWORD]... [sd/START_DATE] [ed/END_DATE] [t/TAG]…`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Searching by keyword is case insensitive. e.g `cows` will match `Cows`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Only full words will be matched. e.g. `Cow` will not match `Cows`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Providing multiple keywords or tags will return tasks that match any of the keywords or tags. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "e.g. `tasks find n/cow n/farm` will search for tasks with either `cow` or `farm` in the name."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Providing multiple start dates or end dates will only use the last one for filtering. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "e.g. `tasks find ed/20181130 ed/20181212` will search with end date `20181212`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Searching based on different criteria will return tasks that match all criteria. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "e.g. Searching on start date and end date will return tasks that match both."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks find ed/20181130` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Displays all tasks whose end date is 30 November 2018"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `tasks find n/cows n/brush` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Displays all tasks whose name contains either `cows` or `brush`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* `tasks find t/farm t/land` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Displays all tasks that contains either the `farm` or `land` tags."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks find n/Cows t/farm` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Displays all tasks whose name contains `Cows` and has the `farm` tag."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "// end::listfindtasks[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d\u003d Select a task: `tasks select`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Selects the task identified by the index number used in the displayed task list. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Format: `tasks select INDEX`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Selects the task and shows information about it in the task details pane"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "right below the displayed task list."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks list` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks select 2` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Selects the 2nd task in Cow."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks find ed/20181130` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks select 1` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Selects the 1st task whose end date is 30 November 2018"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::tasksdelete[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Delete task: `tasks delete`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Deletes all tasks corresponding to the indices provided."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Format: `tasks delete INDEX1 [INDEX2] [INDEX3] ...`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Deletes tasks at the specified indices `INDEX1 [INDEX2] [INDEX3]...`, and the"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "indices need not be in order"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* There must at least be one index specified"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks delete 1` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Deletes the 1st task on the displayed task list"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks delete 1 5 4` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Deletes the 1st, 4th and 5th tasks in the displayed task list"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d\u003d Delete all tasks: `tasks delete all`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Deletes all tasks that are shown in the displayed task list."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Format: `tasks delete all`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "If you accidentally deleted all tasks in the displayed task list, use `undo` to"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "recover deleted tasks."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// end::tasksdelete[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// tag::assigncontacttotask[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Assign person to task: `tasks assign`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Assigns a person to a specified task in Cow. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Format: `tasks assign k/TASK_INDEX c/CONTACT_INDEX`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Assigns the task at the specified `TASK_INDEX` to the person at the specified"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`CONTACT_INDEX`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `TASK_INDEX` refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `CONTACT_INDEX` refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* These indices *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks assign k/1 c/2` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Assigns the 1st task in Cow to the 2nd person in Cow"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks find n/Cows` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts assign k/3 c/1` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Assigns the 3rd task in the list of tasks resulting from the `tasks find`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "command to the first person in Cow"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Unassign person from tasks: `tasks unassign`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Unassigns a person from a specified task in Cow. +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Format: `tasks unassign k/TASK_INDEX c/CONTACT_INDEX`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "taneliang"
        },
        "content": "// end::assigncontacttotask[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Unassigns an *already existing assignment* between the person at the specified"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`CONTACT_INDEX` to the task at the specified `TASK_INDEX`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `CONTACT_INDEX` refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `TASK_INDEX` refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* These indices *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks unassign k/1 c/2` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Unassigns the 1st task in Cow from the 2nd person in Cow"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts list` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks find n/Cows` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks assign k/3 c/1` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Unassigns the 3rd task in the list of tasks resulting from the `tasks find`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "taneliang"
        },
        "content": "command from the first person in Cow"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d\u003d Show full details of a task: `tasks assigned`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Displays the contacts assigned to the task. +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "When the command is entered, you should see the list of contacts update to show only the"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "contacts that are assigned to the specified task. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Format: `tasks assigned INDEX`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Displays all persons assigned to the task at the specified `INDEX`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "The task specified at `INDEX` will be selected and showed in the task details pane,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "and the people assigned to it are displayed on the displayed person list."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks assigned 2` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Displays all people assigned to the 2nd task in the current displayed task list."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks find n/Cows` +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks assigned 1`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Displays all people assigned to the 1st task in the list of tasks resulting"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "from the `tasks find` command"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Format for entering year is `YYYY`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* Format for entering month is `MM`."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Each cell in the calendar is populated with tasks that end on that day."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* Task filters applied via the `tasks find` command would also apply to the tasks displayed in the calendar."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* If there are more than 5 tasks ending on that day, the cell will be scrollable, but a scroll bar is not displayed due to space constraints."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "****"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Clicking on an entry in the calendar would display it in the task details panel."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// tag::calendarShow[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d View calendar for tasks due within given year and month: `calendar show`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Displays the specified month in the calendar panel. +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `calendar show y/YEAR m/MONTH`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Entries from the end of the previous month and the start of the following month may also be displayed depending on the length and start day of the specified month."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* `calendar show y/2018 m/12` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Displays tasks due in December 2018 in the calendar."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "// end::calendarShow[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d List all calendars available: `calendars list` `[coming in v2.0]`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `calendars list`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Import calendar: `calendars import` `[coming in v2.0]`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `calendars import f/PATH_TO_FILE n/CALENDAR_NAME`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Share calendar: `calendars share` `[coming in v2.0]`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Writes all tasks into a XML file at the specified path."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Format: `calendars share f/PATH_TO_FILE`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d Global"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Undo previous command `undo`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Restores Cow to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Undoable commands are commands that modify tasks, contacts and assignments thereof in Cow"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "(commands containing `add`, `delete`, `edit`, `assign` and `unassign`)."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks delete 1` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`undo` (reverses the `tasks delete 1` command)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks select 1` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts delete 1` +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts assign c/1 k/2` +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`undo` (reverses the `contacts assign c/1 k/2` command) +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`undo` (reverses the `contacts delete 1` command)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Redo previously undone command `redo`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks delete 1` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`tasks list` +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`undo` (reverses the `tasks delete 1` command) +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`redo` (reapplies the `tasks delete 1` command)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `tasks delete 1` +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* `contacts delete 1` +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`contacts assign c/1 k/2` +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`undo` (reverses the `contacts assign c/1 k/2` command) +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`undo` (reverses the `contacts delete 1` command) +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`redo` (reapplies the `contacts delete 1` command)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "`redo` (reapplies the `contacts assign c/1 k/2` command) +"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d\u003d\u003d Clear all tasks and persons `clear`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Clears all tasks and persons from Cow. +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program: `exit`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Data is saved to disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 35,
      "tuesmiddt": 75,
      "taneliang": 12,
      "indocomsoft": 293,
      "zxjtan": 11,
      "-": 163
    }
  },
  {
    "path": "docs/team/indocomsoft.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d Julius Putra Tanu Setiaji - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-1/main"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":prURL: https://github.com/CS2103-AY1819S1-T09-1/main/pull"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d PROJECT: Cow"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Cow is a desktop project management application where you can manage both tasks and contacts,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "as well as assign tasks to contacts and vice versa. It also features a calendar"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "to provide an easy visual reference of tasks chronologically."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Cow has an emphasis on interaction using Command Line Interface (\"CLI\")."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "It is written in Java, and it has a Graphical User Interface (\"GUI\") created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "with JavaFX. Cow consists of approximately 14k LoC in Java."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Cow used https://github.com/nus-cs2103-AY1819S1/addressbook-level4[Address Book (Level 4)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "as a base for development."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* *Major enhancement*: added *the ability to edit, delete and batch delete tasks*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "This feature allows you to edit tasks as well as delete one or more tasks at a time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "This feature improves the product significantly because sometimes you may add"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "duplicate tasks or add tasks with wrong details, thus task editing is essential."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Moreover, sometimes you may need to delete more than one tasks at a time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Instead of doing it one-by-one which is time-consuming, they can do it in one"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "command instead."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "This enhancement was built such that the command format between tasks and contacts are similar to improve your experience. Moreover, the batch delete tasks syntax is also built on top of the original single delete command. Efforts were taken to ensure that code duplication remains minimum between delete and batch delete to ensure that the code is maintainable."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* *Minor enhancement 1*: Updated **sample tasks** to include tasks as well assignment between some tasks and contacts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "Upon initial launch, these sets of contacts, tasks and assignment thereof are loaded as default data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "To get familiar with Cow, it is good to have some sample data to play and experiment with. Once you are ready, you can run `clear` to clear all the data in Cow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "This enhancement required me to write a helper function inside `SampleDataUtil` to do assignments between tasks and contacts. This is to ensure data integrity by doing a two-way assignment (task-to-person and person-to-task) as one transaction."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* *Minor enhancement 2*: Added **tasks select** command to select a task and show its details in the task details pane."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** What it does: It selects a task from the displayed task list, and show the task in the task details pane."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Justification: The space available in the tasks lists is very small, so most times the task name is cut off. In order to see more details, you need a command to select from that list to show in the task details pane."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "This enhancement required me to use an Event already wrote by my teammate, `JumpToTaskListRequestEvent`. In order to use it, I need to be able to understand the documentation written by my teammate. This showcases my ability to work in with modular code written by several developers."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dindocomsoft[Collated code at RepoSense]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Project Management:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Managed releases `v1.3.2` and `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Managed milestone `v1.4` issue tracker on GitHub"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Enlarged headless framebuffer for GUI tests to 1920x1080 so that GUI unit tests will not fail in Travis CI: link:{prURL}/183[#183]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Refactor all branding from AddressBook to Cow: link:{prURL}/183[#183]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Made sure that when the main window opens, it is big enough to show the calendar pane: link:{prURL}/183[#183]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Added module name in usage messages: link:{prURL}/87[#87]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Allow editing task\u0027s either start or end DateTime: link:{prURL}/94[#94]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Totally revamped the User Guide: link:{prURL}/158[#158]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Updated the User Guide to include new features: link:{prURL}/84[#84]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Updated the UI class diagram in the Developer Guide: link:{prURL}/172[#172]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Updated the Developer Guide to include the use case of the new features implemented: link:{prURL}/84[#84]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Added diagram to explain how the new features included were implemented: link:{prURL}/62[#62]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): link:{prURL}/89[#89], link:{prURL}/51[#51]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "*** Integrated a new GitHub plugin (coveralls) to the project to track test coverage ({prURL}/50[#50])"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquickstart]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedittasks]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtasksdelete]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duiclassdiagram]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditdeletetasks]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditusecases]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddeleteusecases]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbatchdeletetasks]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualtestingindocomsoft]"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 104
    }
  },
  {
    "path": "docs/team/jaypeeteedee.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d John Phua - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ":pullURL: https://github.com/CS2103-AY1819S1-T09-1/main/pull"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "image::jaypeeteedee.png[width\u003d200px]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "{empty}[https://github.com/JayPeeTeeDee[Github]] | [https://www.linkedin.com/in/john-phua-a15628147[LinkedIn]]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Hello! I am John Phua, a Year 2 Computer Science undergraduate student at the National University of Singapore."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Over the semester, my team and I built _Cow_, a project management application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "This portfolio will introduce you to _Cow_ and my contributions towards its development."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d PROJECT: Cow"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "Cow is a desktop task manager with project management capabilities, powered by a command-line interface."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "It is written in Java by a team of 5 undergraduates from the NUS School of Computing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "By entering commands, Cow allows you to efficiently:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Manage a list of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Manage a list of group members across different project groups"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* Assign tasks to people"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* View the monthly workload of people through a calendar view"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* *Major feature*: Searching of tasks by name, date and tags"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Purpose: Allowing you to efficiently search for tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Value to project: Task lists can get long and cluttered,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "this feature allows you to easily filter through your long list of tasks and retrieve what you want."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Highlights: This feature was built to be flexible according to your needs. You can combine different"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "search criteria to make your search more specific. This required the design of a new class that can accept and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "compound different search criteria together."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* *Code contributions*: [https://github.com/CS2103-AY1819S1-T09-1/main/commits/master?author\u003djaypeeteedee[All code commits]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003djaypeeteedee[Project Dashboard View]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Managed releases `v1.2` - `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Implemented initial `Storage` and `UI` components for tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "(Pull request {pullUrl}/12[#12])"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Updated and maintained the graphical user interface for the list of tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "(Pull requests {pullUrl}/57[#57], {pullUrl}/90[#90], {pullUrl}/103[#103])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Wrote task UI handlers for testing (Pull requests {pullUrl}/91[#91])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Wrote tests for my features that increased code coverage from 71% to 75%"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "(Pull request {pullUrl}/162[#162])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Updated calendar commands in User Guide (Pull request {pullUrl}/31[#31])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Added guide for finding tasks in User Guide (Pull request (Pull request {pullUrl}/100[#100])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Added the implementation of listing and finding tasks in the Developer Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "(Pull request {pullUrl}/66[#66])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "*** Configured Reposense to track contributions from the team."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "|_You can see my contributions to the User Guide for Cow below."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " They showcase my ability to write documentation that is easy for end-users to follow and understand,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " while accounting for possible errors in usage._"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistfindtasks]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "|_You can see my contributions to the Developer Guide for Cow below."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " They showcase my ability to communicate technical concepts to other developers"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlistfindtasks]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilterTasksManualTestInstructions]"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 93,
      "tuesmiddt": 2
    }
  },
  {
    "path": "docs/team/taneliang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d Tan E-Liang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-1/main"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d PROJECT: Cow"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Cow is a group project task manager aimed at students. Its main features include individual task management, and project groupmate management and task assignment. It is a desktop application with a command line interface, which is also further enhanced by a graphical user interface created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "Cow was developed in 2018 by a team of https://cs2103-ay1819s1-t09-1.github.io/main/AboutUs.html[5 undergraduate students] as part of a software engineering module. This personal project portfolio documents my contributions to Cow. Cow is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": ".Screenshot of Cow after it has just assigned a task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "image::Ui_assign.png[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* *Major enhancement*: added *the ability to assign and unassign tasks to groupmates*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** What it does: allows the user to assign a task to a contact and vice versa, and unassign them from each other."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** Justification: This is a key feature for students who manage group projects, as they need to keep track of everyone\u0027s tasks and ensure that their projects will be completed on time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** Highlights: This enhancement required the implementation of a many-to-many relationship without a relational database. This was challenging as it required changes to some core components of the app, and thus resulted in many code changes throughout the codebase."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* *Minor enhancement*: added unique identifiers to contacts and tasks so that Cow is able to identify tasks and contacts between edits, and also to differentiate between nearly-identical tasks and people."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dtaneliang[Collated code at RepoSense]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Managed releases `v1.1` and `v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Created milestones on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Created PR review duty roster"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Participated in the renaming effort of the app: https://github.com/CS2103-AY1819S1-T09-1/main/pull/8[#8]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-T09-1/main/pull/35[#35], https://github.com/CS2103-AY1819S1-T09-1/main/pull/67[#67], https://github.com/CS2103-AY1819S1-T09-1/main/pull/85[#85]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Contributed to forum discussions (example: https://github.com/nus-cs2103-AY1819S1/forum/issues/9[1])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Reported bugs for other teams in the class (examples: https://github.com/CS2103-AY1819S1-W16-3/main/issues/159[1], https://github.com/CS2103-AY1819S1-W16-3/main/issues/165[2], https://github.com/CS2103-AY1819S1-W16-3/main/issues/179[3])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Set up the team repository."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "*** Set up Travis CI integration."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dassigntasktocontact]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dassigncontacttotask]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dassigning-tasks-and-contacts]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dassignpeopletotask]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dassignManualTestInstructions]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "\u003d\u003d PROJECT: ShowFace"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": "During the same semester that I worked on Cow, I was also developing https://showface.io[ShowFace.io], a React web app that allows groups to find the best time to meet. In this project, I was the lead developer, delivering features nearly every day."
      }
    ],
    "authorContributionMap": {
      "taneliang": 69,
      "indocomsoft": 1
    }
  },
  {
    "path": "docs/team/tuesmiddt.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d Chen Shaowei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ":pullURL: https://github.com/CS2103-AY1819S1-T09-1/main/pull"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "image::tuesmiddt.png[width\u003d200px]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "{empty}[https://github.com/tuesmiddt[Github]]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d PROJECT: Cow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Cow is a project management app with an emphasis on Command Line Interface (\"CLI\") interaction. It allows users to completely manage their contacts and tasks without taking their fingers off the keyboard. In addition, a calendar view is available the user to visualise his tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Cow is written in Java, and its Graphical User Interface (\"GUI\") is created with JavaFX. It has approximately 15k LoC. This portfolio documents my contributions to this project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* *Major enhancement*: added *the ability to visualise tasks in a calendar*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** What it does: allows the user to view all tasks due in a specified month through the `calendar show` command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Justification: This feature achieves a significant improvement in the task management workflow by allowing easier and more intuitive deadline management. The user would be able to visualise his tasks for the entire month via the calendar view instead of in a single list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Highlights: This enhancement involves significant changes to the GUI. It requires a good understanding of the tools available via JavaFX in order to both build the feature and test it. In addition, the implementation was challenging as it involved changes at multiple levels in the app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dtuesmiddt[Collated code at RepoSense]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Port Readme, User Guide, and Developer Guide sections from Markdown meeting minutes: https://github.com[#2]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Community"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-1/main/pull/160[#160]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "** Tools"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "*** Introduced the use of PlantUML instead of PowerPoint for the generation of UML diagrams."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|_Calendar features section_"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendarShow]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|_Implementation details of the calendar show feature_"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendarShow]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|_Use cases of the calendar show feature_"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendarUseCases]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|_Manual testing instructions for the calendar show feature_"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendarManualTestInstructions]"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 87
    }
  },
  {
    "path": "docs/team/zxjtan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d Jolene Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-1/main"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d PROJECT: Cow"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Cow is a task management program with a view towards team projects. It includes an integrated contacts management module and assignment of tasks to contacts. Its command-line interface (CLI) is geared towards power users, letting them carry out operations efficiently without their hands leaving the keyboard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "Cow was developed by a team of five Computer Science students from the National University of Singapore, including myself. This project portfolio documents my personal contributions to this project, including 1.5k lines of code (LoC) and contributions to user and developer documentation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "This section documents the features I contributed to the project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* *Major enhancement*: added *structural scaffolding for the tasks module*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** Created the logic for tasks. This included creating a parser for task commands, and implementing a two-level parser to direct user commands the parser for either the contacts module or the tasks module, maintaining modularity of the parsers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** Created the model for tasks. This included auxillary classes including a DateTime class containing input validation and formatted text output tailored to this project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* *Major enhancement*: added *ability to create tasks in Cow*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** Created a command for creating a task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "** Made entry of start date and time of the task optional, defaulting to the date and time of the current moment. This enables faster entry of tasks that are already in progress."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dzxjtan"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|_This section includes my contributions to the user guide, displaying my ability to write user-targeted documentation._"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddtasks]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|_You may see below my contributions to the developer guide, showcasing my technical writing skills as well as the technical depth of my code contributions._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogiccomponent]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodelcomponent]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtaskclass]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddtasks]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|_While the whole group contributed to the table of user stories, I was the one who collated it at the end, streamlining redundancies and standardising the format and grammar._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserstories]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Use cases"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddtaskusecase]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dManualTestingAddTasks]"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 69,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Cow ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Cow data file\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Cow data file\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cow data file\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cow data file\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        logger.info(\"Starting Cow \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Cow ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 8,
      "-": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private String appTitle \u003d \"Cow\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private static final String LOG_FILE \u003d \"cow.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_MISSING_DATETIME \u003d \"Both date and time must be provided\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \"Invalid keyword! Keywords cannot be empty and each keyword should have its own prefix.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \"Invalid tag! Tags cannot be empty and each tag should have its own prefix.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 5,
      "indocomsoft": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CalendarPanelClickEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Represents a click event in the Calendar Panel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarPanelClickEvent extends TaskPanelSelectionChangedEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarPanelClickEvent(Task newSelection) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(newSelection);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 1,
      "tuesmiddt": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToPersonListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class JumpToPersonListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public JumpToPersonListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToTaskListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class JumpToTaskListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public JumpToTaskListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonPanelDeselectionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Represents a deselection in the Person List Panel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class PersonPanelDeselectionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TaskPanelDeselectionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Represents a deselection in the Task List Panel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskPanelDeselectionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TaskPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Represents a selection change in the Task List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Task newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskPanelSelectionChangedEvent(Task newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public Task getNewSelection() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Gets Calendar\u0027s active month."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    ObservableValue\u003cCalendar\u003e getCalendarMonth();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns the list of input entered by the user, encapsulated in a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code ListElementPointer} object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 4,
      "tuesmiddt": 13,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.AppParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final AppParser appParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        appParser \u003d new AppParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            Command command \u003d appParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public ObservableValue\u003cCalendar\u003e getCalendarMonth() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return model.getCalendarMonth();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 6,
      "tuesmiddt": 7,
      "zxjtan": 4,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Cow data has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Returns a format String to insert the module name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @param command the command word"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static String getCommandFormat(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return \"%1$s \" + command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Cow as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/ShowCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Shows the calendar for the specified year and month."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed calendar for %1$s %2$d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD) + \": Shows the calendar view.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            + \"Parameters: \" + PREFIX_YEAR + \"YEAR \" + PREFIX_MONTH + \"MONTH\" + \"\\n\" + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            + getCommandFormat(COMMAND_WORD) + \" \" + PREFIX_YEAR + \"2018 \" + PREFIX_MONTH + \"12\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final Index year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final Index month;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public ShowCommand(Index year, Index month) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        this.month \u003d month; // month is 0 indexed wtf"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // Create calendar object for first day of specified month"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        model.setCalendarMonth(new GregorianCalendar(year.getOneBased(), month.getZeroBased(), 1, 0, 0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                new DateFormatSymbols().getMonths()[month.getZeroBased()], year.getOneBased()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                        \u0026\u0026 year.equals(((ShowCommand) other).year) // state checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                        \u0026\u0026 month.equals(((ShowCommand) other).month)); // state checks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 8,
      "indocomsoft": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/AssignCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Assigns a contact to a task. Both contact and task are identified by the index number used in the displayed person"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * and task list respectively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \": Assigns a contact to a task. Both contact and task are identified by the index number used in the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"displayed person and task list respectively.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"CONTACT_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"4\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_ASSIGN_PERSON_SUCCESS \u003d \"Assigned Person %1$s to Task %2$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_ALREADY_ASSIGNED \u003d \"This person has already been assigned to this task\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetContactIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetTaskIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public AssignCommand(Index targetContactIndex, Index targetTaskIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetContactIndex \u003d targetContactIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetTaskIndex \u003d targetTaskIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetContactIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetTaskIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person personToEdit \u003d filteredPersonList.get(targetContactIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task taskToAssign \u003d filteredTaskList.get(targetTaskIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        TaskId taskId \u003d taskToAssign.getId();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        PersonId personId \u003d personToEdit.getId();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (personToEdit.getTaskIds().contains(taskId) || taskToAssign.getPersonIds().contains(personId)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e updatedTaskIds \u003d new HashSet\u003c\u003e(personToEdit.getTaskIds());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedTaskIds.add(taskId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(personId, personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), personToEdit.getTags(), updatedTaskIds);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e updatedPersonIds \u003d new HashSet\u003c\u003e(taskToAssign.getPersonIds());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedPersonIds.add(personId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(taskId, taskToAssign.getName(), taskToAssign.getStartDateTime(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                taskToAssign.getEndDateTime(), taskToAssign.getTags(), updatedPersonIds);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updateTask(taskToAssign, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetContactIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                targetContactIndex.getOneBased(), targetTaskIndex.getOneBased()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || (other instanceof AssignCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetContactIndex.equals(((AssignCommand) other).targetContactIndex) // state checks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetTaskIndex.equals(((AssignCommand) other).targetTaskIndex)); // state checks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 2,
      "taneliang": 100,
      "indocomsoft": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/AssignedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.person.IsAssignedToPersonPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Selects a person identified using its displayed index,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * and the list of tasks will update to show only the tasks assigned to the person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class AssignedCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assigned\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"list and shows the list of tasks assigned to the person.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public AssignedCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Retrieve the desired person and update filter"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Person desiredPerson \u003d filteredPersonList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        model.updateFilteredTaskList(new IsAssignedToPersonPredicate(desiredPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Update UI (purely cosmetic for now)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof AssignedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AssignedCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 16,
      "zxjtan": 3,
      "indocomsoft": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Deletes a person identified using its displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 1,
      "zxjtan": 3,
      "indocomsoft": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        PersonId id \u003d personToEdit.getId(); // ID is not editable"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e updatedTaskIds \u003d personToEdit.getTaskIds();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new Person(id, updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedTaskIds);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 5,
      "zxjtan": 8,
      "indocomsoft": 3,
      "-": 214
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 3,
      "indocomsoft": 3,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/UnassignCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Unassigns a contact from a task. Both contact and task are identified by the index number used in the displayed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * person and task list respectively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class UnassignCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unassign\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \": Unassigns a contact to a task. Both contact and task are identified by the index number used in the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"displayed person and task list respectively.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"CONTACT_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"4\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_UNASSIGN_PERSON_SUCCESS \u003d \"Unassigned Person %1$s from Task %2$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_NOT_ASSIGNED \u003d \"This person has not been assigned to this task\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetContactIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetTaskIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public UnassignCommand(Index targetContactIndex, Index targetTaskIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetContactIndex \u003d targetContactIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetTaskIndex \u003d targetTaskIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetContactIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetTaskIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person personToEdit \u003d filteredPersonList.get(targetContactIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task taskToUnassign \u003d filteredTaskList.get(targetTaskIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        TaskId taskId \u003d taskToUnassign.getId();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        PersonId personId \u003d personToEdit.getId();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!personToEdit.getTaskIds().contains(taskId) || !taskToUnassign.getPersonIds().contains(personId)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_ASSIGNED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e updatedTaskIds \u003d new HashSet\u003c\u003e(personToEdit.getTaskIds());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedTaskIds.remove(taskId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(personId, personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), personToEdit.getTags(), updatedTaskIds);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e updatedPersonIds \u003d new HashSet\u003c\u003e(taskToUnassign.getPersonIds());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedPersonIds.remove(personId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(taskId, taskToUnassign.getName(), taskToUnassign.getStartDateTime(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                taskToUnassign.getEndDateTime(), taskToUnassign.getTags(), updatedPersonIds);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updateTask(taskToUnassign, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetContactIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNASSIGN_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                targetContactIndex.getOneBased(), targetTaskIndex.getOneBased()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || (other instanceof UnassignCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetContactIndex.equals(((UnassignCommand) other).targetContactIndex) // state checks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetTaskIndex.equals(((UnassignCommand) other).targetTaskIndex)); // state checks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "taneliang": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.model.task.Task.MESSAGE_END_BEFORE_START;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD) + \": Adds a task.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE\" + \"] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START TIME\" + \"] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_END_TIME + \"END TIME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_NAME + \"Math Assignment \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_START_DATE + \"20180101 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_START_TIME + \"0000 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_END_DATE + \"20181231 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_END_TIME + \"2359 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_TAG + \"school \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            + PREFIX_TAG + \"urgent\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (!toAdd.isValidDateTimeRange()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new CommandException(MESSAGE_END_BEFORE_START);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 2,
      "zxjtan": 73,
      "indocomsoft": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/AssignCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Assigns a task to a contact. Both contact and task are identified by the index number used in the displayed person"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * and task list respectively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \": Assigns a task to a contact. Both contact and task are identified by the index number used in the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"displayed person and task list respectively.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"CONTACT_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"4\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_ASSIGN_TASK_SUCCESS \u003d \"Assigned Task %1$s to Person %2$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_ALREADY_ASSIGNED \u003d \"This task has already been assigned to this person\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetContactIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetTaskIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public AssignCommand(Index targetContactIndex, Index targetTaskIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetContactIndex \u003d targetContactIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetTaskIndex \u003d targetTaskIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetContactIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetTaskIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person personToEdit \u003d filteredPersonList.get(targetContactIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task taskToAssign \u003d filteredTaskList.get(targetTaskIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        TaskId taskId \u003d taskToAssign.getId();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        PersonId personId \u003d personToEdit.getId();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (personToEdit.getTaskIds().contains(taskId) || taskToAssign.getPersonIds().contains(personId)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e updatedTaskIds \u003d new HashSet\u003c\u003e(personToEdit.getTaskIds());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedTaskIds.add(taskId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(personId, personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), personToEdit.getTags(), updatedTaskIds);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e updatedPersonIds \u003d new HashSet\u003c\u003e(taskToAssign.getPersonIds());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedPersonIds.add(personId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(taskId, taskToAssign.getName(), taskToAssign.getStartDateTime(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                taskToAssign.getEndDateTime(), taskToAssign.getTags(), updatedPersonIds);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updateTask(taskToAssign, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetContactIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_TASK_SUCCESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                targetTaskIndex.getOneBased(), targetContactIndex.getOneBased()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || (other instanceof AssignCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetContactIndex.equals(((AssignCommand) other).targetContactIndex) // state checks"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetTaskIndex.equals(((AssignCommand) other).targetTaskIndex)); // state checks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 101,
      "indocomsoft": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/AssignedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.JumpToTaskListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.IsAssignedToTaskPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Selects a task identified using its displayed index,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * and the list of persons will update to show only the persons that are assigned to the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class AssignedCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assigned\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \": Selects the task identified by the index number used in the displayed task \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"list and shows the list of persons assigned to the task.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MESSAGE_SELECT_TASK_SUCCESS \u003d \"Selected Task: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public AssignedCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Retrieve the desired task and update filter"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Task desiredTask \u003d filteredTaskList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        model.updateFilteredPersonList(new IsAssignedToTaskPredicate(desiredTask));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Update UI (purely cosmetic for now)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToTaskListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_TASK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof AssignedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AssignedCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Deletes a task identified using its displayed index from the address book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \": Deletes all tasks or the task(s) identified by the index number\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Parameters: all or INDEX1 [INDEX2 INDEX3 INDEX4 ...] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example 1: \" + getCommandFormat(COMMAND_WORD) + \" 1\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example 2: \" + getCommandFormat(COMMAND_WORD) + \" 2 5 4\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example 3: \" + getCommandFormat(COMMAND_WORD) + \" all\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task(s):\\n%1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private final List\u003cIndex\u003e targetIndices;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @param targetIndices null to delete all, else give a list of indices to delete."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public DeleteCommand(List\u003cIndex\u003e targetIndices) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        this.targetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d getTasksToDelete(model.getFilteredTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String deletedTasksString \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                tasksToDelete"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .map(taskToDelete -\u003e taskToDelete.toString())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTasksString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private List\u003cTask\u003e getTasksToDelete(List\u003cTask\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Delete all"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (targetIndices \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return new ArrayList\u003c\u003e(lastShownList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Check that all indices are valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (targetIndices"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .anyMatch(targetIndex -\u003e targetIndex.getZeroBased() \u003e\u003d ((ObservableList) lastShownList).size())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return targetIndices"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .map(targetIndex -\u003e lastShownList.get(targetIndex.getZeroBased()))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \u0026\u0026 (targetIndices \u003d\u003d ((DeleteCommand) other).targetIndices"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        || targetIndices.equals(((DeleteCommand) other).targetIndices))); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.model.task.Task.MESSAGE_END_BEFORE_START;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START TIME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"END TIME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + PREFIX_NAME + \"Implement Edit Tasks\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @param index of the task in the filtered person list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (!editedTask.isValidDateTimeRange()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new CommandException(MESSAGE_END_BEFORE_START);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Creates and returns a {code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        TaskId id \u003d taskToEdit.getId(); // ID is not editable"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DateTime updatedStartDateTime \u003d editTaskDescriptor.getStartDateTime().orElse(taskToEdit.getStartDateTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DateTime updatedEndDateTime \u003d editTaskDescriptor.getEndDateTime().orElse(taskToEdit.getEndDateTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e updatedPersons \u003d taskToEdit.getPersonIds();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new Task(id, updatedName, updatedStartDateTime, updatedEndDateTime, updatedTags, updatedPersons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * corresponding field value of the person"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        private DateTime startDateTime;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        private DateTime endDateTime;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            setStartDateTime(toCopy.startDateTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            setEndDateTime(toCopy.endDateTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, startDateTime, endDateTime, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public void setStartDateTime(DateTime startDateTime) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public Optional\u003cDateTime\u003e getStartDateTime() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return Optional.ofNullable(startDateTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public void setEndDateTime(DateTime endDateTime) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public Optional\u003cDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return Optional.ofNullable(endDateTime);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            // short circuit"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    \u0026\u0026 getStartDateTime().equals(e.getStartDateTime())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    \u0026\u0026 getEndDateTime().equals(e.getEndDateTime())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 5,
      "indocomsoft": 210,
      "zxjtan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.HasTagsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesEndDatePredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesStartDatePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Finds and lists all tasks in task list that fit the user\u0027s request based on name, start date, end date and tags"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Keyword matching for name is case insensitive."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"or by tags and start/end dates and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"KEYWORD]...\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE]\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE]\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + PREFIX_NAME + \"math \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + PREFIX_START_DATE + \"20180101 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + PREFIX_END_DATE + \"20181231 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            + PREFIX_TAG + \"school \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final TaskPredicateAssembler predicateBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindCommand(TaskPredicateAssembler predicateBuilder) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.predicateBuilder \u003d predicateBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        model.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 predicateBuilder.equals(((FindCommand) other).predicateBuilder)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Stores the combined predicate to find tasks with. Multiple predicates can be provided and this class provides"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * the combined predicate for use"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static class TaskPredicateAssembler {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        private NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        private MatchesStartDatePredicate startDatePredicate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        private MatchesEndDatePredicate endDatePredicate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        private HasTagsPredicate hasTagsPredicate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public TaskPredicateAssembler() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public TaskPredicateAssembler(TaskPredicateAssembler toCopy) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            setNamePredicate(toCopy.namePredicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            setStartDatePredicate(toCopy.startDatePredicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            setEndDatePredicate(toCopy.endDatePredicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            setHasTagsPredicate(toCopy.hasTagsPredicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public boolean isAnyPredicateProvided() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(namePredicate, startDatePredicate, endDatePredicate, hasTagsPredicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public void setNamePredicate(NameContainsKeywordsPredicate namePredicate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public Optional\u003cNameContainsKeywordsPredicate\u003e getNamePredicate() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return Optional.ofNullable(namePredicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public void setStartDatePredicate(MatchesStartDatePredicate startDatePredicate) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            this.startDatePredicate \u003d startDatePredicate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public Optional\u003cMatchesStartDatePredicate\u003e getStartDatePredicate() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return Optional.ofNullable(startDatePredicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public void setEndDatePredicate(MatchesEndDatePredicate endDatePredicate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            this.endDatePredicate \u003d endDatePredicate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public Optional\u003cMatchesEndDatePredicate\u003e getEndDatePredicate() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return Optional.ofNullable(endDatePredicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public void setHasTagsPredicate(HasTagsPredicate hasTagsPredicate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            this.hasTagsPredicate \u003d hasTagsPredicate;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public Optional\u003cHasTagsPredicate\u003e getHasTagsPredicate() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return Optional.ofNullable(hasTagsPredicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "         * Creates a combined predicate from the predicates passed in. If none are passed in, returns a predicate that"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "         * returns true for all tasks."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public Predicate\u003cTask\u003e getCombinedPredicate() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (!isAnyPredicateProvided()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                return (task) -\u003e true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                Predicate\u003cTask\u003e namePred \u003d isNull(namePredicate) ? (task) -\u003e true : namePredicate;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                Predicate\u003cTask\u003e startDatePred \u003d isNull(startDatePredicate) ? (task) -\u003e true : startDatePredicate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                Predicate\u003cTask\u003e endDatePred \u003d isNull(endDatePredicate) ? (task) -\u003e true : endDatePredicate;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                Predicate\u003cTask\u003e hasTagsPred \u003d isNull(hasTagsPredicate) ? (task) -\u003e true : hasTagsPredicate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                return (task) -\u003e namePred.test(task)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        \u0026\u0026 startDatePred.test(task)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        \u0026\u0026 endDatePred.test(task)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        \u0026\u0026 hasTagsPred.test(task);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            // short circuit"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (!(other instanceof TaskPredicateAssembler)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            TaskPredicateAssembler e \u003d (TaskPredicateAssembler) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return getNamePredicate().equals(e.getNamePredicate())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    \u0026\u0026 getStartDatePredicate().equals(e.getStartDatePredicate())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    \u0026\u0026 getEndDatePredicate().equals(e.getEndDatePredicate())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    \u0026\u0026 getHasTagsPredicate().equals(e.getHasTagsPredicate());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 167,
      "indocomsoft": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Lists all tasks in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.events.ui.JumpToTaskListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Selects a task identified by its displayed index from the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \": Selects the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_SELECT_TASK_SUCCESS \u003d \"Selected Task: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToTaskListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_TASK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 15,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tasks/UnassignCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Unassigns a task from a contact. Both contact and task are identified by the index number used in the displayed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * person and task list respectively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class UnassignCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unassign\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getCommandFormat(COMMAND_WORD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \": Unassigns a task from a contact. Both contact and task are identified by the index number used in the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"displayed person and task list respectively.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"CONTACT_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + \"Example: \" + getCommandFormat(COMMAND_WORD) + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_CONTACT_ID + \"2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            + PREFIX_TASK_ID + \"4\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_UNASSIGN_TASK_SUCCESS \u003d \"Unassigned Task %1$s from Person %2$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final String MESSAGE_NOT_ASSIGNED \u003d \"This task has not been assigned to this person\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetContactIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Index targetTaskIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public UnassignCommand(Index targetContactIndex, Index targetTaskIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetContactIndex \u003d targetContactIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.targetTaskIndex \u003d targetTaskIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetContactIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (targetTaskIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person personToEdit \u003d filteredPersonList.get(targetContactIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task taskToUnassign \u003d filteredTaskList.get(targetTaskIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        TaskId taskId \u003d taskToUnassign.getId();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        PersonId personId \u003d personToEdit.getId();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!personToEdit.getTaskIds().contains(taskId) || !taskToUnassign.getPersonIds().contains(personId)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_ASSIGNED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e updatedTaskIds \u003d new HashSet\u003c\u003e(personToEdit.getTaskIds());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedTaskIds.remove(taskId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(personId, personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), personToEdit.getTags(), updatedTaskIds);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e updatedPersonIds \u003d new HashSet\u003c\u003e(taskToUnassign.getPersonIds());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        updatedPersonIds.remove(personId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(taskId, taskToUnassign.getName(), taskToUnassign.getStartDateTime(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                taskToUnassign.getEndDateTime(), taskToUnassign.getTags(), updatedPersonIds);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updateTask(taskToUnassign, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetContactIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNASSIGN_TASK_SUCCESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                targetTaskIndex.getOneBased(), targetContactIndex.getOneBased()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || (other instanceof UnassignCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetContactIndex.equals(((UnassignCommand) other).targetContactIndex) // state checks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 targetTaskIndex.equals(((UnassignCommand) other).targetTaskIndex)); // state checks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "taneliang": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AppParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Parses user input. Sends command to the appropriate module parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AppParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        case ContactsParser.MODULE_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return new ContactsParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        case TasksParser.MODULE_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return new TasksParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        case CalendarParser.MODULE_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            return new CalendarParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 3,
      "zxjtan": 5,
      "indocomsoft": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalendarParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.calendar.ShowCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.calendar.ShowCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MODULE_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                return new ShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(e.getMessage(MODULE_WORD));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 52,
      "indocomsoft": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ContactsParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignedCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.contacts.UnassignCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.contacts.AddCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.contacts.AssignCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.contacts.AssignedCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.contacts.DeleteCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.contacts.EditCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.contacts.FindCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.contacts.UnassignCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class ContactsParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MODULE_WORD \u003d \"contacts\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            case AssignedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                return new AssignedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            case UnassignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                return new UnassignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(e.getMessage(MODULE_WORD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 4,
      "taneliang": 10,
      "zxjtan": 12,
      "indocomsoft": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TasksParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.tasks.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.tasks.AssignCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.AssignedCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.tasks.UnassignCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.tasks.AddCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.tasks.AssignCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.tasks.AssignedCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.tasks.DeleteCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.tasks.EditCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.tasks.FindCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.tasks.SelectCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.tasks.UnassignCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class TasksParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MODULE_WORD \u003d \"tasks\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            case AssignedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                return new AssignedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            case UnassignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                return new UnassignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(e.getMessage(MODULE_WORD));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 10,
      "taneliang": 10,
      "zxjtan": 5,
      "indocomsoft": 23,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/calendar/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/calendar/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR \u003d \"Year must be an integer between 1 and 9999.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MESSAGE_INVALID_MONTH \u003d \"Month must be an integer between 1 and 12\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Parses {@code yearString} into an {@code int} and returns it. Leading and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws ParseException if the specified year is invalid (not a non-negative"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *                        integer)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static Index parseYear(String yearString) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String trimmedYearString \u003d yearString.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedYearString)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        int year \u003d Integer.parseInt(trimmedYearString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (year \u003e 9999) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return Index.fromOneBased(year);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Parses {@code monthString} into an {@code int} and returns it. Leading and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws ParseException if the specified month is invalid (\u003c1 or \u003e 12)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static Index parseMonth(String monthString) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String trimmedMonthString \u003d monthString.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedMonthString)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        int month \u003d Integer.parseInt(trimmedMonthString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (month \u003e 12) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return Index.fromOneBased(month);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/calendar/ShowCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.calendar.ShowCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Parses input arguments and creates a new ShowCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * ShowCommand and returns an ShowCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_MONTH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_MONTH) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE), true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Index month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Index year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return new ShowCommand(year, month);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 48,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e taskIdList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person person \u003d new Person(null, name, phone, email, address, tagList, taskIdList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 4,
      "zxjtan": 11,
      "indocomsoft": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/AssignCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Parses input arguments and creates a new AssignCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * and returns an AssignCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_ID, PREFIX_TASK_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_ID, PREFIX_TASK_ID)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE), true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index contactIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_ID).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new AssignCommand(contactIndex, taskIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "taneliang": 48,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/AssignedCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignedCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Parses input arguments and creates a new AssignedCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class AssignedCommandParser implements Parser\u003cAssignedCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignedCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * and returns an AssignedCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public AssignedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return new AssignedCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignedCommand.MESSAGE_USAGE), pe, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 8,
      "zxjtan": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final Prefix PREFIX_TASK_ID \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_ID \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 2,
      "zxjtan": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 3,
      "indocomsoft": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 11,
      "indocomsoft": 2,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 3,
      "indocomsoft": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 1,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/UnassignCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.contacts.UnassignCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Parses input arguments and creates a new UnassignCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class UnassignCommandParser implements Parser\u003cUnassignCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnassignCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * and returns an UnassignCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public UnassignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_ID, PREFIX_TASK_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_ID, PREFIX_TASK_ID)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnassignCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index contactIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_ID).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new UnassignCommand(contactIndex, taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "taneliang": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private boolean isFormatString \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public ParseException(String message, boolean isFormatString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        this.isFormatString \u003d isFormatString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public ParseException(String message, Throwable cause, boolean isFormatString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        this.isFormatString \u003d isFormatString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return getMessage(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public String getMessage(String moduleName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String res \u003d super.getMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return isFormatString ? String.format(res, moduleName) : res;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 21,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.tasks.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        PREFIX_START_TIME, PREFIX_END_DATE, PREFIX_END_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_END_DATE, PREFIX_END_TIME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String nowDateString \u003d DateTime.INPUT_DATE_FORMAT.format(currentDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String nowTimeString \u003d DateTime.INPUT_TIME_FORMAT.format(currentDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        DateTime startDateTime \u003d ParserUtil.parseDateTime("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                argMultimap.getValue(PREFIX_START_DATE).orElse(nowDateString),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                argMultimap.getValue(PREFIX_START_TIME).orElse(nowTimeString));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE).get(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e personIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task task \u003d new Task(null, name, startDateTime, endDateTime, tagList, personIds);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 4,
      "zxjtan": 69,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/AssignCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.tasks.AssignCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Parses input arguments and creates a new AssignCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * and returns an AssignCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_ID, PREFIX_TASK_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_ID, PREFIX_TASK_ID)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE), true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index contactIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_ID).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new AssignCommand(contactIndex, taskIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 47,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/AssignedCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.AssignedCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.contacts.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Parses input arguments and creates a new AssignedCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class AssignedCommandParser implements Parser\u003cAssignedCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignedCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * and returns an AssignedCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public AssignedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return new AssignedCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignedCommand.MESSAGE_USAGE), pe, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 10,
      "zxjtan": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (args.trim().equals(\"all\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return new DeleteCommand(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            List\u003cIndex\u003e index \u003d ParserUtil.parseIndices(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE, PREFIX_START_TIME, PREFIX_END_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        PREFIX_END_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseName(argMultiMap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_START_DATE).isPresent()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                ^ argMultiMap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_DATETIME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_END_DATE).isPresent()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                ^ argMultiMap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_DATETIME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_START_DATE).isPresent()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \u0026\u0026 argMultiMap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            DateTime startDateTime \u003d ParserUtil.parseDateTime(argMultiMap.getValue(PREFIX_START_DATE).get(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    argMultiMap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            editTaskDescriptor.setStartDateTime(startDateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_END_DATE).isPresent()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \u0026\u0026 argMultiMap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultiMap.getValue(PREFIX_END_DATE).get(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    argMultiMap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            editTaskDescriptor.setEndDateTime(endDateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        parseTagsForEdit(argMultiMap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand.TaskPredicateAssembler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.HasTagsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesEndDatePredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesStartDatePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler combinedPredicate \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!argMultiMap.getAllValues(PREFIX_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            List\u003cString\u003e keywords \u003d argMultiMap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (isAnyKeywordInvalid(keywords)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        MESSAGE_INVALID_KEYWORD, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            combinedPredicate.setNamePredicate(new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    argMultiMap.getAllValues(PREFIX_NAME))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            DateTime startDate \u003d ParserUtil.parseDateToDateTime(argMultiMap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            combinedPredicate.setStartDatePredicate(new MatchesStartDatePredicate(startDate));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            DateTime endDate \u003d ParserUtil.parseDateToDateTime(argMultiMap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            combinedPredicate.setEndDatePredicate(new MatchesEndDatePredicate(endDate));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!argMultiMap.getAllValues(PREFIX_TAG).isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            List\u003cString\u003e tagNames \u003d argMultiMap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (isAnyTagNameInvalid(tagNames)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        MESSAGE_INVALID_TAG, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            parseTagsForMatching(argMultiMap.getAllValues(PREFIX_TAG)).ifPresent((tags) -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    combinedPredicate.setHasTagsPredicate(new HasTagsPredicate(new ArrayList\u003c\u003e(tags)))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!combinedPredicate.isAnyPredicateProvided()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return new FindCommand(combinedPredicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Checks if any keyword is an empty string or contains more than 1 word."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private boolean isAnyKeywordInvalid(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assert keywords !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .anyMatch(keyword -\u003e keyword.trim().equals(\"\") || keyword.trim().split(\"\\\\s+\").length \u003e 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Checks if any tag name is an empty string contains more than 1 word."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private boolean isAnyTagNameInvalid(List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assert tagNames !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return tagNames.stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .anyMatch(tagName -\u003e tagName.trim().equals(\"\") || tagName.trim().split(\"\\\\s+\").length \u003e 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForMatching(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 118,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Parses {@code oneBasedIndices} into a {@code List\u003cIndex\u003e} and returns it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @throws ParseException if any of the indices is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static List\u003cIndex\u003e parseIndices(String oneBasedIndices) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String[] trimmedIndices \u003d oneBasedIndices.trim().split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cIndex\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (String trimmedIndex : trimmedIndices) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            result.add(parseIndex(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Parses a {@code String date} and {@code String time} into a {@code DateTime}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @throws ParseException if the given {@code date} or {@code time} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static DateTime parseDateTime(String date, String time) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireAllNonNull(date, time);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (!DateTime.isValidDateTimeFormat(trimmedDate, trimmedTime)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_DATETIME_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (!DateTime.isValidDateTimeValues(trimmedDate, trimmedTime)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return new DateTime(date, time);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses a {@code String date} into a {@code DateTime} with a dummy time."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static DateTime parseDateToDateTime(String date) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        requireAllNonNull(date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!DateTime.isValidDateFormat(trimmedDate)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!DateTime.isValidDateValue(trimmedDate)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_DATE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return new DateTime(trimmedDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 19,
      "zxjtan": 16,
      "indocomsoft": 18,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * and returns a {@code SelectCommand} object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tasks/UnassignCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_CONTACT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TASK_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.tasks.UnassignCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Parses input arguments and creates a new UnassignCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class UnassignCommandParser implements Parser\u003cUnassignCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnassignCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * and returns an UnassignCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public UnassignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_ID, PREFIX_TASK_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_ID, PREFIX_TASK_ID)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnassignCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index contactIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_ID).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new UnassignCommand(contactIndex, taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "taneliang": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson and .isSameTask comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code taskss} must not contain duplicate tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void deleteTask(Task key) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 37,
      "indocomsoft": 19,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code target} must exist in the address book. The person identity of"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Adds the given task. {@code task} must not already exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * {@code target} must exist in the address book. The task identity of"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * {@code editedTask} must not be the same as another existing task in the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    void updateTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Deletes the given task. The task must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Updates the Calendar\u0027s active month for drawing of grid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws NullPointerException if {@code calendar} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    void setCalendarMonth(Calendar calendar);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Gets Calendar\u0027s active month."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public ObservableValue\u003cCalendar\u003e getCalendarMonth();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 30,
      "zxjtan": 19,
      "indocomsoft": 12,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final ReadOnlyObjectWrapper\u003cCalendar\u003e calendar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedAddressBook.getTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendar \u003d new ReadOnlyObjectWrapper\u003c\u003e(Calendar.getInstance());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return versionedAddressBook.hasTask(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        versionedAddressBook.addTask(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        versionedAddressBook.updateTask(target, editedTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        versionedAddressBook.deleteTask(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * internal list of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * internal list of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTasks);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * internal list of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void setCalendarMonth(Calendar calendar) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        requireNonNull(calendar);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        this.calendar.set(calendar);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public ObservableValue\u003cCalendar\u003e getCalendarMonth() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return this.calendar;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook) \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 34,
      "zxjtan": 29,
      "indocomsoft": 14,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"cow.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        setGuiSettings(1650, 950, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 2,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsAssignedToPersonPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Tests that a {@code Task} is assigned to the desired person (i.e. task contains id of {@code Person})"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class IsAssignedToPersonPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public IsAssignedToPersonPredicate(Person person) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return task.getPersonIds().stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .anyMatch(personId -\u003e person.getId().equals(personId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof IsAssignedToPersonPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 person.equals(((IsAssignedToPersonPredicate) other).person)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final PersonId id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Set\u003cTaskId\u003e taskIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public Person(PersonId id, Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                  Set\u003cTag\u003e tags, Set\u003cTaskId\u003e taskIds) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, taskIds);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (id !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            this.id \u003d new PersonId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.taskIds.addAll(taskIds);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public PersonId getId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Returns an immutable task ID set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public Set\u003cTaskId\u003e getTaskIds() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Collections.unmodifiableSet(taskIds);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Returns true if both persons have the same ID."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 otherPerson.getId().equals(getId());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Objects.hash(id, name, phone, email, address, tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        builder.append(\" # of tasks assigned: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .append(taskIds.size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 24,
      "indocomsoft": 2,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Represents a Person\u0027s ID in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class PersonId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public final String id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs a {@code PersonId} with a random ID."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public PersonId() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.id \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs a {@code PersonId}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @param id A valid id"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public PersonId(String id) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || (other instanceof PersonId // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 id.equals(((PersonId) other).id)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DateTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.text.ParsePosition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Represents a Task\u0027s start or end datetime in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidDateTimeFormat(String, String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * and {@link #isValidDateTimeValues(String, String)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final DateFormat INPUT_DATE_FORMAT \u003d new SimpleDateFormat(\"yyyyMMdd\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final DateFormat INPUT_TIME_FORMAT \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final DateFormat INPUT_DATE_TIME_FORMAT \u003d new SimpleDateFormat(\"yyyyMMddHHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final DateFormat OUTPUT_DATE_FORMAT \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final DateFormat OUTPUT_TIME_FORMAT \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MESSAGE_DATETIME_FORMAT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            \"The date string must be 8 digits long and the time string must be 4 digits long.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MESSAGE_DATETIME_VALUE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            \"The date must be a valid calendar date and the time must be from 0000-2359 inclusive.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MESSAGE_DATE_FORMAT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \"The date string must be 8 digits long of format yyyyMMdd.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MESSAGE_DATE_VALUE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \"The date must be a valid calendar date.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Date string must be 8 digits long."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{8}\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Time string must be 4 digits long."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String DUMMY_TIME \u003d \"0000\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public final Calendar calendar;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Constructs a {@code DateTime} from input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @param date a valid date string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @param time a valid time string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public DateTime(String date, String time) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireAllNonNull(date, time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        checkArgument(isValidDateTimeFormat(date, time), MESSAGE_DATETIME_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        checkArgument(isValidDateTimeValues(date, time), MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.calendar \u003d createCalendar(date, time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Constructs a {@code DateTime} from only date input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @param date a valid date string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public DateTime(String date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        requireAllNonNull(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        checkArgument(isValidDateTimeFormat(date, DUMMY_TIME), MESSAGE_DATETIME_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        checkArgument(isValidDateTimeValues(date, DUMMY_TIME), MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.calendar \u003d createCalendar(date, DUMMY_TIME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Constructs a {@code DateTime} from storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @param dateTime a valid calendar instance."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public DateTime(Calendar dateTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        requireAllNonNull(dateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // TODO: check dateTime validity"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.calendar \u003d dateTime;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public Calendar getCalendar() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return OUTPUT_DATE_FORMAT.format(calendar.getTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return OUTPUT_TIME_FORMAT.format(calendar.getTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getInputDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return INPUT_DATE_FORMAT.format(calendar.getTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getInputTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return INPUT_TIME_FORMAT.format(calendar.getTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if the given strings are of the correct format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static boolean isValidDateTimeFormat(String date, String time) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return date.matches(DATE_VALIDATION_REGEX) \u0026\u0026 time.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns true if the given date string is of the correct format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static boolean isValidDateFormat(String date) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return date.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if the given strings are a valid date and time."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static boolean isValidDateTimeValues(String date, String time) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int[] dateArray \u003d splitDate(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int[] timeArray \u003d splitTime(time);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int year \u003d dateArray[0];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int month \u003d dateArray[1];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int day \u003d dateArray[2];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int hour \u003d timeArray[0];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int minute \u003d timeArray[1];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return isValidDate(year, month, day) \u0026\u0026 isValidTime(hour, minute);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns true if the given string is a valid date."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static boolean isValidDateValue(String date) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        int[] dateArray \u003d splitDate(date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        int year \u003d dateArray[0];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        int month \u003d dateArray[1];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        int day \u003d dateArray[2];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return isValidDate(year, month, day);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if the given year, date and month are valid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static boolean isValidDate(int year, int month, int day) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (month \u003c 1 || month \u003e 12"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                || day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int[] longMonths \u003d {1, 3, 5, 7, 8, 10, 12};"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int[] shortMonths \u003d {4, 6, 9, 11};"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int maxDay;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (IntStream.of(longMonths).anyMatch(x -\u003e x \u003d\u003d month)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            maxDay \u003d 31;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        } else if (IntStream.of(shortMonths).anyMatch(x -\u003e x \u003d\u003d month)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            maxDay \u003d 30;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        } else if (isLeapYear(year)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            maxDay \u003d 29;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            maxDay \u003d 28;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return day \u003c\u003d maxDay;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return year % 4 \u003d\u003d 0 \u0026\u0026 (year % 100 !\u003d 0 || year % 400 \u003d\u003d 0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if the given hour and minute are valid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static boolean isValidTime(int hour, int minute) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return hour \u003e\u003d 0 \u0026\u0026 hour \u003c 24 \u0026\u0026 minute \u003e\u003d 0 \u0026\u0026 minute \u003c 60;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Splits a date string into year, month and day."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @param date The date string to split."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @return an {@code int} array of year, month and day in that order."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static int[] splitDate(String date) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int year \u003d Integer.parseInt(date.substring(0, 4));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int month \u003d Integer.parseInt(date.substring(4, 6));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int day \u003d Integer.parseInt(date.substring(6));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int[] dateArray \u003d {year, month, day};"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return dateArray;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Splits a time string into hour and minutes."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @param time The time string to split."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @return an {@code int} array of hour and minutes in that order."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static int[] splitTime(String time) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int[] timeArray \u003d {hour, minute};"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return timeArray;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Creates a calendar from the given date and time strings."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @param date A valid date string."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @param time A valid time string."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @return a {@code Calendar} with the given date and time."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static Calendar createCalendar(String date, String time) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Calendar result \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        result.setTime(INPUT_DATE_TIME_FORMAT.parse(date + time, new ParsePosition(0)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Checks if given DateTime object has the same date as this object."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @param other A valid DateTime object."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @return true if other has same date as this Datetime object."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean hasSameDate(DateTime other) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || this.getDate().equals(other.getDate()); // checks date"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return getDate() + \", \" + getTime();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                \u0026\u0026 calendar.equals(((DateTime) other).calendar)); // state check"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public int compareTo(DateTime other) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return calendar.compareTo(other.calendar);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return calendar.hashCode();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 74,
      "zxjtan": 178,
      "indocomsoft": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/HasTagsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Tag}s matches any of the tags given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class HasTagsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final List\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public HasTagsPredicate(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .anyMatch(tag -\u003e task.getTags().contains(tag));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof HasTagsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 tags.equals(((HasTagsPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/IsAssignedToTaskPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Tests that a {@code Person} is assigned to the desired task (i.e. person contains id of {@code Task})"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class IsAssignedToTaskPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public IsAssignedToTaskPredicate(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return person.getTaskIds().stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .anyMatch(taskId -\u003e task.getId().equals(taskId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof IsAssignedToTaskPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 task.equals(((IsAssignedToTaskPredicate) other).task)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/MatchesEndDatePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Tests that a {@code Task}\u0027s end date matches the end date given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class MatchesEndDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final DateTime endDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public MatchesEndDatePredicate(DateTime endDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return task.getEndDateTime().hasSameDate(endDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof MatchesEndDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 endDate.equals(((MatchesEndDatePredicate) other).endDate)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/MatchesStartDatePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Tests that a {@code Task}\u0027s start date matches the start date given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class MatchesStartDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final DateTime startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public MatchesStartDatePredicate(DateTime startDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return task.getStartDateTime().hasSameDate(startDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof MatchesStartDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 startDate.equals(((MatchesStartDatePredicate) other).startDate)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Represents a Task\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @param name A valid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Represents a Task in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String MESSAGE_END_BEFORE_START \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            \"End date and time cannot be earlier than start date and time\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final TaskId id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private final Set\u003cPersonId\u003e personIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public Task(TaskId id, Name name, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                Set\u003cTag\u003e tags, Set\u003cPersonId\u003e personIds) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireAllNonNull(name, startDateTime, endDateTime, tags, personIds);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (id !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            this.id \u003d new TaskId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.personIds.addAll(personIds);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public TaskId getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Returns an immutable person ID set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public Set\u003cPersonId\u003e getPersonIds() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Collections.unmodifiableSet(personIds);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if both tasks have the same ID."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 otherTask.getId().equals(getId());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if both tasks have the same name, start datetime, end datetime and tags."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                \u0026\u0026 otherTask.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                \u0026\u0026 otherTask.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return Objects.hash(name, startDateTime, endDateTime, tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(\" Start date: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(getStartDateTime().getDate())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(\" Start time: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(getStartDateTime().getTime())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(\" End date: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(getEndDateTime().getDate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(\" End time: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(getEndDateTime().getTime())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        builder.append(\" # of persons assigned: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .append(personIds.size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public boolean isValidDateTimeRange() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return startDateTime.compareTo(endDateTime) \u003c\u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 25,
      "zxjtan": 109,
      "indocomsoft": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Represents a Task\u0027s ID in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class TaskId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public final String id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs a {@code TaskId} with a random ID."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public TaskId() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.id \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs a {@code TaskId}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @param id A valid id"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public TaskId(String id) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                || (other instanceof TaskId // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 id.equals(((TaskId) other).id)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            new Person(null, new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                getTagSet(\"friends\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            new Person(null, new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            new Person(null, new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                getTagSet(\"neighbours\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            new Person(null, new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                getTagSet(\"family\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            new Person(null, new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                getTagSet(\"classmates\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            new Person(null, new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                getTagSet(\"colleagues\"), new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            new Task(null, new seedu.address.model.task.Name(\"Make v2 release\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    new DateTime(\"20181110\", \"1000\"), new DateTime(\"20181130\", \"1000\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    getTagSet(\"CS2103\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            new Task(null, new seedu.address.model.task.Name(\"Update User Guide\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    new DateTime(\"20181101\", \"1000\"), new DateTime(\"20181109\", \"1000\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    getTagSet(\"CS2103\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            new Task(null, new seedu.address.model.task.Name(\"Update Developer Guide\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    new DateTime(\"20181101\", \"1000\"), new DateTime(\"20181109\", \"1000\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    getTagSet(\"CS2103\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            new Task(null, new seedu.address.model.task.Name(\"Milk the cows\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    new DateTime(\"20181115\", \"1500\"), new DateTime(\"20181115\", \"1800\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                    getTagSet(\"farm\"), new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task[] tasks \u003d getSampleTasks();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Person[] persons \u003d getSamplePersons();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        final int firstIndex \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        final int secondIndex \u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        final int lastTaskIndex \u003d tasks.length - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        final int lastPersonIndex \u003d persons.length - 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assign(tasks, persons, firstIndex, firstIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assign(tasks, persons, secondIndex, firstIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assign(tasks, persons, firstIndex, secondIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assign(tasks, persons, lastTaskIndex, lastPersonIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Person samplePerson : persons) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task sampleTask : tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Assigns a specific person from an array of persons and a specific task from an array of tasks"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * in two ways so as to maintain consistency"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private static void assign(Task[] tasks, Person[] persons, int taskIndex, int personIndex) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task task \u003d tasks[taskIndex];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Person person \u003d persons[personIndex];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Set\u003cTaskId\u003e taskIds \u003d new HashSet\u003c\u003e(person.getTaskIds());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Set\u003cPersonId\u003e personIds \u003d new HashSet\u003c\u003e(task.getPersonIds());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        taskIds.add(task.getId());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        personIds.add(person.getId());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        tasks[taskIndex] \u003d new Task(task.getId(), task.getName(), task.getStartDateTime(), task.getEndDateTime(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                task.getTags(), personIds);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        persons[personIndex] \u003d new Person(person.getId(), person.getName(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                person.getAddress(), person.getTags(), taskIds);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 13,
      "indocomsoft": 51,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private List\u003cXmlAdaptedTaskId\u003e tasked \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedPerson(String id, String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedTaskId\u003e tasked) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (tasked !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            this.tasked \u003d new ArrayList\u003c\u003e(tasked);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        id \u003d source.getId().id;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        tasked \u003d source.getTaskIds().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                 .map(XmlAdaptedTaskId::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                 .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final List\u003cTaskId\u003e personTaskIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        for (XmlAdaptedTaskId taskId : tasked) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            personTaskIds.add(taskId.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                    PersonId.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final PersonId modelId \u003d new PersonId(id);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final Set\u003cTaskId\u003e modelTasks \u003d new HashSet\u003c\u003e(personTaskIds);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new Person(modelId, modelName, modelPhone, modelEmail, modelAddress, modelTags, modelTasks);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Objects.equals(id, otherPerson.id)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 tasked.equals(otherPerson.tasked);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 35,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPersonId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * JAXB-friendly adapted version of the PersonId."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class XmlAdaptedPersonId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private String personIdStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs an XmlAdaptedPersonId."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedPersonId() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs a {@code XmlAdaptedPersonId} with the given {@code personIdStr}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedPersonId(String personIdStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.personIdStr \u003d personIdStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Converts a given PersonId into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedPersonId(PersonId source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        personIdStr \u003d source.id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s PersonId object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public PersonId toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new PersonId(personIdStr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!(other instanceof XmlAdaptedPersonId)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return personIdStr.equals(((XmlAdaptedPersonId) other).personIdStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class XmlAdaptedTask {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tasks\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Calendar startDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Calendar endDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private List\u003cXmlAdaptedPersonId\u003e assigned \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Constructs an XmlAdaptedTask."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public XmlAdaptedTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Constructs an {@code XmlAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedTask(String id, String name, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedPersonId\u003e assigned) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.startDateTime \u003d startDateTime.getCalendar();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.endDateTime \u003d endDateTime.getCalendar();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (assigned !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            this.assigned \u003d new ArrayList\u003c\u003e(assigned);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public XmlAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        startDateTime \u003d source.getStartDateTime().getCalendar();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        endDateTime \u003d source.getEndDateTime().getCalendar();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assigned \u003d source.getPersonIds().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                  .map(XmlAdaptedPersonId::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                  .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final List\u003cPersonId\u003e taskPersonIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        for (XmlAdaptedPersonId personId : assigned) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            taskPersonIds.add(personId.toModelType());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskId.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final TaskId modelId \u003d new TaskId(id);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (startDateTime \u003d\u003d null || endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        final DateTime modelStartDateTime \u003d new DateTime(startDateTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        final DateTime modelEndDateTime \u003d new DateTime(endDateTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final Set\u003cPersonId\u003e modelPersonIds \u003d new HashSet\u003c\u003e(taskPersonIds);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new Task(modelId, modelName, modelStartDateTime, modelEndDateTime, modelTags, modelPersonIds);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!(other instanceof XmlAdaptedTask)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        XmlAdaptedTask otherPerson \u003d (XmlAdaptedTask) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return Objects.equals(id, otherPerson.id)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 Objects.equals(startDateTime, otherPerson.startDateTime)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 Objects.equals(endDateTime, otherPerson.endDateTime)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                \u0026\u0026 assigned.equals(otherPerson.assigned);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 113,
      "taneliang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTaskId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": " * JAXB-friendly adapted version of the TaskId."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class XmlAdaptedTaskId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private String taskIdStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs an XmlAdaptedTaskId."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedTaskId() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Constructs a {@code XmlAdaptedTaskId} with the given {@code taskIdStr}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedTaskId(String taskIdStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        this.taskIdStr \u003d taskIdStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Converts a given TaskId into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public XmlAdaptedTaskId(TaskId source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        taskIdStr \u003d source.id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s TaskId object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public TaskId toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new TaskId(taskIdStr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        if (!(other instanceof XmlAdaptedTaskId)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return taskIdStr.equals(((XmlAdaptedTaskId) other).taskIdStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            logger.info(\"Cow file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Saves the given cow data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Returns cow data in the file or an empty cow data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private List\u003cXmlAdaptedTask\u003e tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        for (XmlAdaptedTask t : tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            Task task \u003d t.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (addressBook.hasTask(task)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            addressBook.addTask(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 13,
      "indocomsoft": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarContentCell.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.ui.CalendarPanel.COLS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.events.ui.CalendarPanelClickEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Calendar cell that displays the tasks falling on said day."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarContentCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String FXML \u003d \"CalendarContentCell.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarContentCell.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final int row;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final int col;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTaskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Text calendarContentCellHeader;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private ListView\u003cTask\u003e calendarContentCellListView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarContentCell(int row, int col, ObservableList\u003cTask\u003e taskList, ObservableValue\u003cCalendar\u003e calendar) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        this.row \u003d row;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        this.col \u003d col;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        this.filteredTaskList \u003d new FilteredList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        setConnections(calendar);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // Call {@code handleUpdateCalendar} once initially"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        handleUpdateMonth(calendar.getValue());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Initialises {@code ListView} for tasks and subscribe to calendar updates."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private void setConnections(ObservableValue\u003cCalendar\u003e calendar) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarContentCellListView.setItems(filteredTaskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarContentCellListView.setCellFactory(listView -\u003e new CalendarTaskListCell());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendar.addListener((cal, oldCal, newCal) -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            this.handleUpdateMonth(newCal);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Finds the correct month and day that a calendar cell should represent based"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * on its position in the grid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Pair\u003cCalendar, Integer\u003e getCellCalendarAndDate(Calendar curMonth) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Calendar filterCalendar;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        int displayDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // Set to first day of month so that we can find out the weekday it falls on"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        curMonth.set(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        int firstDayOfMonth \u003d curMonth.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // col is 0-indexed but DAY_OF_WEEK is 1-indexed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        int dateInCurMonth \u003d (row) * COLS + col - firstDayOfMonth + 2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (dateInCurMonth \u003c 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            // This grid belongs to previous month"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            Calendar prevMonth \u003d (Calendar) curMonth.clone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            prevMonth.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            filterCalendar \u003d prevMonth;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            displayDate \u003d dateInCurMonth + prevMonth.getActualMaximum(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        } else if (dateInCurMonth \u003e curMonth.getActualMaximum(Calendar.DAY_OF_MONTH)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            // This grid belongs to the next month"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            Calendar nextMonth \u003d (Calendar) curMonth.clone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            nextMonth.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            filterCalendar \u003d nextMonth;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            displayDate \u003d dateInCurMonth - curMonth.getActualMaximum(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            filterCalendar \u003d curMonth;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            displayDate \u003d dateInCurMonth;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return new Pair\u003c\u003e(filterCalendar, displayDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Sets the cell content based on the current month."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private void handleUpdateMonth(Calendar curMonth) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cCalendar, Integer\u003e cellCalendarAndDate \u003d getCellCalendarAndDate(curMonth);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Calendar filterCalendar \u003d cellCalendarAndDate.getKey();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        int displayDate \u003d cellCalendarAndDate.getValue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarContentCellHeader.setText(Integer.toString(displayDate));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (curMonth.equals(filterCalendar)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            calendarContentCellHeader.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            calendarContentCellHeader.setFill(Color.LIGHTGRAY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        filteredTaskList.setPredicate((Task t) -\u003e isTaskBelongToDate(t, filterCalendar, displayDate));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns a boolean representing whether the task falls on the date specified."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private boolean isTaskBelongToDate(Task task, Calendar filterCalendar, int date) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Calendar taskCalendar \u003d task.getEndDateTime().getCalendar();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return taskCalendar.get(Calendar.YEAR) \u003d\u003d filterCalendar.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                \u0026\u0026 taskCalendar.get(Calendar.MONTH) \u003d\u003d filterCalendar.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                \u0026\u0026 taskCalendar.get(Calendar.DAY_OF_MONTH) \u003d\u003d date;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code CalendarTaskCard}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    class CalendarTaskListCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            // Fire event to update task detatil panel"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                if (task !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    logger.fine(\"Clicked on task in calendar panel : \u0027\" + task + \"\u0027\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    raise(new CalendarPanelClickEvent(task));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                setGraphic(new CalendarTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarHeaderCell.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * A UI component for displaying the day of the week in the calendar\u0027s header."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarHeaderCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String FXML \u003d \"CalendarHeaderCell.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String[] HEADERS \u003d new String[] { \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \"Friday\", \"Saturday\" };"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Text calendarHeaderCellText;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarHeaderCell(int col) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarHeaderCellText.setText(HEADERS[col]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.RowConstraints;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Panel for displaying the calendar."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final int COLS \u003d 7; // 7 Days in a week"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final int ROWS \u003d 7; // 6 Rows + header"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final int HEADER_ROW \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final int ROW_HEIGHT \u003d 100;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final int COL_WIDTH \u003d 130;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Text calendarHeader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private GridPane calendarGridPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarPanel(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cCalendar\u003e calendar) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        buildEmptyGrid();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        setGridContent(taskList, calendar);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // Write it once initially. Subsequent updates will be handled by callback."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        handleUpdateCalendar(calendar.getValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        setConnections(calendar);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Subscribe to calendar updates."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private void setConnections(ObservableValue\u003cCalendar\u003e calendar) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendar.addListener((cal, oldCal, newCal) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            handleUpdateCalendar(newCal);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Updates the calendar header to the month represented by the {@code Calendar}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private void handleUpdateCalendar(Calendar calendar) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarHeader.setText(new DateFormatSymbols().getMonths()[calendar.get(Calendar.MONTH)] + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                + Integer.toString(calendar.get(Calendar.YEAR)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Write contents of calendar grid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private void setGridContent(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cCalendar\u003e calendar) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        for (int row \u003d 0; row \u003c ROWS; row++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            for (int col \u003d 0; col \u003c COLS; col++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                if (row \u003d\u003d HEADER_ROW) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    calendarGridPane.add(new CalendarHeaderCell(col).getRoot(), col, row);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    // Subtract 1 from row so that CalendarContentCell row is based on content area"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    // of calendar."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    calendarGridPane.add(new CalendarContentCell(row - 1, col, taskList, calendar).getRoot(), col, row);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Writes empty grid with row/col dimension constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private void buildEmptyGrid() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        for (int col \u003d 0; col \u003c COLS; col++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            ColumnConstraints column \u003d new ColumnConstraints(COL_WIDTH);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            column.setHgrow(Priority.ALWAYS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            calendarGridPane.getColumnConstraints().add(column);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        for (int row \u003d 0; row \u003c ROWS; row++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            RowConstraints rowConstraint;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            if (row \u003d\u003d HEADER_ROW) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                rowConstraint \u003d new RowConstraints();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                rowConstraint \u003d new RowConstraints(ROW_HEIGHT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            calendarGridPane.getRowConstraints().add(rowConstraint);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarTaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * A UI component for displaying a {@code Task} in a calendar cell."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String FXML \u003d \"CalendarTaskCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarTaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        name.setText(task.getName().toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (!(other instanceof CalendarTaskCard)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        CalendarTaskCard card \u003d (CalendarTaskCard) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private TaskDetailsPane taskDetailsPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private GridPane calendarPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private StackPane taskDetailPanePlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getFilteredTaskList(), logic.getCalendarMonth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        taskDetailsPane \u003d new TaskDetailsPane();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        taskDetailPanePlaceholder.getChildren().add(taskDetailsPane.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(), (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                (int) primaryStage.getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 14,
      "tuesmiddt": 17,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelDeselectionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        logger.fine(\"Person list panel is deselected\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        raise(new PersonPanelDeselectionEvent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToPersonListRequestEvent event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 7,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        name.setText(task.getName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        endDateTime.setText(\"Due by: \" + task.getEndDateTime().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 64,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskDetailsPane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelDeselectionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * The Task Detail Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskDetailsPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String FXML \u003d \"TaskDetailsPane.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskDetailsPane() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // To prevent triggering events for typing inside the loaded detail screen."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private void handleTaskPanelSelectionChangedEvent(TaskPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Task task \u003d event.getNewSelection();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        name.setText(task.getName().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        startDateTime.setText(\"Starting from: \" + task.getStartDateTime().getDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        endDateTime.setText(\"Due by: \" + task.getEndDateTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Clear existing list of tags before populating with new tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private void handleTaskPanelDeselectionEvent(TaskPanelDeselectionEvent event) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Clear details pane"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        name.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        startDateTime.setText(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        endDateTime.setText(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 65,
      "indocomsoft": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.JumpToTaskListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelDeselectionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        setConnections(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private void setConnections(ObservableList\u003cTask\u003e personList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        taskListView.setItems(personList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        raise(new TaskPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        logger.fine(\"Task list panel is deselected\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        raise(new TaskPanelDeselectionEvent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToTaskListRequestEvent event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 87
    }
  },
  {
    "path": "src/main/resources/view/CalendarContentCell.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003cVBox id\u003d\"calendarContentCell\" fx:id\u003d\"calendarContentCell\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"calendar-content-cell, calendar-cell\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    \u003cText fx:id\u003d\"calendarContentCellHeader\" styleClass\u003d\"calendar-content-cell-header\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    \u003cListView fx:id\u003d\"calendarContentCellListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"calendar-content-cell-list-view\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 10
    }
  },
  {
    "path": "src/main/resources/view/CalendarHeaderCell.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003cVBox fx:id\u003d\"calendarHeaderCell\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"calendar-header-cell, calendar-cell\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    \u003cText fx:id\u003d\"calendarHeaderCellText\" styleClass\u003d\"calendar-header-cell-text\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 8
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003cPane id\u003d\"calendarPanel\" prefHeight\u003d\"400.0\" prefWidth\u003d\"910.0\" minWidth\u003d\"910.0\" maxWidth\u003d\"910.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u003cText id\u003d\"calendarHeader\" fx:id\u003d\"calendarHeader\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" layoutY\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u003cGridPane fx:id\u003d\"calendarGridPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" layoutY\u003d\"60.0\" styleClass\u003d\"calendar-grid-pane\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 13
    }
  },
  {
    "path": "src/main/resources/view/CalendarTaskCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003cHBox id\u003d\"calendarTaskCard\" fx:id\u003d\"calendarTaskCard\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u003cInsets top\u003d\"2\" right\u003d\"5\" bottom\u003d\"2\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "      \u003cHBox spacing\u003d\"2\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 28
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".table-view .column-header,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-alignment: center-left;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-radius: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #515658;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 16px;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 13px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: black;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 2;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-radius: 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".button:pressed,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".button:default:hover:pressed {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: white, white;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".button:disabled,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".button:default:disabled {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 14px;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-weight: bold;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 18px;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-style: italic;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-fill: white;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 3;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar .increment-button,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar:vertical .increment-arrow,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar:horizontal .increment-arrow,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-cell {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-border-color: #4d4d4d;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-border-radius: 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-border-style: solid;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-padding: 2 2 2 2;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-background-radius: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-header-cell {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-alignment: center;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-background-color: #515658;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-header-cell-text {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-content-cell {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-alignment: top-right;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-content-cell-header {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-content-cell-list-view .scroll-bar:vertical .increment-arrow,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-content-cell-list-view .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-content-cell-list-view .scroll-bar:horizontal .increment-arrow,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-content-cell-list-view .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-grid-pane,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-grid-pane .list-view,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-grid-pane .list-cell,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-grid-pane .list-cell:filled:even,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ".calendar-grid-pane .list-cell:filled:odd {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "#calendarHeader {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-font-size: 40pt;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-fill: white;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 0;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11px;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "  -fx-text-fill: #f70d1a;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 0;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-insets: 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "#filterField,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "#personListPanel,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "#personWebpage {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-radius: 0;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-hgap: 7;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-vgap: 3;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-radius: 2;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-radius: 2;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 2,
      "tuesmiddt": 70,
      "-": 337
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.3\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" prefWidth\u003d\"340\" minWidth\u003d\"300\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "          \u003cSplitPane id\u003d\"calendarSplitPane\" fx:id\u003d\"calendarSplitPane\" orientation\u003d\"HORIZONTAL\" dividerPositions\u003d\"0.2\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \u003cSplitPane id\u003d\"taskSplitPane\" fx:id\u003d\"taskSplitPane\" orientation\u003d\"VERTICAL\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "              \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "              \u003cStackPane fx:id\u003d\"taskDetailPanePlaceholder\" VBox.vgrow\u003d\"ALWAYS\" SplitPane.resizableWithParent\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            \u003cGridPane fx:id\u003d\"calendarPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 6,
      "tuesmiddt": 9,
      "-": 65
    }
  },
  {
    "path": "src/main/resources/view/TaskDetailsPane.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003cHBox id\u003d\"taskDetailPane\" fx:id\u003d\"taskDetailPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 35
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003cHBox id\u003d\"taskCardPane\" fx:id\u003d\"taskCardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$endDateTime\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 45
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 7,
      "tuesmiddt": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e36ED93EB-FEE2-4299-8407-EB13F394CFE7\u003c/id\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e36ED93EB-FEE2-4299-8407-EB13F394CFE7\u003c/id\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "taneliang": 2,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e08CC1681-4A5B-4D1D-B4EC-8C3BF19E4E90\u003c/id\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "taneliang": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e275710EF-C550-4826-8A55-0F599FB1F707\u003c/id\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e9A70E4F8-268A-47AE-8193-4A654E97A777\u003c/id\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e68F7D6BB-ED1D-4CE1-9852-A153252DF0DB\u003c/id\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e448548BB-A97E-4922-9AAA-7C9D60A78869\u003c/id\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003eB84C3C42-D17F-4D5A-8ED1-CEA9EBC7A248\u003c/id\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e49739A8D-C9CF-4859-BA7B-785D39FFFC34\u003c/id\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e323472DB-5FD0-4C05-B346-ACD481445A46\u003c/id\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "taneliang": 7,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e7642CA06-A8D2-4B19-A816-CC918264624F\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003eAAE49A85-9F95-411F-966F-C0D4BFFF2DD6\u003c/id\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e0B196F0C-2558-412A-A244-A1FBDE5C9573\u003c/id\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e5C7B36F4-A965-4536-9E76-7C37BE2D8C07\u003c/id\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e72F13EBA-71E6-41C2-B1F1-79A5D49BFEA9\u003c/id\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e3EC6F866-5546-45ED-BD5F-D781D9564B98\u003c/id\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e58C8424F-9B2A-4E4E-8404-05DBD8C7E76D\u003c/id\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003eBDAA6651-FF1B-4D6B-BC3C-AE8B93049ACD\u003c/id\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        \u003cid\u003e9D381BB6-65E0-4C4B-B32E-DFBE530DDA50\u003c/id\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "taneliang": 9,
      "-": 57
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarContentCellHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Provides a handle for {@code CalendarContentCell} containing the list of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * {@code CalendarTaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarContentCellHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String CALENDAR_CONTENT_CELL_ID \u003d \"#calendarContentCell\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String TASK_LIST_VIEW_ID \u003d \"#calendarContentCellListView\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarContentCellHandle(Node calendarContentCellNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(calendarContentCellNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        taskListView \u003d getChildNode(TASK_LIST_VIEW_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Navigates the listview to display {@code task}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (!taskListView.getItems().contains(task)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            taskListView.scrollTo(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d taskListView.getItems().size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns the calendar task card handle of the task associated with the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code index} in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *                               scene graph."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarTaskCardHandle getCalendarTaskCardHandle(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return getChildCardNodes().stream().map(CalendarTaskCardHandle::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .filter(handle -\u003e handle.equals(getTask(index))).findFirst().orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns whether the task list for this cell contains an element that matches"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * how the {@code task} should be displayed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public boolean isContainTask(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return getChildCardNodes().stream().map(CalendarTaskCardHandle::new).anyMatch(handle -\u003e handle.equals(task));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return taskListView.getItems().get(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns all child card nodes in the scene graph. Card nodes that are visible"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * in the listview are definitely in the scene graph, while some nodes that are"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * not visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Set\u003cNode\u003e getChildCardNodes() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return guiRobot.from(taskListView).lookup(CalendarTaskCardHandle.CALENDAR_TASK_CARD_ID).queryAll();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return taskListView.getItems().size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 93
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.ui.CalendarPanel.COLS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.ui.CalendarPanel.ROWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Provides a handle for {@code CalendarPanelHandle} containing the grid of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * {@code CalendarContentCell}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String CALENDAR_PANEL_ID \u003d \"#calendarPanel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String GRID_PANE_ID \u003d \"#calendarGridPane\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final GridPane calendarGridPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarPanelHandle(Node calendarPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(calendarPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarGridPane \u003d getChildNode(GRID_PANE_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns the calendar content cell handle for the specified row and column"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * (excluding header row)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws IllegalArgumentException if the index is out of bounds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * @throws IllegalStateException    if the selected card is currently not in the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *                                  scene graph."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarContentCellHandle getCellHandle(int row, int col) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        if (col \u003c 0 || col \u003e\u003d COLS || row \u003c 0 || row \u003e\u003d ROWS) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return getAllContentCells().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .filter(cell -\u003e GridPane.getRowIndex(cell) \u003d\u003d row \u0026\u0026 GridPane.getColumnIndex(cell) \u003d\u003d col)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .map(CalendarContentCellHandle::new).findFirst().orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns all calendar content cell nodes in the scene graph."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Set\u003cNode\u003e getAllContentCells() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return guiRobot.from(calendarGridPane).lookup(CalendarContentCellHandle.CALENDAR_CONTENT_CELL_ID).queryAll();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 53
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarTaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Provides a handle to a task card in a calendar content cell."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarTaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String CALENDAR_TASK_CARD_ID \u003d \"#calendarTaskCard\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public CalendarTaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return getName().equals(task.getName().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private final TaskListPanelHandle taskListPanel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final CalendarPanelHandle calendarPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        taskListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_PANEL_ID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 2,
      "indocomsoft": 7,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Provides a handle to a task card in the task list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String END_DATE_TIME_FIELD_ID \u003d \"#endDateTime\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Label endDateTimeLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        endDateTimeLabel \u003d getChildNode(END_DATE_TIME_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return endDateTimeLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getName().equals(task.getName().toString())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \u0026\u0026 getEndDateTime().equals(\"Due by: \" + task.getEndDateTime().toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 69,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskDetailsPaneHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Provides a handle to a task details pane."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskDetailsPaneHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String START_DATE_TIME_FIELD_ID \u003d \"#startDateTime\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String END_DATE_TIME_FIELD_ID \u003d \"#endDateTime\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Label startDateTimeLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final Label endDateTimeLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskDetailsPaneHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        startDateTimeLabel \u003d getChildNode(START_DATE_TIME_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        endDateTimeLabel \u003d getChildNode(END_DATE_TIME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getStartDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return startDateTimeLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return endDateTimeLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getName().equals(task.getName().toString())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 getStartDateTime().equals("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        task.getStartDateTime().getDate())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \u0026\u0026 getEndDateTime().equals(task.getEndDateTime().getDate())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 77,
      "indocomsoft": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#taskCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Optional\u003cTask\u003e lastRememberedSelectedTaskCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cTask\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns a handle to the selected {@code TaskCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        List\u003cTask\u003e selectedTaskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (selectedTaskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new AssertionError(\"Task list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedTaskList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        List\u003cTask\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Navigates the listview to display {@code task}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (!getRootNode().getItems().contains(task)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            getRootNode().scrollTo(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Selects the {@code TaskCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns the task card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskCardHandle getTaskCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .filter(handle -\u003e handle.equals(getTask(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Remembers the selected {@code TaskCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void rememberSelectedTaskCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * {@code rememberSelectedTaskCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public boolean isSelectedTaskCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return lastRememberedSelectedTaskCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            return !lastRememberedSelectedTaskCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * suited for testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d TestUtil"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            .getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(1280.0, 800.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 7,
      "zxjtan": 1,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Cow\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.storage.XmlAdaptedTaskId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private static final List\u003cXmlAdaptedTaskId\u003e VALID_TASK_IDS \u003d new ArrayList\u003c\u003e(); // TODO: Fill this with a task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                actualPerson.getId(), null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                actualPerson.getId(), VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                actualPerson.getId(), VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 7,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String deleteCommand \u003d \"contacts delete 9\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String listCommand \u003d MODULE_WORD + \" \" + ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 4,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.HasTagsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesEndDatePredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesStartDatePredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.testutil.FindTaskPredicateAssemblerBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_TAG_FARM \u003d \"farm\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String VALID_TAG_URGENT \u003d \"urgent\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String VALID_MONTH \u003d \" \" + PREFIX_MONTH + \"1\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String VALID_YEAR \u003d \" \" + PREFIX_YEAR + \"2000\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String TAG_DESC_FARM \u003d \" \" + PREFIX_TAG + VALID_TAG_FARM;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String TAG_DESC_URGENT \u003d \" \" + PREFIX_TAG + VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_DATE \u003d \"20180229\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_TIME \u003d \"2567\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_DATE \u003d \"2018-01-02\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_TIME \u003d \"21:11\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_DATE \u003d \"20180101\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_TIME \u003d \"0100\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_START_DATETIME_DESC \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            \" \" + VALID_START_DATE_DESC + \" \" + VALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_END_DATE_DESC \u003d \" \" + PREFIX_END_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_END_DATETIME_DESC \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            \" \" + VALID_END_DATE_DESC + \" \" + VALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + INVALID_VALUE_DATE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + INVALID_VALUE_TIME;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_START_DATETIME_DESC \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            \" \" + INVALID_VALUE_START_DATE_DESC + \" \" + INVALID_VALUE_START_TIME_DESC;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_END_DATE_DESC \u003d \" \" + PREFIX_END_DATE + INVALID_VALUE_DATE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + INVALID_VALUE_TIME;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_VALUE_END_DATETIME_DESC \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            \" \" + INVALID_VALUE_END_DATE_DESC + \" \" + INVALID_VALUE_END_TIME_DESC;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + INVALID_FORMAT_DATE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + INVALID_FORMAT_TIME;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_START_DATETIME_DESC \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            \" \" + INVALID_FORMAT_START_DATE_DESC + \" \" + INVALID_FORMAT_START_TIME_DESC;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_END_DATE_DESC \u003d \" \" + PREFIX_END_DATE + INVALID_FORMAT_DATE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + INVALID_FORMAT_TIME;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String INVALID_FORMAT_END_DATETIME_DESC \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            \" \" + INVALID_FORMAT_END_DATE_DESC + \" \" + INVALID_FORMAT_END_TIME_DESC;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String YEAR_2000 \u003d VALID_YEAR;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String YEAR_2001 \u003d \" \" + PREFIX_YEAR + \"2001\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MONTH_JAN \u003d VALID_MONTH;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String MONTH_FEB \u003d \" \" + PREFIX_MONTH + \"2\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String INVALID_MONTH_SMALL \u003d \" \" + PREFIX_MONTH + \"-1\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String INVALID_MONTH_BIG \u003d \" \" + PREFIX_MONTH + \"13\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String INVALID_YEAR_SMALL \u003d \" \" + PREFIX_YEAR + \"-1\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static final String INVALID_YEAR_BIG \u003d \" \" + PREFIX_YEAR + \"10000\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_NAME_BRUSH \u003d \"Brush the cows\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String VALID_NAME_FEED \u003d \"Feed the cows\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_NAME_SLAUGHTER \u003d \"Slaughter the cows\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_START_DATE_BRUSH \u003d \"20180101\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String VALID_START_DATE_FEED \u003d \"20190101\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_START_DATE_SLAUGHTER \u003d \"20180228\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_START_TIME_BRUSH \u003d \"0000\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String VALID_START_TIME_FEED \u003d \"1200\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_START_TIME_SLAUGHTER \u003d \"0700\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_END_DATE_BRUSH \u003d \"20181231\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String VALID_END_DATE_FEED \u003d \"20191231\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_END_DATE_SLAUGHTER \u003d \"20180228\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_END_TIME_BRUSH \u003d \"2359\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String VALID_END_TIME_FEED \u003d \"2200\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final String VALID_END_TIME_SLAUGHTER \u003d \"1830\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String VALID_TAG_SLAUGHTER \u003d \"messy\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final FindCommand.TaskPredicateAssembler FIND_BRUSH_BY_NAME;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final FindCommand.TaskPredicateAssembler FIND_SLAUGHTER_AND_BRUSH_BY_NAME;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final FindCommand.TaskPredicateAssembler FIND_BRUSH_BY_END_DATE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final FindCommand.TaskPredicateAssembler FIND_SLAUGHTER_BY_START_DATE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final FindCommand.TaskPredicateAssembler FIND_SLAUGHTER_BY_NAME_AND_START_DATE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final FindCommand.TaskPredicateAssembler FIND_SLAUGHTER_BY_TAG;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String BRUSH_NAME_SEARCH \u003d \" \" + PREFIX_NAME + \"Brush\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String SLAUGHTER_NAME_SEARCH \u003d \" \" + PREFIX_NAME + \"Slaughter\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String SLAUGHTER_BRUSH_NAME_SEARCH \u003d \" \" + PREFIX_NAME + \"cows\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String SLAUGHTER_START_DATE_SEARCH \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String BRUSH_END_DATE_SEARCH \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_BRUSH;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String SLAUGHTER_TAG_SEARCH \u003d \" \" + PREFIX_TAG + VALID_TAG_SLAUGHTER;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final seedu.address.model.task.NameContainsKeywordsPredicate BRUSH_NAME_PREDICATE \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new seedu.address.model.task.NameContainsKeywordsPredicate(Arrays.asList(\"Brush\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final seedu.address.model.task.NameContainsKeywordsPredicate SLAUGHTER_NAME_PREDICATE \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new seedu.address.model.task.NameContainsKeywordsPredicate(Arrays.asList(\"Slaughter\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final seedu.address.model.task.NameContainsKeywordsPredicate SLAUGHTER_BRUSH_NAME_PREDICATE \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new seedu.address.model.task.NameContainsKeywordsPredicate(Arrays.asList(\"cows\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final MatchesStartDatePredicate BRUSH_START_DATE_PREDICATE \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new MatchesStartDatePredicate(new DateTime(VALID_START_DATE_BRUSH));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final MatchesEndDatePredicate BRUSH_END_DATE_PREDICATE \u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new MatchesEndDatePredicate(new DateTime(VALID_END_DATE_BRUSH));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final MatchesStartDatePredicate SLAUGHTER_START_DATE_PREDICATE \u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new MatchesStartDatePredicate(new DateTime(VALID_START_DATE_SLAUGHTER));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final MatchesEndDatePredicate SLAUGHTER_END_DATE_PREDICATE \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new MatchesEndDatePredicate(new DateTime(VALID_END_DATE_SLAUGHTER));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final HasTagsPredicate SLAUGHTER_TAG_PREDICATE \u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new HasTagsPredicate(Collections.singletonList(new Tag(VALID_TAG_SLAUGHTER)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FIND_BRUSH_BY_NAME \u003d new FindTaskPredicateAssemblerBuilder().withNamePredicate(BRUSH_NAME_PREDICATE).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FIND_BRUSH_BY_END_DATE \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder().withEndDatePredicate(BRUSH_END_DATE_PREDICATE).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FIND_SLAUGHTER_BY_START_DATE \u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder().withStartDatePredicate(SLAUGHTER_START_DATE_PREDICATE).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FIND_SLAUGHTER_AND_BRUSH_BY_NAME \u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder().withNamePredicate(SLAUGHTER_BRUSH_NAME_PREDICATE).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FIND_SLAUGHTER_BY_NAME_AND_START_DATE \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withNamePredicate(SLAUGHTER_NAME_PREDICATE)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withStartDatePredicate(SLAUGHTER_START_DATE_PREDICATE)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FIND_SLAUGHTER_BY_TAG \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withTagsPredicate(SLAUGHTER_TAG_PREDICATE)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String NAME_DESC_BRUSH \u003d \" \" + PREFIX_NAME + VALID_NAME_BRUSH;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_DATE_DESC_BRUSH \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_BRUSH;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_TIME_DESC_BRUSH \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_BRUSH;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_DATETIME_DESC_BRUSH \u003d START_DATE_DESC_BRUSH + START_TIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_DATE_DESC_BRUSH \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_BRUSH;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_TIME_DESC_BRUSH \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_BRUSH;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_DATETIME_DESC_BRUSH \u003d END_DATE_DESC_BRUSH + END_TIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String NAME_DESC_FEED \u003d \" \" + PREFIX_NAME + VALID_NAME_FEED;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_DATE_DESC_FEED \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_FEED;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_TIME_DESC_FEED \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_FEED;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_DATE_DESC_FEED \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_FEED;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_TIME_DESC_FEED \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_FEED;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String NAME_DESC_SLAUGHTER \u003d \" \" + PREFIX_NAME + VALID_NAME_SLAUGHTER;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_DATE_DESC_SLAUGHTER \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_TIME_DESC_SLAUGHTER \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String START_DATETIME_DESC_SLAUGHTER \u003d START_DATE_DESC_SLAUGHTER + START_TIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_DATE_DESC_SLAUGHTER \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_TIME_DESC_SLAUGHTER \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String END_DATETIME_DESC_SLAUGHTER \u003d END_DATE_DESC_SLAUGHTER + END_TIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String TAG_DESC_SLAUGHTER \u003d \" \" + PREFIX_TAG + VALID_TAG_SLAUGHTER;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final EditTaskDescriptor DESC_BRUSH;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final EditTaskDescriptor DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DESC_BRUSH \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withName(VALID_NAME_BRUSH)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_BRUSH, VALID_END_TIME_BRUSH))"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_BRUSH, VALID_END_TIME_BRUSH))"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DESC_SLAUGHTER \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Updates {@code model}\u0027s filtered task list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * {@code model}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        final String[] splitName \u003d task.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.updateFilteredTaskList("
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                new seedu.address.model.task.NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 60,
      "tuesmiddt": 24,
      "zxjtan": 33,
      "indocomsoft": 81,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/calendar/ShowCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.testutil.CalendarUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * {@code FindCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e jan2000IndexPair \u003d CalendarUtil.getYearMonthIndices(2000, 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e feb2000IndexPair \u003d CalendarUtil.getYearMonthIndices(2000, 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e jan2001IndexPair \u003d CalendarUtil.getYearMonthIndices(2001, 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand showJan2000Command \u003d new ShowCommand(jan2000IndexPair.getKey(), jan2000IndexPair.getValue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand showFeb2000Command \u003d new ShowCommand(feb2000IndexPair.getKey(), feb2000IndexPair.getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand showJan2001Command \u003d new ShowCommand(jan2001IndexPair.getKey(), jan2001IndexPair.getValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertTrue(showJan2000Command.equals(showJan2000Command));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand showJan2000CommandCopy \u003d new ShowCommand(jan2000IndexPair.getKey(), jan2000IndexPair.getValue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertTrue(showJan2000Command.equals(showJan2000CommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertFalse(showJan2000Command.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertFalse(showJan2000Command.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // same year different month -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertFalse(showJan2000Command.equals(showFeb2000Command));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // different year same month -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertFalse(showJan2000Command.equals(showJan2001Command));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e dec2018IndexPair \u003d CalendarUtil.getYearMonthIndices(2018, 12);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Calendar dec2018 \u003d CalendarUtil.getCalendar(2018, 12);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand command \u003d new ShowCommand(dec2018IndexPair.getKey(), dec2018IndexPair.getValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String expectedMessage \u003d String.format(ShowCommand.MESSAGE_SUCCESS, \"December\", 2018);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        expectedModel.setCalendarMonth(dec2018);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertEquals(dec2018, model.getCalendarMonth().getValue());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 70,
      "indocomsoft": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 1,
      "indocomsoft": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        public ObservableValue\u003cCalendar\u003e getCalendarMonth() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        public void setCalendarMonth(Calendar calendar) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 13,
      "zxjtan": 23,
      "indocomsoft": 7,
      "-": 205
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/AssignCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.contacts.AssignCommand.MESSAGE_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_validIndices_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e taskIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(task.getId()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e personIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(person.getId()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(task.getId(), task.getName(), task.getStartDateTime(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                task.getEndDateTime(), task.getTags(), personIdSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(person.getId(), person.getName(), person.getPhone(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                person.getEmail(), person.getAddress(), person.getTags(), taskIdSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(personIndex, taskIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                taskIndex.getOneBased(), personIndex.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        expectedModel.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        expectedModel.updateTask(task, editedTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandSuccess(assignCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidTaskIndex_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(personIndex, outOfBoundTaskIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(assignCommand, model, commandHistory, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidPersonIndex_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(outOfBoundPersonIndex, taskIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(assignCommand, model, commandHistory, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_alreadyAssigned_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e taskIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(task.getId()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e personIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(person.getId()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(task.getId(), task.getName(), task.getStartDateTime(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                task.getEndDateTime(), task.getTags(), personIdSet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(person.getId(), person.getName(), person.getPhone(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                person.getEmail(), person.getAddress(), person.getTags(), taskIdSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updateTask(task, editedTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(personIndex, taskIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(assignCommand, model, commandHistory, MESSAGE_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final AssignCommand standardCommand \u003d new AssignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand commandWithSameValues \u003d new AssignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new AssignCommand(INDEX_FIRST_PERSON, INDEX_SECOND_TASK)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new AssignCommand(INDEX_SECOND_PERSON, INDEX_FIRST_TASK)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/AssignedCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "// import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AssignedCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class AssignedCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // TODO: Change such that expectedModel is updated with filtered tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    //     Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    //     assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    //     assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    //     assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // TODO: Change such that expectedModel is updated with filtered tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    //     showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    //     showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    //     assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        AssignedCommand selectFirstCommand \u003d new AssignedCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        AssignedCommand selectSecondCommand \u003d new AssignedCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        AssignedCommand selectFirstCommandCopy \u003d new AssignedCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Executes a {@code AssignedCommand} with the given {@code index},"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * and checks that {@code JumpToPersonListRequestEvent}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        AssignedCommand assignedCommand \u003d new AssignedCommand(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(AssignedCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(assignedCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        JumpToPersonListRequestEvent lastEvent \u003d (JumpToPersonListRequestEvent) eventsCollectorRule.eventsCollector"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .getMostRecent();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Executes a {@code AssignedCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        AssignedCommand assignedCommand \u003d new AssignedCommand(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(assignedCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 16,
      "zxjtan": 1,
      "indocomsoft": 17,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 3,
      "indocomsoft": 1,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(person).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        expectedModel.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 3,
      "zxjtan": 4,
      "indocomsoft": 2,
      "-": 222
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 1,
      "indocomsoft": 1,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 1,
      "indocomsoft": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/UnassignCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.contacts.UnassignCommand.MESSAGE_NOT_ASSIGNED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class UnassignCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidTaskIndex_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(personIndex, outOfBoundTaskIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(unassignCommand, model, commandHistory, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidPersonIndex_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(outOfBoundPersonIndex, taskIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(unassignCommand, model, commandHistory, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_notAssigned_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(unassignCommand, model, commandHistory, MESSAGE_NOT_ASSIGNED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final UnassignCommand standardCommand \u003d new UnassignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand commandWithSameValues \u003d new UnassignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new UnassignCommand(INDEX_FIRST_PERSON, INDEX_SECOND_TASK)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new UnassignCommand(INDEX_SECOND_PERSON, INDEX_FIRST_TASK)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void execute_endBeforeStart_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        DateTime startDateTime \u003d new DateTime(\"20180101\", \"0000\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        DateTime endDateTime \u003d new DateTime(\"20170101\", \"0000\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task invalidTask \u003d new TaskBuilder().withStartDateTime(startDateTime).withEndDateTime(endDateTime).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(invalidTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expectMessage(Task.MESSAGE_END_BEFORE_START);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task brush \u003d new TaskBuilder().withName(\"Brush\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task slaughter \u003d new TaskBuilder().withName(\"Slaughter\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddCommand addBrushCommand \u003d new AddCommand(brush);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddCommand addSlaughterCommand \u003d new AddCommand(slaughter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(addBrushCommand.equals(addBrushCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddCommand addBrushCommandCopy \u003d new AddCommand(brush);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(addBrushCommand.equals(addBrushCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(addBrushCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(addBrushCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(addBrushCommand.equals(addSlaughterCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * A default model stub that has all of the methods failing."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public ObservableValue\u003cCalendar\u003e getCalendarMonth() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void setCalendarMonth(Calendar calendar) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * A Model stub that always accepts the task being added."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 262
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/AssignCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.tasks.AssignCommand.MESSAGE_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_validIndices_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e taskIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(task.getId()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e personIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(person.getId()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(task.getId(), task.getName(), task.getStartDateTime(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                task.getEndDateTime(), task.getTags(), personIdSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(person.getId(), person.getName(), person.getPhone(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                person.getEmail(), person.getAddress(), person.getTags(), taskIdSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(personIndex, taskIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_TASK_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                taskIndex.getOneBased(), personIndex.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        expectedModel.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        expectedModel.updateTask(task, editedTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandSuccess(assignCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidTaskIndex_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(personIndex, outOfBoundTaskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(assignCommand, model, commandHistory, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidPersonIndex_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(outOfBoundPersonIndex, taskIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(assignCommand, model, commandHistory, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_alreadyAssigned_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cTaskId\u003e taskIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(task.getId()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Set\u003cPersonId\u003e personIdSet \u003d new HashSet\u003c\u003e(Arrays.asList(person.getId()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Task editedTask \u003d new Task(task.getId(), task.getName(), task.getStartDateTime(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                task.getEndDateTime(), task.getTags(), personIdSet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Person editedPerson \u003d new Person(person.getId(), person.getName(), person.getPhone(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                person.getEmail(), person.getAddress(), person.getTags(), taskIdSet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        model.updateTask(task, editedTask);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(personIndex, taskIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(assignCommand, model, commandHistory, MESSAGE_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final AssignCommand standardCommand \u003d new AssignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        AssignCommand commandWithSameValues \u003d new AssignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new AssignCommand(INDEX_FIRST_PERSON, INDEX_SECOND_TASK)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new AssignCommand(INDEX_SECOND_PERSON, INDEX_FIRST_TASK)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand, and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_all_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d new ArrayList\u003cTask\u003e(model.getFilteredTaskList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d generateExpectedMessage(tasksToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d Arrays.asList(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d generateExpectedMessage(tasksToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_validIndicesUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d Arrays.asList(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK, INDEX_SECOND_TASK));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d generateExpectedMessage(tasksToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(outOfBoundIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_validIndexAndinvalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // INDEX_FIRST_TASK is valid, but outOfBoundsIndex is not"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK, outOfBoundIndex));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d Arrays.asList(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d generateExpectedMessage(tasksToDelete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(outOfBoundIndex));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d Arrays.asList(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // undo -\u003e reverts cow back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void executeUndoRedo_validIndicesUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d Arrays.asList(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK, INDEX_SECOND_TASK));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // undo -\u003e reverts cow back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(outOfBoundIndex));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // execution failed -\u003e cow state not added into model"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // single cow state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 1. Deletes a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 3. The unfiltered list should be show now. Verify that the index of the previously deleted task in the"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskDeleted() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        List\u003cTask\u003e tasksToDelete \u003d Arrays.asList(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task taskToDelete : tasksToDelete) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // undo -\u003e reverts cow back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertNotEquals(tasksToDelete.get(0), model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // redo -\u003e deletes same second task in unfiltered task list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(Arrays.asList(INDEX_SECOND_TASK));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @param tasksToDelete a list of tasks to delete"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * @return expected message when successful"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private String generateExpectedMessage(List\u003cTask\u003e tasksToDelete) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String deletedTasksString \u003d tasksToDelete"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .map(taskToDelete -\u003e taskToDelete.toString())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, deletedTasksString);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 266
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BRUSH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLAUGHTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.model.task.Task.MESSAGE_END_BEFORE_START;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(task).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(index, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.updateTask(task, editedTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task editedTask \u003d taskInList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.updateTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_wrongStartEndDateTimeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_END_BEFORE_START);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showTaskAtIndex(model, index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_SLAUGHTER).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_SLAUGHTER).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(index.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_SLAUGHTER).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_SLAUGHTER).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task personToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.updateTask(personToEdit, editedTask);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // edit -\u003e first task edited"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // undo -\u003e reverts Cow back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // redo -\u003e same first task edited again"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_SLAUGHTER).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 1. Edits a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited task in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     *      * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskEdited() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task personToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.updateTask(personToEdit, editedTask);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_BRUSH);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_BRUSH);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_BRUSH)));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_SLAUGHTER)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 246
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/EditTaskDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static junit.framework.TestCase.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BRUSH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BRUSH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_BRUSH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUSH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BRUSH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_BRUSH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_SLAUGHTER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(DESC_SLAUGHTER.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTrue(DESC_SLAUGHTER.equals(DESC_SLAUGHTER));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(DESC_SLAUGHTER.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(DESC_SLAUGHTER.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(DESC_SLAUGHTER.equals(DESC_BRUSH));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor editedSlaughter \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_SLAUGHTER).withName(VALID_NAME_BRUSH).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(DESC_SLAUGHTER.equals(editedSlaughter));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different startDateTime -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        editedSlaughter \u003d new EditTaskDescriptorBuilder(DESC_SLAUGHTER)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_BRUSH, VALID_START_TIME_BRUSH))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(DESC_SLAUGHTER.equals(editedSlaughter));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different endDateTime -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        editedSlaughter \u003d new EditTaskDescriptorBuilder(DESC_SLAUGHTER)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_BRUSH, VALID_END_TIME_BRUSH))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(DESC_SLAUGHTER.equals(editedSlaughter));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        editedSlaughter \u003d new EditTaskDescriptorBuilder(DESC_SLAUGHTER).withTags(VALID_TAG_URGENT).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertFalse(DESC_SLAUGHTER.equals(editedSlaughter));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_BRUSH_BY_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_SLAUGHTER_BY_NAME_AND_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_SLAUGHTER_BY_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BRUSH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLAUGHTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand.TaskPredicateAssembler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.HasTagsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesEndDatePredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesStartDatePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand findBrushCommand \u003d new FindCommand(FIND_BRUSH_BY_END_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand findSlaughterCompoundCommand \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindCommand(FIND_SLAUGHTER_BY_START_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand findSlaughterCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindCommand(FIND_SLAUGHTER_BY_NAME_AND_START_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(findBrushCommand.equals(findBrushCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(findBrushCommand.equals(new FindCommand(FIND_BRUSH_BY_END_DATE)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(findBrushCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(findBrushCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different predicates -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(findBrushCommand.equals(findSlaughterCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different compounded predicates -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(findSlaughterCommand.equals(findSlaughterCompoundCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_zeroName_noTaskFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setNamePredicate(prepareNamePredicate(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_wrongStartDate_noTaskFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setStartDatePredicate(new MatchesStartDatePredicate(new DateTime(\"20181231\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_wrongEndDate_noTaskFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setEndDatePredicate(new MatchesEndDatePredicate(new DateTime(\"20181111\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_wrongTag_noTaskFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setHasTagsPredicate("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new HasTagsPredicate(Collections.singletonList(new Tag(\"wrongtag\")))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_correctName_taskFound() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setNamePredicate(prepareNamePredicate(\"Brush\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.singletonList(BRUSH), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_correctStartDate_taskFound() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setStartDatePredicate(new MatchesStartDatePredicate(new DateTime(\"20180228\")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.singletonList(SLAUGHTER), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_correctEndDate_taskFound() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setEndDatePredicate(new MatchesEndDatePredicate(new DateTime(\"20181231\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.singletonList(BRUSH), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_correctTag_taskFound() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setHasTagsPredicate("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new HasTagsPredicate(Collections.singletonList(new Tag(\"messy\")))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.singletonList(SLAUGHTER), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_compoundNameStartDate_taskFound() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // 1 possible outcome from name and start date"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setNamePredicate(prepareNamePredicate(\"Slaughter\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setStartDatePredicate(new MatchesStartDatePredicate(new DateTime(\"20180228\")));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.singletonList(SLAUGHTER), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // 2 possible outcomes based on name only, start date narrows to 1."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setNamePredicate(prepareNamePredicate(\"cows\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setStartDatePredicate(new MatchesStartDatePredicate(new DateTime(\"20180228\")));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.singletonList(SLAUGHTER), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_compoundTagEndDate_taskFound() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setEndDatePredicate(new MatchesEndDatePredicate(new DateTime(\"20180228\")));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setHasTagsPredicate("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new HasTagsPredicate(Collections.singletonList(new Tag(\"messy\")))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Collections.singletonList(SLAUGHTER), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void execute_multipleName_multipleTasksFound() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder.setNamePredicate(prepareNamePredicate(\"cows\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicateBuilder.getCombinedPredicate());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(Arrays.asList(BRUSH, SLAUGHTER), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 212
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/FindTaskPredicateAssemblerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BRUSH_START_DATE_PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_BRUSH_BY_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_BRUSH_BY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_SLAUGHTER_BY_NAME_AND_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_SLAUGHTER_BY_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_SLAUGHTER_BY_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_BRUSH_NAME_PREDICATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_END_DATE_PREDICATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_NAME_PREDICATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_START_DATE_PREDICATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand.TaskPredicateAssembler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.testutil.FindTaskPredicateAssemblerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class FindTaskPredicateAssemblerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler endDatePredicateAssembler \u003d new TaskPredicateAssembler(FIND_BRUSH_BY_END_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(FIND_BRUSH_BY_END_DATE.equals(endDatePredicateAssembler));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler namePredicateAssembler \u003d new TaskPredicateAssembler(FIND_BRUSH_BY_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(FIND_BRUSH_BY_NAME.equals(namePredicateAssembler));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler startDatePredicateAssembler \u003d new TaskPredicateAssembler(FIND_SLAUGHTER_BY_START_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(FIND_SLAUGHTER_BY_START_DATE.equals(startDatePredicateAssembler));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler tagPredicateAssembler \u003d new TaskPredicateAssembler(FIND_SLAUGHTER_BY_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(FIND_SLAUGHTER_BY_TAG.equals(tagPredicateAssembler));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler compoundPredicateAssembler \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new TaskPredicateAssembler(FIND_SLAUGHTER_BY_NAME_AND_START_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(FIND_SLAUGHTER_BY_NAME_AND_START_DATE.equals(compoundPredicateAssembler));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // same values after compounding -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        compoundPredicateAssembler \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withNamePredicate(SLAUGHTER_NAME_PREDICATE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withStartDatePredicate(SLAUGHTER_START_DATE_PREDICATE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(FIND_SLAUGHTER_BY_NAME_AND_START_DATE.equals(compoundPredicateAssembler));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertTrue(FIND_BRUSH_BY_END_DATE.equals(FIND_BRUSH_BY_END_DATE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(FIND_BRUSH_BY_END_DATE.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(FIND_BRUSH_BY_END_DATE.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(FIND_BRUSH_BY_END_DATE.equals(FIND_BRUSH_BY_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different name predicate -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler editedNamePredicate \u003d new FindTaskPredicateAssemblerBuilder(FIND_BRUSH_BY_NAME)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .withNamePredicate(SLAUGHTER_BRUSH_NAME_PREDICATE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(FIND_BRUSH_BY_NAME.equals(editedNamePredicate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different start date predicate -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler editedStartDatePredicate \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder(FIND_SLAUGHTER_BY_START_DATE)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withStartDatePredicate(BRUSH_START_DATE_PREDICATE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(FIND_SLAUGHTER_BY_START_DATE.equals(editedStartDatePredicate));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler editedEndDatePredicate \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder(FIND_BRUSH_BY_END_DATE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withEndDatePredicate(SLAUGHTER_END_DATE_PREDICATE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(FIND_BRUSH_BY_END_DATE.equals(editedEndDatePredicate));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // compare standard predicate to compounded predicate -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertFalse(FIND_SLAUGHTER_BY_NAME_AND_START_DATE.equals(FIND_SLAUGHTER_BY_START_DATE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tasks/UnassignCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "taneliang"
        },
        "content": "package seedu.address.logic.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.logic.commands.tasks.UnassignCommand.MESSAGE_NOT_ASSIGNED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "taneliang"
        },
        "content": "public class UnassignCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidTaskIndex_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(personIndex, outOfBoundTaskIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(unassignCommand, model, commandHistory, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_invalidPersonIndex_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index taskIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Index outOfBoundPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(outOfBoundPersonIndex, taskIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(unassignCommand, model, commandHistory, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void execute_notAssigned_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertCommandFailure(unassignCommand, model, commandHistory, MESSAGE_NOT_ASSIGNED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        final UnassignCommand standardCommand \u003d new UnassignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        UnassignCommand commandWithSameValues \u003d new UnassignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new UnassignCommand(INDEX_FIRST_PERSON, INDEX_SECOND_TASK)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertFalse(standardCommand.equals(new UnassignCommand(INDEX_SECOND_PERSON, INDEX_FIRST_TASK)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "taneliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AppParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AppParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final AppParser parser \u003d new AppParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 3,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CalendarParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.calendar.ShowCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.testutil.CalendarUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private final CalendarParser parser \u003d new CalendarParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parseCommand_show() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e dec2018IndexPair \u003d CalendarUtil.getYearMonthIndices(2018, 12);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String commandText \u003d ShowCommand.COMMAND_WORD + \" \" + CalendarUtil.getShowDetails(2018, 12);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand command \u003d (ShowCommand) parser.parseCommand(commandText);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertEquals(new ShowCommand(dec2018IndexPair.getKey(), dec2018IndexPair.getValue()), command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ContactsParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class ContactsParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private final ContactsParser parser \u003d new ContactsParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String commandText \u003d PersonUtil.getAddCommand(person).substring(ContactsParser.MODULE_WORD.length() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void parseCommand_assigned() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        AssignedCommand command \u003d (AssignedCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                AssignedCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertEquals(new AssignedCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 5,
      "zxjtan": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.parser.contacts.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 2,
      "-": 207
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/calendar/ShowCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONTH_BIG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONTH_SMALL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_BIG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_SMALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONTH_FEB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONTH_JAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_2000;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_2001;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.ParserUtil.MESSAGE_INVALID_MONTH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.ParserUtil.MESSAGE_INVALID_YEAR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.calendar.ShowCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.testutil.CalendarUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class ShowCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            .format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE), \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private ShowCommandParser parser \u003d new ShowCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // no year specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseFailure(parser, VALID_MONTH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // no month specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // no year, month specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // negative year value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseFailure(parser, VALID_MONTH + INVALID_YEAR_SMALL, MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // year \u003e 9999"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseFailure(parser, VALID_MONTH + INVALID_YEAR_BIG, MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // negative month value"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR + INVALID_MONTH_SMALL, MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // month \u003e 12"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseFailure(parser, VALID_YEAR + INVALID_MONTH_BIG, MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e dec2018IndexPair \u003d CalendarUtil.getYearMonthIndices(2018, 12);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String userInput \u003d CalendarUtil.getShowDetails(2018, 12);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand expectedCommand \u003d new ShowCommand(dec2018IndexPair.getKey(), dec2018IndexPair.getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e jan2000IndexPair \u003d CalendarUtil.getYearMonthIndices(2000, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String userInput \u003d YEAR_2001 + YEAR_2000 + MONTH_FEB + MONTH_JAN;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand expectedCommand \u003d new ShowCommand(jan2000IndexPair.getKey(), jan2000IndexPair.getValue());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        Pair\u003cIndex, Index\u003e jan2000IndexPair \u003d CalendarUtil.getYearMonthIndices(2000, 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String userInput \u003d INVALID_YEAR_SMALL + YEAR_2000 + MONTH_JAN;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ShowCommand expectedCommand \u003d new ShowCommand(jan2000IndexPair.getKey(), jan2000IndexPair.getValue());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), \"\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 2,
      "indocomsoft": 3,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/AssignedCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignedCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class AssignedCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private AssignedCommandParser parser \u003d new AssignedCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new AssignedCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignedCommand.MESSAGE_USAGE), \"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 5,
      "zxjtan": 1,
      "indocomsoft": 1,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), \"\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 2,
      "indocomsoft": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 4,
      "indocomsoft": 1,
      "-": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), \"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 2,
      "indocomsoft": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tasks/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATETIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_BRUSH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_END_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_END_TIME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_START_DATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_START_TIME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BRUSH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATETIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_BRUSH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FARM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_URGENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUSH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_DESC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FARM;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BRUSH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getBrushCurrentDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.tasks.AddCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(BRUSH).withTags(VALID_TAG_FARM).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BRUSH + START_DATETIME_DESC_BRUSH"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + END_DATETIME_DESC_BRUSH + TAG_DESC_FARM, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BRUSH + NAME_DESC_BRUSH + START_DATETIME_DESC_BRUSH"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + END_DATETIME_DESC_BRUSH + TAG_DESC_FARM, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // multiple start dates - last start date accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BRUSH + START_DATE_DESC_SLAUGHTER + START_DATE_DESC_BRUSH"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + START_TIME_DESC_BRUSH + END_DATETIME_DESC_BRUSH + TAG_DESC_FARM, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // multiple start times - last start time accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BRUSH + START_DATE_DESC_BRUSH + START_TIME_DESC_SLAUGHTER"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + START_TIME_DESC_BRUSH + END_DATETIME_DESC_BRUSH + TAG_DESC_FARM, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // multiple end dates - last end date accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BRUSH + START_DATETIME_DESC_BRUSH + END_DATE_DESC_SLAUGHTER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + END_DATE_DESC_BRUSH + END_TIME_DESC_BRUSH + TAG_DESC_FARM, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // multiple end times - last end time accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BRUSH + START_DATETIME_DESC_BRUSH + END_DATE_DESC_BRUSH"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + END_TIME_DESC_SLAUGHTER + END_TIME_DESC_BRUSH + TAG_DESC_FARM, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(BRUSH).withTags(VALID_TAG_FARM, VALID_TAG_URGENT)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BRUSH + START_DATETIME_DESC_BRUSH + END_DATETIME_DESC_BRUSH"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + TAG_DESC_FARM + TAG_DESC_URGENT, new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // no start date or time and zero tags"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(getBrushCurrentDateTime()).withTags().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BRUSH + END_DATETIME_DESC_BRUSH,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                \"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BRUSH + VALID_START_DATETIME_DESC + VALID_END_DATETIME_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // missing end date prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUSH + VALID_START_DATETIME_DESC + VALID_DATE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // missing end time prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUSH + VALID_START_DATETIME_DESC + VALID_END_DATE_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_TIME, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BRUSH + VALID_DATE + VALID_TIME + VALID_DATE + VALID_TIME,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_START_DATETIME_DESC + VALID_END_DATETIME_DESC"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + TAG_DESC_FARM, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUSH + INVALID_VALUE_START_DATE_DESC + VALID_START_TIME_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_DATETIME_DESC + TAG_DESC_FARM, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUSH + VALID_START_DATE_DESC + INVALID_VALUE_START_TIME_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_DATETIME_DESC + TAG_DESC_FARM, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUSH + VALID_START_DATETIME_DESC + INVALID_VALUE_END_DATE_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_TIME_DESC + TAG_DESC_FARM, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUSH + VALID_START_DATETIME_DESC + VALID_END_DATE_DESC"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INVALID_VALUE_END_TIME_DESC + TAG_DESC_FARM, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUSH + VALID_START_DATETIME_DESC + VALID_END_DATETIME_DESC"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INVALID_TAG_DESC + TAG_DESC_FARM, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_START_DATETIME_DESC + INVALID_VALUE_END_DATE_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_TIME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BRUSH + VALID_START_DATETIME_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        + VALID_END_DATETIME_DESC,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), \"\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tasks/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * Tests {@code DeleteCommandParser}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_validArgsAll_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \"all\", deleteCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \" all\", deleteCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \"all \", deleteCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \" all \", deleteCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_validArgsSingular_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(Arrays.asList(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \"1\", deleteCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \"1 \", deleteCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \" 1\", deleteCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \" 1 \", deleteCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_validArgsPlural_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                Arrays.asList(INDEX_FIRST_TASK, INDEX_THIRD_TASK, INDEX_SECOND_TASK));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \"1 3 2\", deleteCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \"1 3 2 \", deleteCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \" 1 3 2\", deleteCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, \" 1 3 2 \", deleteCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), \"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tasks/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATETIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATETIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FORMAT_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FORMAT_START_DATETIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_START_DATETIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BRUSH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATETIME_DESC_BRUSH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATETIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FARM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BRUSH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_BRUSH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUSH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLAUGHTER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BRUSH;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_BRUSH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FARM;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertInvalidFormatParseFailure(VALID_NAME_BRUSH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertInvalidFormatParseFailure(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertInvalidFormatParseFailure(\"-5\" + NAME_DESC_BRUSH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertInvalidFormatParseFailure(\"0\" + NAME_DESC_BRUSH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertInvalidFormatParseFailure(\"1 some random string\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertInvalidFormatParseFailure(\"1 i/ string\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Only providing either date or time"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_START_DATE_DESC, MESSAGE_MISSING_DATETIME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_START_TIME_DESC, MESSAGE_MISSING_DATETIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_END_DATE_DESC, MESSAGE_MISSING_DATETIME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_END_TIME_DESC, MESSAGE_MISSING_DATETIME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Invalid Value DateTime"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VALUE_START_DATETIME_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VALUE_END_DATETIME_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Invalid Format DateTime"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FORMAT_START_DATETIME_DESC,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                DateTime.MESSAGE_DATETIME_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FORMAT_END_DATETIME_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                DateTime.MESSAGE_DATETIME_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_BRUSH"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                + START_DATETIME_DESC_BRUSH + END_DATETIME_DESC_BRUSH + TAG_DESC_FARM + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .withName(VALID_NAME_BRUSH)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .withStartDateTime(new DateTime(VALID_START_DATE_BRUSH, VALID_START_TIME_BRUSH))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .withEndDateTime(new DateTime(VALID_END_DATE_BRUSH, VALID_END_TIME_BRUSH))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .withTags(VALID_TAG_FARM, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_SLAUGHTER + END_DATETIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand expectedCommand;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NAME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_SLAUGHTER).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Start DateTime"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_DATETIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // End DateTime"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + END_DATETIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // Tags"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FARM;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_FARM).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                + NAME_DESC_BRUSH + START_DATETIME_DESC_BRUSH + END_DATETIME_DESC_BRUSH + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                + NAME_DESC_SLAUGHTER + START_DATETIME_DESC_SLAUGHTER + END_DATETIME_DESC_SLAUGHTER + TAG_DESC_FARM;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withTags(VALID_TAG_FARM, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // No other valid values specified"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_FORMAT_END_DATETIME_DESC + END_DATETIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                + INVALID_FORMAT_END_DATETIME_DESC + END_DATETIME_DESC_SLAUGHTER"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                + NAME_DESC_SLAUGHTER + START_DATETIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private void assertInvalidFormatParseFailure(String userInput) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 235
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tasks/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.logic.parser.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BRUSH_END_DATE_PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BRUSH_END_DATE_SEARCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BRUSH_NAME_PREDICATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BRUSH_NAME_SEARCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_BRUSH_NAME_PREDICATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_BRUSH_NAME_SEARCH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_NAME_PREDICATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_NAME_SEARCH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_START_DATE_PREDICATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_START_DATE_SEARCH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_TAG_PREDICATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLAUGHTER_TAG_SEARCH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.model.task.DateTime.MESSAGE_DATE_FORMAT_CONSTRAINTS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.model.task.DateTime.MESSAGE_DATE_VALUE_CONSTRAINTS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand.TaskPredicateAssembler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.testutil.FindTaskPredicateAssemblerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void parse_emptyArgs_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \"         \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void parse_wrongDate_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" sd/invalidDate\", MESSAGE_DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" ed/\", MESSAGE_DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" ed/110011\", MESSAGE_DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" ed/10290193\", MESSAGE_DATE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void parse_invalidKeyword_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" n/Not A Keyword\", MESSAGE_INVALID_KEYWORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" n/\", MESSAGE_INVALID_KEYWORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" n/      \", MESSAGE_INVALID_KEYWORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void parse_invalidTag_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" t/Not A TAG\", MESSAGE_INVALID_TAG);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" t/\", MESSAGE_INVALID_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseFailure(parser, \" t/      \", MESSAGE_INVALID_TAG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void parse_individual_successful() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder().withNamePredicate(BRUSH_NAME_PREDICATE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand expectedCommand \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, BRUSH_NAME_SEARCH, expectedCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Start Date"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder().withStartDatePredicate(SLAUGHTER_START_DATE_PREDICATE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedCommand \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, SLAUGHTER_START_DATE_SEARCH, expectedCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // End Date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder().withEndDatePredicate(BRUSH_END_DATE_PREDICATE).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedCommand \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, BRUSH_END_DATE_SEARCH, expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        // Tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder().withTagsPredicate(SLAUGHTER_TAG_PREDICATE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedCommand \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, SLAUGHTER_TAG_SEARCH, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public void parse_compound_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String userInput \u003d SLAUGHTER_START_DATE_SEARCH + SLAUGHTER_NAME_SEARCH;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        TaskPredicateAssembler predicateBuilder \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withNamePredicate(SLAUGHTER_NAME_PREDICATE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withStartDatePredicate(SLAUGHTER_START_DATE_PREDICATE)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        FindCommand expectedCommand \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        userInput \u003d SLAUGHTER_TAG_SEARCH + BRUSH_END_DATE_SEARCH;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withEndDatePredicate(BRUSH_END_DATE_PREDICATE)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withTagsPredicate(SLAUGHTER_TAG_PREDICATE)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedCommand \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        userInput \u003d SLAUGHTER_BRUSH_NAME_SEARCH + BRUSH_END_DATE_SEARCH;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        predicateBuilder \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                new FindTaskPredicateAssemblerBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withNamePredicate(SLAUGHTER_BRUSH_NAME_PREDICATE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .withEndDatePredicate(BRUSH_END_DATE_PREDICATE)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        expectedCommand \u003d new FindCommand(predicateBuilder);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "zxjtan": 7,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same ID but different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        // same ID but different name -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 4,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLAUGHTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SLAUGHTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BRUSH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLAUGHTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        task.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        TaskId originalId \u003d new TaskId();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task brushWithId \u003d new TaskBuilder(BRUSH).withId(originalId).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(brushWithId.isSameTask(brushWithId));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(brushWithId.isSameTask(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same ID but different start datetime and end datetime -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task editedBrush \u003d new TaskBuilder(brushWithId)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(brushWithId.isSameTask(editedBrush));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same ID but different name -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        editedBrush \u003d new TaskBuilder(brushWithId).withName(VALID_NAME_SLAUGHTER).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(brushWithId.isSameTask(editedBrush));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same ID, same name, same start and end datetime, different tags -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        editedBrush \u003d new TaskBuilder(brushWithId).withTags(VALID_TAG_SLAUGHTER).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(brushWithId.isSameTask(editedBrush));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same ID, different name, different start and end datetime, different tags -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        editedBrush \u003d new TaskBuilder(SLAUGHTER).withId(originalId).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(brushWithId.isSameTask(editedBrush));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different ID -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        editedBrush \u003d new TaskBuilder(brushWithId).withId(new TaskId()).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(brushWithId.isSameTask(editedBrush));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task brushCopy \u003d new TaskBuilder(BRUSH).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(BRUSH.equals(brushCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(BRUSH.equals(BRUSH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(BRUSH.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(BRUSH.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(BRUSH.equals(SLAUGHTER));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task editedBrush \u003d new TaskBuilder(BRUSH).withName(VALID_NAME_SLAUGHTER).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(BRUSH.equals(editedBrush));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different start datetime -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        editedBrush \u003d new TaskBuilder(BRUSH)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .withStartDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(BRUSH.equals(editedBrush));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different end datetime -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        editedBrush \u003d new TaskBuilder(BRUSH)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(BRUSH.equals(editedBrush));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        editedBrush \u003d new TaskBuilder(BRUSH).withTags(VALID_TAG_SLAUGHTER).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertFalse(BRUSH.equals(editedBrush));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private static final String VALID_ID \u003d BENSON.getId().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private static final List\u003cXmlAdaptedTaskId\u003e VALID_TASK_IDS \u003d BENSON.getTaskIds().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            .map(XmlAdaptedTaskId::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PersonId.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "taneliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                VALID_TAGS, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "taneliang"
        },
        "content": "                invalidTags, VALID_TASK_IDS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 31,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 1,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalAddressBook.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Adds a new {@code Task} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public AddressBookBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        addressBook.addTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 9,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CalendarUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.CalendarParser.MODULE_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.parser.calendar.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.logic.commands.calendar.ShowCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " * A utility class for Calendar."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns a show command string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static String getShowCommand(int year, int month) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return MODULE_WORD + \" \" + ShowCommand.COMMAND_WORD + \" \" + getShowDetails(year, month);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns the part of the command string for the given one-indexed month and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * year."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static String getShowDetails(int year, int month) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // Need leading whitespace else parser will not read first token."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        sb.append(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        sb.append(PREFIX_YEAR + Integer.toString(year) + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        sb.append(PREFIX_MONTH + Integer.toString(month) + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns a {@code Pair\u003cIndex, Index\u003e} whose key is one-indexed year and value"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * is one-indexed month."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static Pair\u003cIndex, Index\u003e getYearMonthIndices(int year, int month) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return new Pair\u003c\u003e(Index.fromOneBased(year), Index.fromOneBased(month));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns a {@code Calendar} for the first day of the specified one-indexed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * month and year."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public static Calendar getCalendar(int year, int month) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return new GregorianCalendar(year, month - 1, 1, 0, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setStartDateTime(task.getStartDateTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setEndDateTime(task.getEndDateTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code StartDateTime} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptorBuilder withStartDateTime(DateTime startDateTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setStartDateTime(startDateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code EndDateTime} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptorBuilder withEndDateTime(DateTime endDateTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setEndDateTime(endDateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FindTaskPredicateAssemblerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand.TaskPredicateAssembler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.HasTagsPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesEndDatePredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.MatchesStartDatePredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * A utility class to help with building TaskPredicateAssembler objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class FindTaskPredicateAssemblerBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private TaskPredicateAssembler assembler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindTaskPredicateAssemblerBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assembler \u003d new TaskPredicateAssembler();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindTaskPredicateAssemblerBuilder(TaskPredicateAssembler assembler) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.assembler \u003d new TaskPredicateAssembler(assembler);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code HasTagPredicate} of the {@code TaskPredicateAssembler} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindTaskPredicateAssemblerBuilder withTagsPredicate(HasTagsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assembler.setHasTagsPredicate(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code NameContainsKeywordsPredicate} of the {@code TaskPredicateAssembler} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindTaskPredicateAssemblerBuilder withNamePredicate(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assembler.setNamePredicate(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code MatchesStartDatePredicate} of the {@code TaskPredicateAssembler} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindTaskPredicateAssemblerBuilder withStartDatePredicate(MatchesStartDatePredicate predicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assembler.setStartDatePredicate(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code MatchesEndDatePredicate} of the {@code TaskPredicateAssembler} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public FindTaskPredicateAssemblerBuilder withEndDatePredicate(MatchesEndDatePredicate predicate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assembler.setEndDatePredicate(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskPredicateAssembler build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return assembler;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private PersonId id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "taneliang"
        },
        "content": "    private Set\u003cTaskId\u003e taskIds;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        id \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        taskIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        id \u003d personToCopy.getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        taskIds \u003d new HashSet\u003c\u003e(personToCopy.getTaskIds());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "taneliang"
        },
        "content": "        return new Person(id, name, phone, email, address, tags, taskIds);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "taneliang": 9,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 9,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.person.PersonId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.TaskId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Math Assignment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"20180123\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"0010\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"20180321\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"2350\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private TaskId id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private DateTime startDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private DateTime endDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private Set\u003cPersonId\u003e personIds;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        id \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        startDateTime \u003d new DateTime(DEFAULT_START_DATE, DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        endDateTime \u003d new DateTime(DEFAULT_END_DATE, DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        personIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        id \u003d taskToCopy.getId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        startDateTime \u003d taskToCopy.getStartDateTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        endDateTime \u003d taskToCopy.getEndDateTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        personIds \u003d new HashSet\u003c\u003e(taskToCopy.getPersonIds());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Sets the {@code Id} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public TaskBuilder withId(TaskId id) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        this.id \u003d new TaskId(id.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code StartDateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskBuilder withStartDateTime(DateTime startDateTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Sets the {@code StartDateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public TaskBuilder withEndDateTime(DateTime endDateTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return new Task(id, name, startDateTime, endDateTime, tags, personIds);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 90,
      "zxjtan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.TasksParser.MODULE_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.tasks.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns an add command string for adding the {@code Task}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        sb.append(PREFIX_START_DATE + task.getStartDateTime().getInputDate() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        sb.append(PREFIX_START_TIME + task.getStartDateTime().getInputTime() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        sb.append(PREFIX_END_DATE + task.getEndDateTime().getInputDate() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        sb.append(PREFIX_END_TIME + task.getEndDateTime().getInputTime() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        task.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.getStartDateTime().ifPresent(startDateTime -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            sb.append(PREFIX_START_DATE).append(startDateTime.getInputDate()).append(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            sb.append(PREFIX_START_TIME).append(startDateTime.getInputTime()).append(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        descriptor.getEndDateTime().ifPresent(endDateTime -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            sb.append(PREFIX_END_DATE).append(endDateTime.getInputDate()).append(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            sb.append(PREFIX_END_TIME).append(endDateTime.getInputTime()).append(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 67,
      "zxjtan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * A utility class containing an AddressBook object to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private TypicalAddressBook() {} // prevents instantiation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @return a typical AddressBook with all the typical Persons"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static AddressBook getTypicalAddressBookPersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @return a typical AddressBook with all the typical Tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static AddressBook getTypicalAddressBookTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        for (Task task: getTypicalTasks()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @return a typical AddressBook with all the typical Persons and Tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 28,
      "zxjtan": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 4,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BRUSH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_FEED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_BRUSH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_FEED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUSH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FEED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLAUGHTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BRUSH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_FEED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_SLAUGHTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_BRUSH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FEED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SLAUGHTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SLAUGHTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final Task BRUSH \u003d new TaskBuilder().withName(VALID_NAME_BRUSH)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            .withStartDateTime(new DateTime(VALID_START_DATE_BRUSH, VALID_START_TIME_BRUSH))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            .withEndDateTime(new DateTime(VALID_END_DATE_BRUSH, VALID_END_TIME_BRUSH))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static final Task SLAUGHTER \u003d new TaskBuilder().withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            .withStartDateTime(new DateTime(VALID_START_DATE_SLAUGHTER, VALID_START_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            .withEndDateTime(new DateTime(VALID_END_DATE_SLAUGHTER, VALID_END_TIME_SLAUGHTER))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            .withTags(VALID_TAG_SLAUGHTER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final Task FEED \u003d new TaskBuilder().withName(VALID_NAME_FEED)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            .withStartDateTime(new DateTime(VALID_START_DATE_FEED, VALID_START_TIME_FEED))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            .withEndDateTime(new DateTime(VALID_END_DATE_FEED, VALID_END_TIME_FEED))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static final String KEYWORD_MATCHING_BRUSH \u003d \"Brush\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BRUSH, SLAUGHTER));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static Task getBrushCurrentDateTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String nowDateString \u003d DateTime.INPUT_DATE_FORMAT.format(currentDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String nowTimeString \u003d DateTime.INPUT_TIME_FORMAT.format(currentDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return new TaskBuilder(BRUSH)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .withStartDateTime(new DateTime(nowDateString, nowTimeString))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 2,
      "indocomsoft": 41,
      "zxjtan": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarContentCellTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUSH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLAUGHTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import guitests.guihandles.CalendarPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.testutil.CalendarUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "public class CalendarContentCellTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // All tasks here end in Jan 2017"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_CALENDAR_TASKS \u003d buildTypicalTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // Jan 2017 is chosen because the month starts on the Sunday, the first column"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    // of the Calendar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final ObservableValue\u003cCalendar\u003e TYPICAL_MONTH \u003d new ReadOnlyObjectWrapper\u003c\u003e("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "            CalendarUtil.getCalendar(2017, 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String DATE_STRING_5_JAN_2017 \u003d \"20170105\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String DATE_STRING_10_JAN_2017 \u003d \"20170110\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static final String TIME_STRING_NOON \u003d \"1200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private CalendarPanelHandle calendarPanelHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Test for when first day of month is first column of calendar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void displayAligned() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        initUi(TYPICAL_CALENDAR_TASKS, TYPICAL_MONTH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        TYPICAL_CALENDAR_TASKS.stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .filter(task -\u003e task.getEndDateTime().getCalendar().get(Calendar.DAY_OF_MONTH) \u003d\u003d 5).forEach(task -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    assertTrue(calendarPanelHandle.getCellHandle(1, 4).isContainTask(task));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        TYPICAL_CALENDAR_TASKS.stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .filter(task -\u003e task.getEndDateTime().getCalendar().get(Calendar.DAY_OF_MONTH) \u003d\u003d 10).forEach(task -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    assertTrue(calendarPanelHandle.getCellHandle(2, 2).isContainTask(task));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Test for when first day of month is not first column of calendar."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    public void displayOffset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String dateString2Feb2017 \u003d \"20170202\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        String dateString9Feb2017 \u003d \"20170209\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        tasks.add(new TaskBuilder().withName(VALID_NAME_BRUSH)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEndDateTime(new DateTime(dateString2Feb2017, TIME_STRING_NOON)).build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        tasks.add(new TaskBuilder().withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEndDateTime(new DateTime(dateString2Feb2017, TIME_STRING_NOON)).build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        tasks.add(new TaskBuilder().withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEndDateTime(new DateTime(dateString9Feb2017, TIME_STRING_NOON)).build());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ObservableList\u003cTask\u003e taskList \u003d FXCollections.observableList(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ObservableValue\u003cCalendar\u003e feb2017 \u003d new ReadOnlyObjectWrapper\u003c\u003e(CalendarUtil.getCalendar(2017, 2));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        initUi(taskList, feb2017);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        taskList.stream().filter(task -\u003e task.getEndDateTime().getCalendar().get(Calendar.DAY_OF_MONTH) \u003d\u003d 2)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .forEach(task -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    assertTrue(calendarPanelHandle.getCellHandle(1, 4).isContainTask(task));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        taskList.stream().filter(task -\u003e task.getEndDateTime().getCalendar().get(Calendar.DAY_OF_MONTH) \u003d\u003d 9)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .forEach(task -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                    assertTrue(calendarPanelHandle.getCellHandle(2, 4).isContainTask(task));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Returns a {@code ObservableList\u003cTask\u003e} containing three tasks in the typical"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * month."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Two tasks with different names fall on 5th of the typical month. One task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * falls on 10th of the typical month."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private static ObservableList\u003cTask\u003e buildTypicalTasks() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        taskList.add(new TaskBuilder().withName(VALID_NAME_BRUSH)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEndDateTime(new DateTime(DATE_STRING_5_JAN_2017, TIME_STRING_NOON)).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        taskList.add(new TaskBuilder().withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEndDateTime(new DateTime(DATE_STRING_5_JAN_2017, TIME_STRING_NOON)).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        taskList.add(new TaskBuilder().withName(VALID_NAME_SLAUGHTER)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "                .withEndDateTime(new DateTime(DATE_STRING_10_JAN_2017, TIME_STRING_NOON)).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        return FXCollections.observableList(taskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * backed by {@code backingList}. Also shows the {@code Stage} that displays"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * only {@code PersonListPanel}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    private void initUi(ObservableList\u003cTask\u003e backingList, ObservableValue\u003cCalendar\u003e backingCalendar) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        // PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        CalendarPanel calendarPanel \u003d new CalendarPanel(backingList, backingCalendar);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        uiPartRule.setUiPart(calendarPanel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "        calendarPanelHandle \u003d new CalendarPanelHandle(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d HistoryCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String thirdCommand \u003d \"contacts list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 3,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "taneliang"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "    private static final JumpToPersonListRequestEvent JUMP_TO_SECOND_EVENT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "            new JumpToPersonListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "taneliang"
        },
        "content": "            builder.append(\"\u003cid\u003e\").append(UUID.randomUUID().toString()).append(\"\u003c/id\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 3,
      "taneliang": 2,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code expectedCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code expectedPerson}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * {@code expectedTask}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertEquals(expectedTask.getName().name, actualCard.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertEquals(\"Due by: \" + expectedTask.getEndDateTime().toString(), actualCard.getEndDateTime());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertEquals(expectedTask.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * of {@code persons} correctly and in the correct order."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static void assertPersonsListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * of {@code persons} correctly and in the correct order."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static void assertPersonsListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertPersonsListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * of {@code tasks} correctly and in the correct order."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static void assertTasksListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            taskListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * of {@code tasks} correctly and in the correct order."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public static void assertTasksListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTasksListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code size}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tuesmiddt"
        },
        "content": "     * {@code expected}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuesmiddt": 13,
      "indocomsoft": 31,
      "-": 68
    }
  },
  {
    "path": "src/test/java/systemtests/AppSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertPersonsListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertTasksListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * A system test class for the app, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public abstract class AppSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return TypicalAddressBook.getTypicalAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        return mainWindowHandle.getTaskListPanel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertPersonsListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTasksListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle}, {@code TaskListPanelHandle}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * and {@code StatusBarFooterHandle} to remember their current state."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        getTaskListPanel().rememberSelectedTaskCard();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Asserts that the previously selected card is now deselected"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     * Asserts that the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertPersonsListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     * Deletes everything in the address book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    protected void clear() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getTaskList().size());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 3,
      "indocomsoft": 17,
      "zxjtan": 7,
      "-": 212
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "public class ClearCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        String command \u003d \" \" + ClearCommand.COMMAND_WORD + \" ab12   \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + \"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 8,
      "indocomsoft": 2,
      "-": 75
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class ErrorDialogGuiTest extends AppSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertPersonsListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignedCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class HelpCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertPersonsListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 2,
      "zxjtan": 4,
      "indocomsoft": 2,
      "-": 94
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Updates {@code model}\u0027s filtered person list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static void setFilteredPersonList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see ModelHelper#setFilteredPersonList(Model, List)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static void setFilteredPersonList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        setFilteredPersonList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Updates {@code model}\u0027s filtered task list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static void setFilteredTaskList(Model model, List\u003cTask\u003e toDisplay) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_TASKS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see ModelHelper#setFilteredTaskList(Model, List)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public static void setFilteredTaskList(Model model, Task... toDisplay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        setFilteredTaskList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 30,
      "-": 34
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertPersonsListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertTasksListMatching;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class SampleDataTest extends AppSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Person[] expectedPersonsList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertPersonsListMatching(getPersonListPanel(), expectedPersonsList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        Task[] expectedTasksList \u003d SampleDataUtil.getSampleTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertTasksListMatching(getTaskListPanel(), expectedTasksList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "indocomsoft": 7,
      "zxjtan": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/contacts/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AddCommandSystemTest extends ContactsSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String command \u003d \"   \" + MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 5. Selected contact remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 31,
      "indocomsoft": 9,
      "-": 193
    }
  },
  {
    "path": "src/test/java/systemtests/contacts/AssignedCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import static seedu.address.logic.commands.contacts.AssignedCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "public class AssignedCommandSystemTest extends ContactsSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        String command \u003d \"   \" + MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        AssignedCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        AssignedCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        AssignedCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        AssignedCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + \"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "                        + AssignedCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 25,
      "zxjtan": 12,
      "indocomsoft": 1,
      "-": 128
    }
  },
  {
    "path": "src/test/java/systemtests/contacts/ContactsSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "import seedu.address.logic.commands.contacts.AssignedCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * An extension of AppSystemTest with methods specific to contacts commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public abstract class ContactsSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaypeeteedee"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return TypicalAddressBook.getTypicalAddressBookPersons();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaypeeteedee": 2,
      "zxjtan": 45
    }
  },
  {
    "path": "src/test/java/systemtests/contacts/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.contacts.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class DeleteCommandSystemTest extends ContactsSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String command \u003d \"     \" + MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_DELETE_COMMAND_FORMAT, MODULE_WORD));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_DELETE_COMMAND_FORMAT, MODULE_WORD));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" abc\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_DELETE_COMMAND_FORMAT, MODULE_WORD));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" 1 abc\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_DELETE_COMMAND_FORMAT, MODULE_WORD));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + \"DelETE 1\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 24,
      "indocomsoft": 4,
      "-": 172
    }
  },
  {
    "path": "src/test/java/systemtests/contacts/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.contacts.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class EditCommandSystemTest extends ContactsSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String command \u003d \"  \" + MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + NAME_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        MODULE_WORD));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        MODULE_WORD));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \" + EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                String.format(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "                        MODULE_WORD));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        + EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        + EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        + EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        + EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        + EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(MODULE_WORD + \" \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                        + EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 43,
      "indocomsoft": 6,
      "-": 233
    }
  },
  {
    "path": "src/test/java/systemtests/contacts/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.ContactsParser.MODULE_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.contacts.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class FindCommandSystemTest extends ContactsSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String command \u003d \"   \" + MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel, CARL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "indocomsoft"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + \"FiNd Meier\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 40,
      "indocomsoft": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/systemtests/tasks/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_FEED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_FEED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_END_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_END_TIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_START_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VALUE_START_TIME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BRUSH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_FEED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_FEED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_FEED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.TasksParser.MODULE_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BRUSH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.FEED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLAUGHTER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.tasks.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public class AddCommandSystemTest extends TasksSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: add a task without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Task toAdd \u003d FEED;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String command \u003d \"   \" + MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_FEED + \"  \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + START_DATE_DESC_FEED + \" \" + START_TIME_DESC_FEED + \"   \" + END_DATE_DESC_FEED + \"   \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + END_TIME_DESC_FEED + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: undo adding Feed to the list -\u003e Feed deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: redo adding Feed to the list -\u003e Feed added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: add a task with all fields same as another task -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        toAdd \u003d new TaskBuilder(FEED).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_FEED + START_DATE_DESC_FEED"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + START_TIME_DESC_FEED + END_DATE_DESC_FEED + END_TIME_DESC_FEED;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: add to empty Cow data -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(BRUSH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: add a task with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        toAdd \u003d SLAUGHTER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + START_DATE_DESC_SLAUGHTER + END_TIME_DESC_SLAUGHTER"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + TAG_DESC_SLAUGHTER + END_DATE_DESC_SLAUGHTER + NAME_DESC_SLAUGHTER + START_TIME_DESC_SLAUGHTER;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + VALID_START_DATETIME_DESC + VALID_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: missing end date -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + VALID_START_DATETIME_DESC"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: missing end time -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + VALID_START_DATETIME_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: missing end date and time -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + VALID_START_DATETIME_DESC;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), MODULE_WORD));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + \"adds \" + TaskUtil.getTaskDetails(toAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + INVALID_NAME_DESC + VALID_START_DATETIME_DESC"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: invalid start date -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + INVALID_VALUE_START_DATE_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_START_TIME_DESC + VALID_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: invalid start time -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + VALID_START_DATE_DESC"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INVALID_VALUE_START_TIME_DESC + VALID_END_DATETIME_DESC;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: invalid end date -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + VALID_START_DATETIME_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + INVALID_VALUE_END_DATE_DESC + VALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: invalid end time -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + VALID_START_DATETIME_DESC"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_DATE_DESC + INVALID_VALUE_END_TIME_DESC;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, DateTime.MESSAGE_DATETIME_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        command \u003d MODULE_WORD + \" \" + AddCommand.COMMAND_WORD + NAME_DESC_BRUSH + VALID_START_DATETIME_DESC"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "                + VALID_END_DATETIME_DESC + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 5. Calendar view remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private void assertCommandSuccess(Task toAdd) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(TaskUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code command}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private void assertCommandSuccess(String command, Task toAdd) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        expectedModel.addTask(toAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts that"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 2. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 217
    }
  },
  {
    "path": "src/test/java/systemtests/tasks/TasksSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "package systemtests.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.TasksParser.MODULE_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import static seedu.address.logic.parser.tasks.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.tasks.AssignedCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.tasks.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.logic.commands.tasks.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "import systemtests.AppSystemTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " * An extension of AppSystemTest with methods specific to tasks commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zxjtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "public abstract class TasksSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Displays all tasks in the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected void showAllTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(getModel().getAddressBook().getTaskList().size(), getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Displays all tasks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected void showTasksWithName(String keyword) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + keyword);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getAddressBook().getTaskList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     * Selects the task at {@code index} of the displayed list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected void selectTask(Index index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        executeCommand(MODULE_WORD + \" \" + AssignedCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        assertEquals(index.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zxjtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "        return TypicalAddressBook.getTypicalAddressBookTasks();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zxjtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zxjtan": 48
    }
  }
]
