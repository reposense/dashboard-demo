[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Student Schedule Planner"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T12-3/main[image:https://travis-ci.org/CS2103-AY1819S1-T12-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://ci.appveyor.com/project/CrimsonAng/main[image:https://ci.appveyor.com/api/projects/status/opv4270qegxa4htw?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T12-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T12-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/c1c4590ed4b34b4fbdebb1efbf43d050[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/Woodnsuns/main_2?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-T12-3/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Student Schedule Planner application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java application intended for students who wish to use schedule planner to plan their tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 4,
      "Woodnsuns": 1,
      "-": 29
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"githubId\": \"CrimsonAng\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"displayName\": \"ANG C... SHIN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"authorNames\": [\"CrimsonAng\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"githubId\": \"Woodnsuns\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"displayName\": \"LIN... XU\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"authorNames\": [\"Woodnsuns\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"githubId\": \"park-sang-jun\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"displayName\": \"PARK ...G JUN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"authorNames\": [\"park-sang-jun\", \"Park Sang Jun\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"githubId\": \"thaddeuslzy\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"displayName\": \"THADD...HI YU\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"authorNames\": [\"thaddeuslzy\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"githubId\": \"hotarumin\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"displayName\": \"XIAO ...YILIN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "      \"authorNames\": [\"hotarumin\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 30
    }
  },
  {
    "path": "addressbook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eIS2223 slides\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e121018\u003c/date\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eCOM1-0210\u003c/venue\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003ePresentation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eST2223 quiz\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e121018\u003c/date\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eCOM1-0210\u003c/venue\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eQuiz\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eCS2105 Assignment\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e121018\u003c/date\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003ehome\u003c/venue\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eAssignment\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003carchivedTasks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eCS2103T Tutorial\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e101018\u003c/date\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eCOM1-0210\u003c/venue\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eTutorial\u003c/tagged\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/archivedTasks\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003carchivedTasks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eCS2100 Tutorial\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e111018\u003c/date\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eCOM1-0210\u003c/venue\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eTutorial\u003c/tagged\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/archivedTasks\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 38
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "mainClassName \u003d \u0027ssp.scheduleplanner.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    archiveName \u003d \u0027studentscheduleplanner.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            test.include \u0027ssp/scheduleplanner/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            test.include \u0027ssp/scheduleplanner/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            test.exclude \u0027ssp/scheduleplanner/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u0027site-name\u0027: \u0027Student Schedule Planner\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T12-3/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 7,
      "-": 239
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Student Schedule Planner was developed by the https://github.com/CS2103-AY1819S1-T12-3[T12-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ang Chen Shin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::crimsonang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "{empty}[https://github.com/CrimsonAng[github]] [\u003c\u003ccrimsonang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead, Scheduling and Tracking +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Responsible for overall project coordination."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lin Xu"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::woodnsuns.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "{empty}[https://github.com/Woodnsuns[github]] [\u003c\u003cwoodnsuns#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Documentation, Code Quality +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Maintaining the quality of various project documents +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Looks after code quality, ensures adherence to coding standards, etc."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Park Sang Jun"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::park-sang-jun.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "{empty}[https://github.com/park-sang-jun[github]] [\u003c\u003cpark-sang-jun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Ensure project deliverables are done on time and in the right format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Thaddeus Lim Zhi Yu"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::thaddeuslzy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "{empty}[http://github.com/thaddeuslzy[github]] [\u003c\u003cthaddeuslzy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: In charge of versioning of the code, maintaining the code repository,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Xiao Yilin"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::hotarumin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "{empty}[https://github.com/hotarumin[github]] [\u003c\u003chotarumin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 11,
      "-": 47
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T12-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d Student Schedule Planner - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ":important-caption: :exclamation:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T12-3/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "By: `Team T12-3`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "This Developer Guide for the Student Schedule Planner is written by the SSP team for the benefits of future"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "developers and maintainers of the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Student Schedule Planner is a desktop application aims to help students save their tasks manage them all in one place"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "This introduction briefly covers the main flow of the Developer Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*1. Setting up* : Walkthrough on the prequisites steps to setup the Developer Environment"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*2. Design* : Overview on the structure of the project code, and how each component interacts with each other."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*3. Implementation* : In-depth explanation on the implementation of the various features in the Schedule Planner, as"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "well as the considerations behind the implementations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*4. Documentation* : General guide on the documentation process of the project"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*5. Testing* : Documentation for the coverage tests of the application and how to set up your testing environment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*6. DevOps* : General processes used during development phase, and documentation on how to set it up."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Before you start working on the project, please make sure that you have completed the necessary prerequisites."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*JDK `10`* on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Windows developers are highly recommended to use *JDK `9`*."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/ssp/scheduleplanner/storage/XmlAdaptedTask.java[`XmlAdaptedTask.java`] and link:{repoURL}/src/main/java/ssp/scheduleplanner/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/ssp/scheduleplanner/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/ssp/scheduleplanner/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ". Run `MainApp` and try a few commands"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ". Click on the `Imports` tab to set the order:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `ssp/scheduleplanner`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "repo."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `ssp/scheduleplanner`), you should do the following:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "This section covers the structural design of the App, as well as how its various components interact with each other."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The *_Architecture Diagram_* given below explains the structural design of the App. It is followed by is a quick"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "overview of each component."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/ssp/scheduleplanner/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* At app launch: Initializing the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* At shut down: Shutting down the components and invoking cleanup method where necessary."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level. They are:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The rest of the App consists of four components:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: The component which holds the data of the App in-memory."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: The component which reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* Exposes its functionality using a ` (_Component Name_)Manager` class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "For example, `Logic`(see the class diagram given below) defines its API in `Logic.java` interface"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "and exposes its functionality using `LogicManager.java` class."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`delete 1`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::SDforDeleteTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`Model` simply raises a `SchedulePlannerChangedEvent` when the schedule planner data is changed, instead of"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "asking `Storage` to save updates to the hard disk."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below shows how `EventsCenter` reacts to the event, after which the updates are saved"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "to the hard disk, and the status bar of the `UI` is updated to reflect \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::SDforDeleteTaskEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The event is propagated through `EventsCenter` to `Storage` and `UI`, without `Model` having to be coupled to either of"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "them. This is an example of how Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java//ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The UI consists of `MainWindow`, which is made up of `CommandBox`, `ResultDisplay`, `TaskListPanel`,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "`StatusBarFooter`, `SidebarPanel` etc."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "All these, including `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`UI` uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/ssp/scheduleplanner/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "`UI` component does the following:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* Executes user commands using `Logic` component."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* Binds itself to some data in `Model` so that the UI can auto-update when data in `Model` changes."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/ssp/scheduleplanner/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Below are the steps of how `Logic` executes an user command:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".  `Logic` uses `SchedulePlannerParser` to parse the user command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".  This creates a `Command` object which is executed by `LogicManager`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".  The command execution can affect `Model` (e.g. adding a task) and/or raise events."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".  The result is encapsulated as a `CommandResult` object which is passed back to `Ui`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Given below is the Sequence Diagram for interactions within `Logic` for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".Sequence diagram for `delete 1` Command within Logic Component"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::DeleteTaskSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".Structure of Model Component"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/ssp/scheduleplanner/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The `Model` component does the following:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* Stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* Stores the Schedule Planner data."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* Exposes an unmodifiable, observable `ObservableList\u003cTask\u003e`  e.g. UI can be bound to this list, such that it"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "automatically updates when data in the list changes."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* Does not depend on any of the other three components."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Schedule Planner`, which `Task` can reference. This would allow `Schedule Planner` to only require one `Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/ssp/scheduleplanner/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The `Storage` component does the following:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* Saves `UserPref` objects in json format and reads it back."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* Saves the Schedule Planner data in xml format and reads it back."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `ssp.scheduleplanner.commons` package."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "This section elaborates on how certain features are implemented."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// tag::addrepeat[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d Add Recurring Tasks"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The Add Repeat feature allows the user to add recurring tasks of a specified number of repeats and a specified interval between each repeat."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The following code snippet shows how the command is implemented:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "----"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "..."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// Loop through to add the rest of the tasks."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "for (int i \u003d 1; i \u003c Integer.parseInt(repeat.value); i++) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    baseDate.add(Calendar.DAY_OF_YEAR, interval);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    newDate \u003d schedulerFormat.format(baseDate.getTime());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    date \u003d new Date(newDate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    newTask \u003d new Task(toAdd.getName(), date,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            toAdd.getPriority(), toAdd.getVenue(), toAdd.getTags());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    // Add the task only if there is no duplicate task within the model."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    if (!model.hasTask(newTask)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            model.addTask(newTask);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "..."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "----"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "This loop occurs after the first task is added. The tasks are created within the loop with duplicate names, priorities, venues and tags."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Before adding a task, the function checks with the model if such a task already exists. If not, the task is added. If the task is a duplicate task, it is skipped and the loop proceeds until it terminates."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The following outlines an example of the command\u0027s usage."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 1. The user enters the command `repeat n/CS2103T Tutorial i/7 r/3 p/3 t/CS2103T t/Tutorial v/COM1`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 2. The AddRepeatParser parses the command and isolates each of the arguments."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 3. The Model checks if the first task exists. If the first task does not exist in Model, it is added. If not, it is skipped."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 4. The execute command loops through to build each repeated task. In each loop, the date is incremented by the specified interval. Same as Step 3, a duplicate task is skipped and a task that does not exist in Model is added."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 5. The changes are committed and the new list is shown to the user."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The following sequence diagram shows how the add repeat operation works:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "image::AddRepeatSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// end::addrepeat[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d Undo/Redo Commands"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The Undo/Redo feature allows the user to revert the schedule planner to an earlier state when \u0027undo\u0027 is called, or a"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "later state when \u0027redo\u0027 is called."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedSchedulePlanner`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `SchedulePlanner` with an undo/redo history, stored internally as an `SchedulePlannerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* `VersionedSchedulePlanner.commit()` -- Saves the current schedule planner state in \u0027history\u0027."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* `VersionedSchedulePlanner.undo()` -- Restores the previous schedule planner state from \u0027history\u0027."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* `VersionedSchedulePlanner.redo()` -- Restores a previously undone schedule planner state from \u0027history\u0027."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "These operations are exposed in `Model` interface as `Model#commitSchedulePlanner()`, `Model#undoSchedulePlanner()` and `Model#redoSchedulePlanner()` respectively."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 1. The user launches the application for the first time. `VersionedSchedulePlanner` will be initialized with the"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " initial schedule planner state, with `currentStatePointer` pointing to that single schedule planner state."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 2. The user executes `delete 5` command. The `delete` command calls `Model#commitSchedulePlanner()`, as a result"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " the modified state of the schedule planner is saved in `schedulePlannerStateList` after the `delete 5` command"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " executes, the `currentStatePointer` shifts to the newly inserted schedule planner state."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 3. The user executes `add n/CS2100 Lect ...` to add a new task. The `add` command calls"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`Model#commitSchedulePlanner()"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`, and the modified schedule planner state is saved into `schedulePlannerStateList`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "If a command execution fails, it will not call `Model#commitSchedulePlanner()`, so the schedule planner state will not"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " be saved into `schedulePlannerStateList`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 4. The user now decides to undo that action by executing the `undo` command. The `undo` command will call"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`Model#undoSchedulePlanner()`, which shifts the `currentStatePointer` to the previous index, pointing to the"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "previous schedule planner state, and restoring the schedule planner to its previous state."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "If the `currentStatePointer` is at index 0(i.e the initial schedule planner state), then there are no previous states to restore to. The `undo` command uses `Model#canUndoSchedulePlanner()` to check this case."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoSchedulePlanner()`, which shifts the"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`currentStatePointer` to the next index, pointing to the next state, and restores the schedule planner to"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "that state."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "If `currentStatePointer` is at index `schedulePlannerStateList.size() - 1` (i.e pointing to the latest state), then there are no latest states to restore. The `redo` command uses `Model#canRedoSchedulePlanner()` to check this case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 5. The user then executes the command `list`. Commands that do not modify the schedule planner, such as `list`,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "will usually not call `Model#commitSchedulePlanner()`, `Model#undoSchedulePlanner()` or `Model#redoSchedulePlanner()`. Thus, the `schedulePlannerStateList` remains unchanged."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitSchedulePlanner()`. If the `currentStatePointer` is not"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "pointing to the latest state in the `schedulePlannerStateList`, all states after the"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 1 (current choice):** The entire schedule planner is saved."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: It is easy to implement."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: It may have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 2:** Each individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: It will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command is correct."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 1 (current choice):** A list is used to store the history of schedule planner states."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: It is easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`HistoryManager` and `VersionedSchedulePlanner`."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 2:** `HistoryManager` is used for undo/redo."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: It requires dealing with commands that have already been undone: We must remember to skip these commands. It violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Log Messages"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "We are using `java.util.logging` package for logging. `LogsCenter` class is used to manage logging levels and"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "destinations."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "How to log:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* The logging level can be controlled using `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* The log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The following are logging levels used:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* `SEVERE` : This is for critical problems detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* `WARNING` : This is to warn that application can continue running, but with caution"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* `INFO` : This is for information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* `FINE` : This is for details that are not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// tag::viewarangeoftasks[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d View Tasks Due Today/This Week"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "In order to enable users to better monitor their tasks in the schedule planner, Two variations of"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " `list` command were added."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`listday` command supports viewing tasks due on the current date, whereas `listweek` command supports viewing tasks"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "from the current date till the closest Sunday."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`listday`/`listweek` utilises the same implementation used by `list` command:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `Model#updateFilteredTaskList()` -- Takes in a predicate parameter and updates the model"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "according to the predicate."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`listday` further implements the following operation:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `DateSamePredicate` -- takes in a `systemDate` parameter.  `systemDate` is a"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`String` value after converting current system date into `DDMMYY` format."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`listweek` further implements the following operations:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `numDaysTillSunday(dateName)` -- It compute the number of days from current date until closest Sunday (exclusive of"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Sunday) using `dateName`. `dateName` is the name of the current day."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `appendDateList(dateList, numDaysTillSunday(dateName))` -- It generates sequential `DDMMYY` values"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "based on the result of `numDaysTillSunday(dateName)` and inserts them into `dateList` . `dateList` is a `List\u003cString\u003e`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "object."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `DateWeekSamePredicate` -- It takes in a `dateList` parameter. `dateList` is a `List\u003cString\u003e` object that contains"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "the list of dates from current date to closest Sunday date in `DDMMYY` format."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "As both `listday`/`listweek` commands are similar, we will only illustrate how `listweek` works."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Given below is an example usage scenario and how `listweek` mechanism behaves at each steps:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 1. The user entered the command `listweek`."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 2. The command word `listweek` invoke `LogicManger` to invoke `SchedulePlannerParser` to return a"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`ListWeekCommand` object. `LogicManager` then invoke `ListWeekCommand#execute()`."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 3. `ListWeekCommand#appendDateList(datelist, numDaysTillSunday(dateName))` will be activated. It helps to generates"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "values for `dateList` and the values are sequential dates in `DDMMYY` format after using the result from"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`numDaysTillSunday()` method. `numDaysTillSunday()` will compute the number of days from current date till Sunday based on `dateName`,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "the name of the current day."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 4. `model.updateFilteredTaskList()` will update the task list with `DateWeekSamePredicate`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "as the parameter. `DateWeekSamePredicate` itself would take `dateList` in Step 3 as the parameter."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 5. The updated task list would be reflected on `UI` to be displayed to the user."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "The following sequence diagram illustrates how the mechanism works:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ".Sequence Diagram of ListWeek Command"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::ListWeekCommand_DG_SequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// end::viewarangeoftasks[]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// tag::viewarangeoftasks2[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How does listday and listweek function"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* **Alternative 1 (current choice):** Filter accordingly based on the command itself"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Pros: It is easy to implement and use."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Cons: It restrict to view all tasks from current date or from current date till Sunday only."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* **Alternative 2:** Allow the commands to receive argument for which date(s) to filter."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "E.g listday 130818 to view all tasks for 13 August 2018."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Pros: It allows viewing for different date(s)."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Cons: It would cause inconvenience for entering the date(s) each time the command was to be used."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// end::viewarangeoftasks2[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::archive[]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Archive Task"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The Archive Task feature allows user to archive completed tasks. The archived tasks are hidden from task list,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "can only be viewed through command `listarchived`. For implementation details"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "regarding listing archived tasks, please refer to \u003c\u003cList Archived Tasks\u003e\u003e."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The archiveTask mechanism is facilitated by SchedulePlanner."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Schedule Planner has two lists of tasks,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "one is taskList for normal tasks, another is archivedTaskList for archived tasks."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Normal task list is implemented using UniqueTaskList that does not allow duplicates,"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "while archived task list is implemented using TaskList that allows duplicates. +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Task list that is used to store normal tasks is implemented this way:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "       //... Check for duplicates logic..."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "While task list that is used to store archived tasks does not check for duplicates:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is an example usage scenario and how the archiveTask mechanism behaves. We first"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "assume that user executes command `archive 1`: +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". The archiveCommand is created, 1 is recognised as `targetIndex`. +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `ArchiveCommand.execute()` calls `model.archiveTask()` and parse in `targetIndex` as parameter, which is `1`. +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `archiveTask()` method in schedulePlanner class is called, which deletes the first task shown in current task list from"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "task list and stores it into archived task list."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The following sequence diagram illustrates how the mechanism works:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".Sequence Diagram of archive task command"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::ArchiveTaskCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of archived tasks"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 1 (current choice):** Save archived tasks in a separate list."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Implement two task lists in Schedule Planner, one for normal tasks, another for archived tasks. For archived tasks,"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "instead of using UniqueTaskList, implement a new class that allow duplicates."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: When listing normal tasks, the program does not have to filter out archived tasks every time; which makes the"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "algorithm more efficient. Besides, users is able to add in new task with same attributes as an archived task,"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "which makes the design logic more reasonable for user and more user-friendly as well."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: Listing archived tasks will need a new approach, different from other list commands; new class has to be"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " implemented to store archived tasks."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 2:** Save archived tasks together with normal tasks."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Schedule Planner only has one task list."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Add boolean filed isArchived to Task class to differentiate archived and not archived tasks. +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: It is easy to implement."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: Each time list command is called, archived tasks have to be filtered out, which may affect performance."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Besides, user cannot add in new task with same attributes as archived tasks, which is much less user-friendly."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::archive[]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::autoDelete[]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Automatic Partial Deletion of Archived Tasks"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The automatic deletion feature removes archived tasks with deadlines date earlier than 2 weeks ago from current time"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "point from archived task list. There are two main reasons behind this feature. +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Firstly, we want to optimize the user experience of viewing archived tasks. Users should be able to view archived tasks,"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "but displaying all archived tasks would make the archived task list too bulky and hard to view. In other words, we want to stop the archived task"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "list from growing to infinity. +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Another reason is we want to save storage space used by our application as much as possible."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Every time when the application is launched, archived list is checked through. Tasks with deadline date earlier than"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "2 weeks ago are then permanently deleted from archived task list."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".Sequence Diagram of automatic partial deletion of archived tasks feature"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::AutoDelete.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is detailed explanation of how auto-deletion mechanism behaves: +"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Application is launched"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `MainApp#init()` is called, which instantiates `Model` class and calls `Model#autoDeleteArchived()`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `Model#autoDeleteArchived()` then calls `TaskList#autoDelete()`. Note that `TaskList` is an object type"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "implemented to store archived tasks. `TaskList#autoDelete()` then scan through archived tasks and deletes"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "those archived tasks with deadline date earlier than 2 weeks before current time point."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What tasks should we delete?"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "We had a rough idea of deleting away \"old\" tasks. However, how should we define \"old\"? +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 1 (current choice):** Delete tasks with deadline date earlier than 2 weeks before current date."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: This implementation is easier for testing. Testers do not have to alternate their system time to"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "test the feature."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: The logic may be less user-friendly comparing to Alternative 2. A user\u0027s expectation is more likely"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "to be \"I can check tasks that were archived recently\". For example, if user has just archived a"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "task that has been overdue for 1 month (the deadline date of this task is 1 month earlier than current date),"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "he/she may find it not so intuitive if next time he/she runs the app, the task cannot be found in archived task list."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 2 :** Delete tasks that were archived 2 weeks before current date."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: This implementation may be more user-friendly comparing with Alternative 1."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: The feature would be hard to test for testers."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::autoDelete[]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::listmonth[]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d List Tasks by Month"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The `listmonth` command is another variation of the `list` command, which supports viewing tasks due from the current"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "date till the end of the month."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`listmonth` utilises the same implementation used by the `list` command:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* `Model#updateFilteredTaskList()` -- Takes in a predicate parameter and updates the model according to the predicate."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`listmonth` also utilises the same implementation used by the `listweek` command:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* `DateWeekSamePredicate` -- It takes in a `dateList` parameter. `dateList` is a `List\u003cString\u003e` object that contains"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "a list of dates from current date to the end of the month in `DDMMYY` format."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`listmonth` further implements the following operations:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* numDaysTillEndOfMonth(currentDay) -- It computes the number of days from current date until the end of the month"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "using `currentDay`.  `currentDay` is the current date in `LocalDate` format."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* appendDateList(dateList, numDaysTillEndOfMonth(currentDay)) -- It generates sequential `DDMMYY` values"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "based on the result of `numDaysTillEndOfMonth(currentDay)` and adds them into \u0027dateList` . `dateList` is a"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`List\u003cString\u003e` object."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Given below is an example usage scenario and how `listmonth` mechanism behaves at each steps:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 1. The user enters the command `listmonth`."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 2. The command word `listmonth` invokes `LogicManger`, which invokes `SchedulePlannerParser` to return a"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`ListMonthCommand` object. `LogicManager` then invokes `ListMonthCommand#execute()`."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 3. `ListMonthCommand#appendDateList(datelist, numDaysTillEndOfMonth(currentDay))` will be invoked. It"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "generates sequential dates in `DDMMYY` format which are added into `dateList`. `numDaysTillEndOfMonth(currentDay)`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "computes the number of days from the current date till the end of the month based on `currentDay`. `currentDay` is the"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "current date in `LocalDate` format."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 4. `model.updateFilteredTaskList()` updates the task list with `DateWeekSamePredicate` as the predicate."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`DateWeekSamePredicate` takes `dateList` in Step 3 as its parameter."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 5. The updated task list would be reflected on `UI` to be displayed to the user."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The following sequence diagram illustrates how the mechanism works:"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".Sequence Diagram of ListMonth Command"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::ListMonthSequenceDiagram.png[width:300]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How does listmonth function"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Alternative 1 (current choice):** Fixed date interval based on commands"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Pros: It is easier to implement, and faster for the user."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Cons: It may not be as flexible, as it restricts view to tasks from current date till a fixed date in the future"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "(last day of the month)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Alternative 2:** Allow `list` commands to receive arguments for start/end dates"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "E.g list 130818 200918 to view all tasks between the two dates."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Pros: It allows flexible viewing for different ranges."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Cons: It would be inconvenient to enter two date(s) each time the command is used."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::listmonth[]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// tag::generateacademiccalendar[]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Generate Academic Calendar Weeks"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "In order to enable users to better monitor their tasks in the schedule planner by knowing what is the current"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "academic week, `firstday` command was added."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`firstday` command will generate the weeks referencing to NUS academic calendar, and will append the week"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "description to the application title if the user launches the application within the academic calendar dates."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "This allows the user to know the current academic week."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Only 17 weeks are referenced from NUS academic calendar. More details at glossary."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`firstday` mechanism is facilitated by `FirstDayCommand` and implements the following operations:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#computeRangeOfWeek(firstDay)` -- It generate the academic calendar weeks data based on `firstDay`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " parameter."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#addDescriptionForWeeks` -- It appends description for each academic calendar weeks."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#saveRangeOfWeeks(rangeOfWeek)` -- It save the academic calendar weeks data into `rangeofweek.xml`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#createDefaultFileIfNotExist()` -- It creates the default `rangeofweek.xml` if it does not exist."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* `FirstDayCommand#createDefaultFileIfUnableConvert()` -- It creates the default `rangeofweek.xml` if data is unable"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "to convert to be used."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#createDefaultFileIfSizeDiff()` -- It creates the default `rangeofweek.xml` if the number of"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "entries differ from the expected academic number of weeks."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#createDefaultFileIfNull()` -- It creates the default `rangeofweek.xml` if any data is null."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#createDefaultFileIfInvalidDateOrRange()` -- It creates the default `rangeofweek.xml` if date data in"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "modified to be an invalid date or date range format."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#computeAppTitle()` -- It computes the corresponding application title after checking if current"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "system date is within academic calendar dates."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#retrieveRangeOfWeeks(storeRangeOfWeeks)` -- It retrieves the saved academic calendar weeks data from"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`rangeofweek.xml`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#isWithinDateRange(firstDayOfSem, lastDayOfSem)` -- Check if current system date is within"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`firstDayOfSem` and `lastDayOfSem` and return true or false."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#retrieveWeekDescription(rangeOfWeek)` -- It return the description of a particular week"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* `FirstDayCommand#isMonday(inputDate)` -- It checks if `inputDate` is Monday and return true or false."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Given below is an example usage scenario and how `firstday` mechanism behaves at each steps:"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 1. The user enter the command `firstday 130818`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 2. The command word `firstday` invoke `LogicManager` to invoke `SchedulePlannerParser`. `SchedulePlannerParser`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "then invoke `FirstDayCommandParser#parse(130818)` which will then trim the argument `130818` into `trimmedArgs`."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 3. Methods `onlyOneSetArgument(trimmedArgs)`, `Date#isValidDate(trimmedArgs)` and `isMonday(trimmedArgs)` are used"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " in sequential order to check if `trimmedArgs` is valid."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "If either method in Step 3 failed, `ParseException` with respective message will be thrown to inform user what had"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "gone wrong. `FirstDayCommand` would then not be called."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 4. `FirstDayCommandParser` return a `FirstDayCommand` with the validated `trimmedArgs` as its"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "parameter."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 5. `LogicManager` then invoke `FirstDayCommand#execute()`."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 6. `FirstDayCommand#computeRangeOfWeeks(trimmedArgs)` will be activated and generate the academic calendar weeks"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ". This method will further call `FirstDayCommand#addDescriptionForWeeks` to add description for each of the academic"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "calendar weeks. The academic calendar weeks will be stored in a `2D String array` named `rangeOfWeek`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 7. `FirstDayCommand#saveRangeOfWeeks(rangeOfWeek)` will be activated. It will create a"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`XmlSerializableRangeOfWeek` object with `rangeOfWeek` as its parameter to allow `rangeOfWeek` data to be"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "converted into `Xml` format to be easily saved. Next, this method would call `XmlFileStorage#saveWeekDataToFile` to"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "save `XmlSerializableRangeOfWeek` object data into `Xml` format in `rangeofweek.xml`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`CommandException` will be thrown if `rangeofweek.xml` does not exist."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 8. After the data had been saved properly, should the current system date lies within the academic calendar"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "weeks, `UI` would display the corresponding week description to the user."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::FirstDayCommand_UG_Bef.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 9. When user launch the application,`MainApp` will create a `FirstDayCommand` object named `fdc` to utilise the"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "methods `fdc#createDefaultFileIfNotExist`, `fdc#createDefaultFileIfUnableConvert`, `fdc#createDefaultFileIfDiffSize`,"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`fdc#createDefaultFileIfNull` and `fdc#createDefaultFileIfInvalidDateOrRange`."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "If it is the first time the user launches the application or if user deleted `rangeofweek.xml` or invalidated data in"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`rangeofweek.xml`, the application will record the log message and create a default `rangeofweek.xml`."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "The following code snippet shows that with the extra layer of data verification and rectification, the user do not need"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " to worry when they accidentally invalidated the storage file."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::FirstDayCommand_DG_MainAppLaunchSnippet.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 10. `MainApp` will create a `Config` object named as `updateConfig` and then calls the method"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`updateConfig.setAppTitle(fdc.computeAppTitle())`. `fdc.computeAppTitle()` would create a `2D String Array` called"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`retrieveData` for storing academic semester dates to operate `FirstDayCommand#retrieveRangeOfWeeks(retrieveData)` to"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " retrieve saved data."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "It then check if system date is within the `retrieveData` by using `FirstDayCommand#isWithinDateRange(x,y)` where `x`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "and `y` stands for the first academic and last academic day respectively. If it is within, it then generate the"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "corresponding application title by using `FirstDayCommand#retrieveWeekDescription(retrieveData)`. Else it uses the"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "default application title. It would then return the result into `updateConfig.setAppTitle()` to update the"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "application title."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 11. `MainApp` then calls `ConfigUtil#saveConfig(updateConfig, configFilePathUsed)` to save the updated"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "configuration into the path `configFilePathUsed` where `config.json` is."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Step 12. `MainApp` would then retrieve the application title from `config.json` and display on `UI`."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::FirstDayCommand_UG_Aft.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`CommandException` will be thrown if data from `rangeofweek.xml` could not be converted or if `rangeofweek.xml` does"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "not exist."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "The following sequence diagrams illustrates how the mechanism works:"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ".Sequence diagram of FirstDay Command"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::FirstDayCommand_DG_SequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ".Sequence diagram of launching MainApp"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::LaunchMainApp_DG_SequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How firstday command functions"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* **Alternative 1 (current choice):** Generate entire academic calendar weeks by input the first academic Monday date."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Pros: It would only need one set of date."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Cons: It would require many methods to validate, generate the data."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* **Alternative 2:** Allow user to create their own academic calendar such as having customised number of weeks and"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "description for each weeks."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Pros: It would allow customisation."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Cons: It would be time and effort consuming for the user and also to validate the data."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support storing of academic calendar weeks data"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* **Alternative 1 (current choice):** `2D String array` is used."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Pros: It would allow easy data retrieval for specific `index`."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Cons: It could cause confusion especially if magic numbers were used instead of constant."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* **Alternative 2:** `ArrayList` is used."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Pros: It would not require sequential memory for storage."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Cons: It would not allow data retrieval at any specific `index` which requires traversing."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// end::generateacademiccalendar[]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::filtertags[]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Filter by Tags (`filter` and `filterstrict`)"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The `filter` \u0026 `filterstrict` commands allow the user to filter tasks in the schedule planner according to their tags."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The user may search for multiple tags at once, and the schedule planner returns a list of tasks containing the tags"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "specified by the user."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The `filter` command searches for tasks inclusively, which means that when multiple tags are input, SSP filters tasks"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "containing ANY of the user-input tags (e.g \u0027A\u0027, or \u0027B\u0027, or both \u0027A\u0027 \u0026 \u0027B\u0027)."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "In contrast, `filterstrict`,filters tasks containing ALL of the user-input tags. (e.g ONLY \u0027A\u0027 \u0026 \u0027B\u0027)"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Since `filter` and `filterstrict` are implemented in similar fashion, we will simply refer to `filter`."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The filter mechanism utilises `FilterCommandParser` to parse the user command into separate tags by invoking the method"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`FilterCommandParser.parse(args)`, where `args` are the tags to be filtered.  e.g `tag1 tag2` will be parsed into"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`tag1` and `tag2`."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Given below is an example usage scenario and how the filter mechanism behaves at each step:"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 1. The user executes the command `filter tutorial CS2100`"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 2. The \u0027filter\u0027 command invokes `FilterCommandParser`, which parses the argument `tutorial CS2100` into separate"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "words `tutorial` and `CS2100`, and are stored in an array in the predicate `TagsContainsKeywordsPredicate`."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 3. `FilterCommandParser` then returns a `FilterCommand` , which contains `TagsContainsKeywordsPredicate`, a"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "predicate which tests for the tags \u0027tutorial\u0027 and \u0027CS2100\u0027. `FilterCommand.execute()` calls `model"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".updateFilteredTaskList(TagsContainsKeywordsPredicate)`, which returns an updated list of tasks containing any of the"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " tags input by the user."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`filter` filters tasks inclusively, while `filterstrict` filters tasks exclusively."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The following sequence diagram summarizes what happens when a user executes a new filter command:"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::FilterSequenceDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How filter executes"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Alternative 1 (current choice):** The filter command is inclusive i.e filtering for A and B returns tasks with A,"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " B, or both."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Pros: It is easy to implement, it is also consistent with how the \u0027find\u0027 command works."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Cons: It is not as specific."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Alternative 2:** The filter command is exclusive, i.e filtering for A and B returns tasks with A \u0026 B"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Pros: It is more specific (e.g. filters the tasks more strictly)."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** Cons: It is inconsistent with the original implementation of the \u0027find\u0027 command. It is more difficult to implement."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "//end::filtertags[]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//tag::listoverdue[]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d List Overdue Tasks"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The `listoverdue` command allows the user to view the list of all overdue tasks. A task is considered overdue if its"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "deadline has passed. In other words, the system\u0027s current date is after the deadline."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Given below is a code snippet of the ListOverdueCommand."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "----"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "..."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    // Filter the task list using the OverduePredicate with the current date as the parameter."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    model.updateFilteredTaskList(new OverduePredicate(SYSTEM_DATE));"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "..."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "----"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The ListOverdueCommand calls the method updateFilteredTaskList with a new OverduePredicate which has the current date as the parameter."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "----"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public boolean test(Task task) {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    return date - task.getDate().yymmdd \u003e 0 ? true : false;"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "----"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The test function within OverduePredicate class compares the current system date with the date of the task. If the task\u0027s date is after"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "the current time, the function returns false, and vice versa."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Model contains a UniqueTaskList called tasks."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Given below is an example usage scenario and how the list overdue mechanism behaves at each step:"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ".Sequence Diagram of ListOverdueCommand"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "image::ListOverdueSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 1. The user executes the command `listoverdue`."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 2. `model.updateFilteredTaskList()` will update the task list with `OverduePredicate` as the parameter"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "`OverduePredicate` itself takes the current system date in the yyMMdd format."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Step 3. The updated task list would be reflected on the UI to be displayed to the user."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the overdue tasks are stored"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "* **Alternative 1 (current choice):** The overdue tasks are not stored in a separate UniqueTaskList. Instead, the"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "UniqueTaskList tasks is filtered with OverduePredicate each time the `listoverdue` command is called."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** Pros: Does not require a new UniqueTaskList."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** Cons: If the number of tasks is huge, filtering will take a long time. However, this is not a problem since"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "the number of tasks is small at any given point of time."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "* **Alternative 2:** The overdue tasks are stored in a new UniqueTaskList."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** Pros: Retrieving is overdue tasks is faster."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** Cons: A new UniqueTaskList has to be implemented."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//end::listoverdue[]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//tag::listarchivedtasks[]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d List Archived Tasks"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The `listarchived` command allows the user to view the list of all archived tasks. Whenever the user completes a task,"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "he/she will archive it. When archived, the task will be moved from the task list into a separate archive list that stores"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "all completed tasks. If the user wishes to view all of his/her completed tasks, the `listarchived` command will display"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "all of the archived tasks."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Model contains two UniqueTaskLists - tasks and archivedTasks - each containing the tasks and archived tasks respectively."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Given below is an example usage scenario and how the list archived mechanism behaves at each step:"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 1. The user executes the command `listarchived`."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 2. The `listarchived` command raises a new ChangeViewEvent that signals a change to archived view."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 3. MainWindow responds to the ChangeViewEvent with MainWindow#handleChangeViewEvent()."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 4. MainWindow calls Logic#getFilteredArchivedTaskList(). It then creates a new TaskListPanel instance with Tasks in that list."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 5. MainWindow places the new TaskListPanel in the TaskListPanelPlaceHolder. The archived tasks are now displayed."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The following sequence diagram shows how the list archive operation works:"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "image::ListArchivedSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to change what is displayed"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 1 (current choice):** The task list panel\u0027s contents are replaced with a new task list containing archived tasks."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: Only one section of the UI has to be changed."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 2:** Two JavaFX scenes are created. To handle display changes, switch to the corresponding scene."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: It is the proper way of handling change in display with JavaFX."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: Since only one section of the UI needs to be changed, changing the whole scene seems redundant."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//end::listarchivedtasks[]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::sorting[]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Sort tasks"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The sorting feature enables tasks to be displayed in the order of deadline date and priority."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "This feature applies to all tasks except archived tasks."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Sorting feature does not require any user input command."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Whenever the tasks are listed, they are always listed according to deadline date, then priority. Our application offers"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "3 priority levels from 1 to 3, 3 is the highest priority and 1 is the lowest. +"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Assume there are two tasks in a task list, task A and task B. Given below is the scenario when"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "task list is retrieved from schedule planner using any kind of `list` command and how the sorting mechanism"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "behanves."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `UniqueTaskList#sorted()` is called and `Task#compare()` is parsed in as comparator."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `Task#compare()` calls Date.compare(), which compares the deadline date of task A and task B."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. If task A has earlier deadline date than task B, the order will be task A followed by task B, and vice versa."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. If task A and task B have the same deadline date,"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`Priority#compare()` is then called, which compares priority of task A and task B."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "... If task A has higher priority than task B, the order will be task A followed by task B and vice versa."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "... If task A and task B have the same priority, then `Name#compare()` is called,"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "which compares the task name of A and B according to JAVA `compareTo()` method of `String` class. +"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is a sequence diagram of the sorting feature."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".Sequence diagram of sorting feature."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::Sorting.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How should sorting be executed"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 1 (current choice): ** Automatically sort tasks whenever tasks are listed. In other words,"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "whenever tasks are shown on UI, they are sorted according to deadline and priority."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: The user experience is better using this approach,"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "         because tasks are always listed in the order of deadline and priority."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "         The code required is less than Alternative 2 as well."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: The performance of the application may be affected if the task list size is significantly large,"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "         because the task list has to be traversed and sorted before displaying on UI. Of course considering actual"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "         use case, such performance issue should be negligible."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 2: ** Implement sort command exclusively for sorting tasks. For example, use command `sort tasks`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "to obtain sorted list of all tasks, and `sort archived` for sorted list of archived tasks."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: We do not have to worry about performance issue."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: Users have to type command `sort` every time, which is apparently not so user-friendly."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::sorting[]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::tags[]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Managing Tags Using Category"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The category feature enables users to organize their tags. Users can create category and"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "save relevant tags inside category. There are two default categories in schedule planner,"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "category `Modules` and category `Others`. These two default categories cannot be renamed or"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "deleted, but user have full freedom to rename or delete other categories added by themselves."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Each category has a unique name, and contains a list of tags. The list of tags is implemented"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "using UniqueTagList, which does not allow duplicates, in other words, tags with same name."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is a snippet of implementation of UniqueTagList:"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Checks if tags are unique..."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is a snippet of implementation of category:"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    //Two attributes, name and tag list"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private UniqueTagList tags;"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    ///Other implementation..."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Schedule Planner contains a list of cateogry list, implemented using `UniqueCategoryList`."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`UniqueCategoryList` is a list used to save categories which does not allow duplicates."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Any two categories with same name are considered identical. Given below is a snippet"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "its implementation:"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class UniqueCategoryList implements Iterable\u003cCategory\u003e {"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean contains(String name) {"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Checks whether this category name has been used..."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private boolean categoriesAreUnique(List\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Checks whether there are duplicate categories..."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    //Other implementation..."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is an example usage scenario and how the category mechanism behaves at each step: +"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Step 1. User enters command `addcat c/Game list` to add a category named `Game list`."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". The `addcat` command is executed. `AddCategoryCommand#execute()` calls `Model#addCategory()`."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `Model#addCategory()` calls `VersionedSchedulePlanner#addCategory()`."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `SchedulePlanner#addCategory()` then calls `UniqueCategoryList#add()`."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `UniqueCategoryList#add()` checks if"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "the existing category list contains any category with identical name as new category, if exists, `DuplicateCategoryException()`"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "is thrown; if not, new category is created and added to category list. +"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is the sequence diagram of add category command which explains how the mechanism works:"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".Sequence Diagram of Add Category Command"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::AddCategoryCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "When user is adding tasks using unspecified tags (tags that have never been added to any category),"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "the tags will be automatically added to default category `Others`."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Step 2. User enters command `addtag c/Game list t/Zelda` to add tag `Zelda` into category `Game list`."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". The command string is first passed to `AddTagCommandParser`, which parses string `Zelda` to tag (let us call it `tagZelda`)"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "and creates `AddTag` command."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". The command is then executed. `AddTagCommand#execute()` calls `Model#addTag()` and passes"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " `tagZelda` and string `Game list` as parameter."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " . `Model#addTag()` calls"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`VersionedSchedulePlanner#addTag()`, passes in `tagZelda` and string `Game list` as parameter."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `VersionedSchedulePlanner#addCategory()` then calls"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`UniqueCategoryList#getCategory()`, passing in string `Game list` as parameter and obtains corresponding category"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "(let us call it `categoryGameList`)."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `Category#addTag()` is then called with parameter `categoryGameList` to add tag `tagZelda` to category `categoryGameList`."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "If there already exists a tag named `Zelda` in UniqueTagList of category `categoryGameList`, exception `DuplicateTagException`"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "is thrown. +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is the sequence diagram of add tag command."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".Sequence Daigram of Add Tag Command"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::AddTagCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Step 3. User enters command `editcat c/Game list c/Reading list` to rename category from `Game list` to `Reading list`."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `EditCategoryCommandParser` creates `EditCategoryCommand`."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "When `EditCategoryCommand` executes, it calls `Model#editCategory()` and passes in string `Game list` and string `Reading list`"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "as parameter."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `Model#editCategory()` calls `VersionedSchedulePlanner#editCategory()` with parameter"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " string `Game list` and string `Reading list`."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `VersionedSchedulePlanner` then calls `UniqueCategoryList#setCategory()`"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "to obtain the category named `Game list` (let us call it `categoryGameList`) and create a new category with"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "name `Reading list` and same tag list as category `categoryGameList`, replace category"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`categoryGameList` with this new category."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Below is a snippet of implementation of `UniqueCategoryList#setCategory()` used here:"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setCategory(String originalName, String newName) {"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Obtain the category with name \"Game list\""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category oldCategory \u003d getCategory(originalName);"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Creat a new category which is identical to original category except name"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category newCategory \u003d new Category(newName, oldCategory.getUniqueTagList());"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.set(internalList.indexOf(oldCategory), newCategory);"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is the sequence diagram of edit category command:"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Sequence Diagram of Edit Category Command"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::EditCategoryCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Step 4. User enters command `removecat c/Reading list` to remove the category named `Reading list`. Let us call this"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "category `categoryReadingList`."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `RemoveCategoryCommandParser` creates `RemoveCategoryCommand`."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". When `RemoveCategoryCommand` executes, it calls `Model#removeCategory()` and passes in string `Reading list` as parameter."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `Model#removeCategory()` calls `VersionedSchedulePlanner#removeCategory()` with parameter string `Reading list`."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". `VersionedSchedulePlanner` then calls `UniqueCategoryList#removeCategory()` to obtain category named `Reading list`"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "(let us call it `categoryReadingList`) and remove it."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". After `categoryReadingList` is removed, its tag list is removed as well. For example, if user has added tag `Zelda` only in"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "category named `Reading list`, then after removing this category, tag `Zelda` will be lost from schedule planner. +"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is the sequence diagram of remove category command:"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".Sequence Diagram of Remove Category Command"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::RemoveCategory.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Besides adding tag, renaming (editing) and removing, we support clearing category as well."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Clear category command clears the tags list of selected category."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Mechanism of clearing category is very similar to renaming (editing) category."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`Model#clearCategory()` calls `VersionedSchedulePlanner#clearCategory()`, which then initialize a new empty"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "category with name `\"Modules\"`."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Below is a code snippet of `VersionedSchedulePlanner#clearCategory()`:"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void clearCategory(String name) {"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.categories.setCategory(name, new Category(name));"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Below is a code snippet of #UniqueCategoryList#setCategory()` used here, which is slightly different from"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "what is used in editing category:"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setCategory(String originalName, Category newCategory) {"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category oldCategory \u003d getCategory(originalName);"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.set(internalList.indexOf(oldCategory), newCategory);"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "----"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "We omit the sequence diagram here because of its similarity to edit category command."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store and manage tags"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 1 (current choice):** Store Categories as `UniqueCategoryList` and allow users to"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "add tags to categories. There will be no `UniqueTagList` directly managed by schedule planner. All tags"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "are saved under UniqueTagList under individual Category. Because our application is catered for university"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "students, we set two default categories, `Modules` and `Others`."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: We allow users more freedom to manipulate with their tags and categorize their tags."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "User can add one tag to several categories, and the tags saved under different categories do not interfere with each other. This is the most"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "user-friendly design we can think of so far."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: The implementation is more complicated than Alternative 2. Besides, this mechanism requires more"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "commands to operate, which could be harder for user to remember."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Alternative 2:** Store tags in `UniqueTagList` directly managed by schedule planner."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The schedule planner has two tag lists, one is `Modules` and another one is `Others`."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Pros: It is easy to implement, and the operation requires less commands."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Cons: User has less freedom in managing tags. This design is less user-friendly than"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Alternative 1."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::tags[]"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//tag::displaytagsinsidebar[]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d Display Tags in Sidebar"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Whenever the user tags a task with a new tag, the tag will be added to the sidebar panel. The user will be able to view"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "all of the tags he/she has used to categorize tasks. Entering the command tags c/CATEGORY will expand the tab for the specified category to show all tags listed under that category."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Every time any category or tag is changed in the Student Schedule Planner, it raises a SchedulePlannerChangedEvent. The UI will then handle that event and update the side bar panel with the new version of categories and tags."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Given below is an example usage scenario and how the schedule planner behaves at each step:"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 1. The user executes command `addtag c/Modules t/CS2100`."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 2. The `addtag` command updates the model with the new tag and raises a new SchedulePlannerChangedEvent."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 3. SidebarPanel responds to the SchedulePlannerChangedEvent with SidebarPanel#handleSchedulePlannerChangedEvent()."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 4. The Accordion containing all the categories and tags is cleared."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 5. The Accordion is filled with the new list of updated categories and tags."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 6. The user executes command `tags c/Modules`."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 7. The ShowTagsCommand raises a new ShowTagsRequestEvent(\"Modules\")."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 8. SidebarPanel responds to the ShowTagsRequestEvent with SidebarPanel#handleShowTagsRequestEvent()."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 9. The TitledPane with the matching name \"Modules\" is expanded to display all the tags listed under the Modules category."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Below is a code snippet showing how the SidebarPanel handles a ShowTagsRequestEvent:"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "----"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "@Subscribe"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void handleShowTagsRequestEvent(ShowTagsRequestEvent e) {"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String catName \u003d e.getCategory();"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ObservableList\u003cTitledPane\u003e titledPanes \u003d accordion.getPanes();"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        for (TitledPane titledPane : titledPanes) {"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            if (titledPane.getText().equals(catName)) {"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                accordion.setExpandedPane(titledPane);"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "----"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the tags on UI"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 1 (current choice):** Clear all the TitledPanes and add new TitledPanes accordingly."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: No matter which category or tag is changed, or what type of change (ie. delete, add, or edit), this change can be handled by the same method each time."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: It is redundant to clear everything and replace them with new TitledPanes."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 2:** Handle different kinds of changes to the category or tag lists."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: It is a lot faster to only change the TitledPane that is affected."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: There are too many cases for how the lists can be changed. (ie. a different change is needed for each of these cases: category is deleted/edited/created/cleared, or a tag is deleted/added)"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//end::displaytagsinsidebar[]"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//tag::progressbar[]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d Display Progress Bars"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The progress bars for today\u0027s progress and this week\u0027s progress at the bottom reflect the percentages automatically when the schedule planner is changed in any way."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Whenever the user makes a change in the schedule planner, for example add, delete, or archive a task, it raises a new SchedulePlannerChangedEvent."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "UI part ProgressBarPanel will handle this event and update the values for both today and this week\u0027s progress bars."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Given below is an example usage scenario and how the progress bar mechanism behaves at each step:"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 1. User archives a Task due today."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 2. A new SchedulePlannerChangedEvent is raised."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 3. ProgressBarPanel handles the event with ProgressBarPanel#handleSchedulePlannerChangedEvent()."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 4. The taskList is retrieved by SchedulePlannerChangedEvent#data.getTaskList(). The archivedTaskList is retrieved by SchedulePlannerChangedEvent#data.getArchivedTaskList()."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 5. ProgressBarPanel#updateProgressBars(taskList, archivedTaskList) is called."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 6. After filtering through each lists with the DateSamePredicate, their sizes are calculated."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 7. The number of completed tasks for today is the size of the filtered archived list, while the total number of tasks for today is the size of both the filtered archived list and the filtered task list."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 8. The fraction is calculated from completed / total. Then the progress bar for today is set to that fraction."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Step 9. The same is done for this week\u0027s progress bar but the lists are filtered with DateWeekSamePredicate."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The following sequence diagram shows how the progress bar mechanism works:"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "image::ProgressBarSequenceDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the percentages are calculated"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 1 (current choice):** Calculate the percentage of progress by finding the size of filtered task list and filtered archived list."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: It is easy to implement."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: It may be slow if the task list and archived task list are very long."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Alternative 2:** Keep track of number of uncompleted and completed tasks in new Objects called Day and Week."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Pros: It is much faster to calculate the percentage compared to filtering each task list by a predicate then calculating its size."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Cons: The Day and Week objects must be updated for a majority of the commands the app supports. If I had more time, I would have been able to implement this fully."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "//end::progressbar[]"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "We used asciidoc for writing documentation."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format:"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The most reliable method is Method 3. The first two methods might fail some GUI tests due to"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include:"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `ssp.scheduleplanner.ui` package."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "..  _Unit tests_ that target the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `ssp.scheduleplanner.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "..  _Integration tests_ that check the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `StorageManagerTest`"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "..  Hybrids of unit and integration tests. These tests check multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `LogicManagerTest`"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Here are the steps to create a new release:"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/ssp/scheduleplanner/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "A project often depends on third-party libraries. For example, Schedule Planner depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than the following alternatives: +"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "a. Including those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "b. Requiring developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* have a need to manage their schedules for daily tasks"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* have a want to view and be reminded of important things"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* be able to set priority level on their schedule"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* prefer typing over mouse input"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* want a customizable schedule planner"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Value proposition*: Student Scheduler Planner manages schedules faster than a typical mouse/GUI driven"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " app yet retains some GUI interface to allow users to have an easier view."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |add task to to-do list |keep track of tasks to do"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |view tasks in to-do list |know when the deadlines of my tasks are"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |modify tasks in to-do list |adjust or change my tasks according to my schedule"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |delete completed tasks in to-do list |keep my to-do list clean and neat"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |view overdue tasks at the main page |take note of the deadlines that I missed and try to make up"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |sort tasks by priority |know what tasks I should do first"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |view tasks for today |have a study/life plan for this day"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |view tasks for next 7 days |have a relatively clear plan of this week"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "|`* * *` |student |view tasks for the rest of the month |view my schedule for the month"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "|`* * *` |student |search my tasks by name |find specific tasks easily"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "|`* * *` |student |search my tasks by tags |find specific tasks easily"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |view all commands |to guide me so that I could use the application"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |view a calendar of all to-do tasks |have an overview of all the tasks to do"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |view a history of all my commands in user-friendliness format |view what changes I had made before"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* * *` |student |clear the screen |have my screen interface cleaned of commands and result"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "|`* *` |student |sort tasks by tags |tag my tasks"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* *` |student |sort tasks by category |categorise my tasks"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* *` |student |create a \"workshop\" list |record all the workshops that I have signed up"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* *` |student |customise the theme of the student schedule planner |personalise how my student schedule planner looks like"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* *` |student |undo my command |correct my mistake"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* *` |student |redo my command |correct my accidental \"undo\""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`* *` |student |add and view subtasks under each task |know specifically what tasks requires"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "E.g CS2103T Project: Write User guide, Review Pull Requests, Peer Evaluation)"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`*` |student |add my tasks that are non-school related |have a schedule mixed with both school and non-school related tasks"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`*` |student |list my tasks that are non-school related |view my upcoming schedule of non-school related tasks"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`*` |student |update my tasks that are non-school related |update my upcoming schedule of non-school related tasks"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`*` |student |delete my non-school related tasks if they are done |update my upcoming schedule of non-school related tasks"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|`*` |student |search for my non-school related tasks |to find a particular non-school related tasks"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::usecase[]"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "(For all use cases below, the *System* is the `Student Schedule Planner` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::usecase[]"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: Add Task"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "1.  User requests to add task into Student Schedule Planner."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "2.  Student Schedule Planner adds the exam into task list."
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 1a. The add Task command did not follow the correct format."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: List Task"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "1.  User requests to view task list from Student Schedule Planner."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "2.  Student Schedule Planner display the task list."
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 1a. The list task command did not follow the correct format."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 2a1. The list is empty."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: Modify Task"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "1.  User requests to list task list from Student Schedule Planner."
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "2.  Student Schedule Planner display the task list."
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "3.  User request to edit a specific task in the list."
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "4.  Student Schedule Planner updates the task."
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 1a. The list task command did not follow the correct format."
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 2a1. The list is empty."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 3a. The Modify task command did not follow the correct format."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 3a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case resume at step 3."
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Task"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "1.  User requests to list task list from Student Schedule Planner."
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "2.  Student Schedule Planner display the task list."
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "3.  User request to delete a specific task in the list."
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "4.  Student Schedule Planner delete the task."
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 1a. The list task command did not follow the correct format."
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 2a1. The list is empty."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 3a. The Delete task command did not follow the correct format."
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 3a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 3b. The task to be deleted does not exist."
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 3b1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: Search Task"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "1.  User requests to search a specific task by its name from Student Schedule Planner."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "2.  Student Schedule Planner filter the task by the given parameter."
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "3.  Student Schedule Planner display the filtered task."
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 1a. The search task command did not follow the correct format."
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 3a. The filtered task list is empty and thus display empty list."
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::usecasefilter[]"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Use case: Filter Tasks according to Tags (Inclusive)"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1.  User requests to filter tasks by its tags from Student Schedule Planner."
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "2.  Student Schedule Planner filters the tasks with tags entered by user."
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "3.  Student Schedule Planner displays the filtered tasks."
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 1a. The filter task command did not follow the correct format."
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 3a. The filtered task list is empty and thus displays an empty list."
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Use case: Filter Tasks according to Tags (Exclusive)"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1.  User requests to strictly filter tasks by its tags from Student Schedule Planner."
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "2.  Student Schedule Planner strictly filters the tasks with tags entered by user."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "3.  Student Schedule Planner displays the strictly filtered tasks."
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 1a. The filterstrict task command did not follow the correct format."
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 3a. The strictly filtered task list is empty and thus displays an empty list."
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::usecasefilter[]"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: List tasks due today"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1.  User requests to view tasks due on current date from the Student Schedule Planner."
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "2.  Student Schedule Planner filters tasks by current date."
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "3.  Student Schedule Planner displays list of tasks due on current date."
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 1a. The `listday` command did not follow the correct format."
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 3a. The filtered task list is empty and thus displays an empty list."
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: List tasks due until this Sunday"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1.  User requests to view tasks due from the current date to Sunday from the Student Schedule Planner."
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "2.  Student Schedule Planner filters tasks from current date to Sunday."
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "3.  Student Schedule Planner displays list of tasks due from current date to Sunday."
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 1a. The `listweek` command did not follow the correct format."
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 3a. The filtered task list is empty and thus displays an empty list."
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::usecaselistmonth[]"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Use case: List tasks due until the end of the month"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1.  User requests to view tasks due from the current date until the end of month from the Student Schedule Planner."
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "2.  Student Schedule Planner filters tasks from the range of current date until end of month"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "3.  Student Schedule Planner display list of tasks due from current date until end of month."
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 1a. The `listmonth` command did not follow the correct format."
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* 3a. The filtered task list is empty and thus displays an empty list."
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::usecaselistmonth[]"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Use case: Generate academic calendar weeks"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1.  User keys in a specific date to generate the academic calendar weeks."
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "2.  Student Schedule Planner generates the academic calendar weeks."
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "3.  Student Schedule Planner saves the academic calendar weeks."
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "4.  Student Schedule Planner displays to user the command result."
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "5.  User launches the Student Schedule Planner at any time after Steps 1 - 4."
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "6.  Student Schedule Planner retrieves data saved."
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "7.  Student Schedule Planner displays the updated application title based on the retrieved data."
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 1a. The specific date did not follow the correct format."
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 1a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 3a. The data could not be saved."
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 3a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* 5a. The data could not be retrieved."
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** 5a1. Student Schedule Planner shows an error message."
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".  The app should work on most Mainstream OS as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ".  Each command execution time should not take more than 3 seconds."
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[[MSS]] MSS::"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Main Success Scenario (MSS) is the steps of a scenario to be followed to accomplish the objective goal."
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[[NUS-academic-calendar]] NUS academic calendar::"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Refers to the academic calendar used by National University of Singapore. This product references only 17 weeks of"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "the calendar (Week 1 to Examination Week). +"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Referenced from: http://www.nus.edu.sg/registrar/info/calendar/AY2018-2019.pdf"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::appendix[]"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::appendix[]"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Adding a task"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ". Adding a task to the task list"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `add n/cs2100 d/161118 p/3 v/home` +"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: A new task is added and reflected in the panel on the bottom right of `UI`. Status bar is updated."
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `add n/cs2100 d/161118 p/4 v/home` +"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: No task is added. Error details shown in status message. Status bar remains the same."
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `add n/cs2100 d/999999 p/3 v/home` +"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: No task is added. Error details shown for date field."
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d Adding a recurring task"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ". Adding a recurring task to the task list"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ".. Test case: `repeat r/5 i/1 n/go to school d/030118 v/NUS p/3` +"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "   Expected: Five tasks with the same name, priority, venue, but with differing dates of 3, 4, 5, 6, 7 Nov 2018 are added to the list."
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "   The tasks are reflected in the task list panel. Status bar is updated."
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ".. Test case: `repeat r/17 i/1 n/sleep d/010101 v/home p/1` +"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "   Expected: No tasks are added. Error details shown in status message. Status bar remains the same."
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ".. Test case: `repeat r/2 i/0 n/sleep d/010101 v/home p/1` +"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "   Expected: No tasks are added. Error details shown in status message. Status bar remains the same."
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d Viewing overdue tasks"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ". Viewing tasks due on dates before the current date"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ".. Test case: listoverdue +"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "   Expected: All tasks with dates before the current date are displayed in the task list panel. Status bar remains the same."
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Editing a task"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ". Editing a task from the task list"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `edit 1 v/library` +"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: First task is edited. The new venue is library."
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `edit 1 t/` +"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: First task is edited. Any existing tags would be removed."
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `edit 1 d/999999` +"
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: First task is not edited. Error details shown in status message. Status bar remains the same."
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Archiving a task"
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Archiving a task from the task list"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `archive 1` +"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: First task is archived if there exists at least 1 task in your schedule planner."
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `archive 0` +"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: No task is archived. Error details shown in the status message. Status bar may grow to the right"
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   depending on the deadline date and current system time."
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Managing tags and categories"
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Adding category"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `addcat c/Modules` +"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: No category is added, because `Modules` is a default category and it already exists in schedule planner."
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Error details shown in status message."
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `addcat c/School` +"
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: If there is no category named `School` in your schedule planner at this time point,"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   category `School` is now added. If there already exists a category named `School` in your schedule planner,"
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   then no category is added. Error details shown in status message."
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Renaming a category"
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `editcat c/Modules c/Work`"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: No category is renamed, because `Modules` is a default category that cannot be renamed."
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Error details shown in status message."
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `editcat c/School c/Work`"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: If there is no category named `School` in your schedule planner at this time point,"
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   no category is renamed. Error details shown in status message. If there exists a category named `School`"
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   in your schedule planner and no category named `Work` in your schedule planner, category `School` is now"
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    renamed to `Work`. If there exists both a category named `School` and a category named `Work`,"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   no category is renamed. Error details shown in status message."
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Removing a category"
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `removecat c/Modules`"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: No category is added, because `Modules` is a default category that cannot be removed."
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Error details shown in status message."
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `removecat c/School`"
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expcected: If there exists a category named `School`, it is now removed from schedule planner."
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   If this category does not exist, no category is removed. Error details shown in status message."
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Clearing a category"
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `clearcat c/Modules`"
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: Tag list under category `Modules` is successfully cleared. Now category `Modules`"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   contains no tags."
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `clearcat c/School`"
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: If category `School` exists in your schedule planner, tag list under category `School` is successfully cleared. Now category `School`"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   contains no tags. If this category does not exist, no category is cleared. Error details shown in status message."
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ". Adding a tag to a category"
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `addtag c/Modules t/CS2101`"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: If `Modules` category currently does not contain tag `CS2101`,"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   tag `CS2101` is successfully added to category `Modules`. If `Modules` category already contains"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   tag `CS2101`, no tag is added to this category. Error details shown in status message."
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ".. Test case: `addtag c/School t/Lecture`"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   Expected: If category `School` exists in your schedule planner, the result is similar to above."
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "   If category `School` does not exist, no tag is added to any category. Error details shown in status message."
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: First task is deleted from the list. Details of the deleted contact shown in the status message. Timestamp"
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   in the status bar is updated."
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Task Monitoring System"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1. Generating academic calendar weeks data"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Prerequisites: Only dates from 21st century in `DDMMYY` format is considered valid date."
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `firstday 161118 12` +"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   Expected: No academic calendar weeks data is generated. Error details shown in status message. Status bar remains"
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   the same."
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `firstday 999999` +"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   Expected: No academic calendar weeks data is generated. Error details shown in status message. Status bar remains the"
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   same."
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `firstday 161118` +"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   Expected: No academic calendar weeks data is generated. Error details shown in status message. Status bar remains"
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   the same."
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `firstday 130818` +"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   Expected: Academic calendar weeks data is generated and saved. Details shown in status message to inform user. After"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "   relaunching the application, the application title will be appended with current week\u0027s description."
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "2. Viewing tasks due today/this week"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `listday` +"
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: All task(s) that match the current system date will be reflected in the panel on the bottom right of"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   `UI`."
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `listweek` +"
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: All task(s) that match the date from the current system date until the closest Sunday will be"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   reflected in the panel on the bottom right of `UI`."
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::manualtestfilter[]"
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Filtering Tasks"
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "1. Viewing tasks due this month"
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `listmonth` +"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: All task(s) that match the current system date until the end of the month will be reflected in the task"
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   list panel in the `UI`."
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `filter tutorial`"
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: All tasks that contain the tag `tutorial` will be reflected in the task list panel in the `UI`."
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `filter tutorial CS2100`"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: All tasks that contain EITHER `tutorial`, `CS2100`, OR BOTH tags, will be  reflected in the task list"
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   panel in the `UI`."
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `filterstrict tutorial`"
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: All tasks that contain the tag `tutorial` will be reflected in the task list panel in the `UI`. Similar"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   to `filter tutorial`."
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".. Test case: `filterstrict tutorial GEH1034`"
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   Expected: All tasks that contain BOTH `tutorial` and `GEH1034` tags will be reflected in the task list panel in"
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   the `UI`"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::manualtestfilter[]"
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d Testing GUI"
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "1. Displaying categories and tags in the sidebar"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `clear` +"
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   Expected: The default categories \"Modules\" and \"Others\" are be displayed in the sidebar."
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `addcat c/School` +"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   Expected: The new category \"School\" is displayed in the sidebar below \"Modules\" and \"Others\"."
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `tags c/Modules` +"
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   Expected: The Modules pane will be expanded to reveal nothing is listed underneath."
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `addtag c/Modules t/CS2100` followed by `tags c/Modules` +"
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   Expected: The Modules pane will be expanded to reveal \"CS2100\" underneath."
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "2. Showing progress"
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: add 5 tasks due on the current date and archive one of them."
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   Expected: Both progress bars for today and this week are 20% filled."
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `progresstoday` +"
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   Expected: Status message displays that user has completed 20.00% of tasks for today."
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".. Test case: `progressweek` +"
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   Expected: Status message displays that user has completed 20.00% of tasks for this week."
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 409,
      "Woodnsuns": 371,
      "thaddeuslzy": 354,
      "-": 718,
      "hotarumin": 226,
      "park-sang-jun": 107
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// Quick Guide for ASCIIDocs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// [Tip] : Nifty tricks"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// [Important] : Don\u0027t forget . . ."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// [Warning] : Watch out for . . ."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// [Caution] : To ensure . . ."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// Italics : _(word)_"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// Bold : *(word)*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Student Schedule Planner - User Guide"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T12-3/main/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "By: `Team T12-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "This User Guide provides a comprehensive walkthrough for new-users of the Student Schedule Planner (SSP). This"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "walkthrough includes instructions on how to install the latest version of java, as well as downloading and running"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "the SSP application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Student Schedule Planner (SSP) is a desktop application created by Team T12-3. It is a planner customised for university"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "students, and it aims to help university students manage their time effectively."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "SSP incorporates features that streamline the creation, organisation, and finding of tasks. In addition, it"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "allows the user to keep track of the current academic week, and has a progress tracking feature, which displays the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "user\u0027s progress."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Instead of utilising a conventional Graphical User Interface(GUI). SSP is optimised for users who prefer typing out"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "their commands. This application has the potential to be much faster than regular planner applications, especially for"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "users who are proficient in typing. Move on to the \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".  Install Java `9` if you do not yet have it installed. It is available"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " https://www.oracle.com/technetwork/java/javase/downloads/index.html[here]. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The application may not run correctly on Java `10` or Java `11`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".  Download the latest `studentscheduleplanner.jar` link:https://github.com/CS2103-AY1819S1-T12-3/main/releases[here]."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".  Copy the file to the folder that you want to use as the home folder for your planner."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ".Main menu for the SSP application upon starting the app."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ".  Type a command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "e.g. typing [blue]`help` and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*Understanding the command format*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "- Parameters can be in any order: +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`n/NAME d/DEADLINE`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`d/DEADLINE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "n/NAME` is also acceptable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* Words in [blue]`UPPER_CASE` represent parameters to be entered by the user: +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`add n/NAME`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`n/NAME` represents the task name which the user inputs, such as [blue]`n/CS2103 Tutorial`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* Items in square brackets are optional: +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`n/NAME t/[TAG]`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The parameter [blue]`t/[TAG]` is optional, which means [blue]`n/CS2103 tutorial"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "t/CS2100`, and [blue]`n/CS2103 tutorial` are both valid commands."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times: +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`t/[TAG]...`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Allows for multiple tags to be input: [blue]`t/tutorial`,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " [blue]`t/tutorial t/CS2100` etc."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Please take note that naming is case-sensitive in Student Schedule Planner. For example, `cats` and `Cats` are"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "considered different. This applies to task, tag as well as category. Only [blue]`find` and [blue]`filter` commands"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "are case-insensitive for keywords."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Viewing Help"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Opening the user guide page is as follows. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`help` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Adding a Task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Add a task to the schedule planner. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`add n/NAME p/PRIORITYLEVEL t/[TAG] d/DEADLINE v/VENUE` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`add n/exam p/3 t/CS3241 d/101018 v/mpsh1`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Adds a task named `exam` with priority level `3`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "tag `CS3241` and deadline of `101018` , venue at `mpsh1`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The priority level must be a number between 1 to 3, where 3 denotes highest priority."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Duplicate tasks are not allowed in Student Schedule Planner; two tasks are considered identical if they"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "have same name, deadline date, tags, and venue. If two tasks have same attributes except for priority,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "they are still considered as identical."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Please take note that task name is case-sensitive. For example, task name `study` and `Study` are"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "considered different."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The priority value must be a number between 1 to 3, where 3 denotes highest priority."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "As we have implemented auto-sorting, if you add a task, it might get reordered in the task"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "list. For more details about auto-sorting, please refer to \u003c\u003cSorting Tasks by Deadline Date and Priority\u003e\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Name, Priority, Deadline, and Venue fields are compulsory, and therefore required for every task. Tags are optional."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "When you add tasks with new tags (tags that have not been added to any existing categories),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "these tags will be automatically added to default category `Others`. For details about Category and Tags, refer to"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003c\u003cAdding a Category\u003e\u003e and \u003c\u003cAdding a Tag to a Category\u003e\u003e."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "When you add new tasks with new tags (tags that have not been added to any existing categories),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "these tags will be automatically added to default category `Others`. For detailed guide about category and tags,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "please refer to \u003c\u003cAdding a Category\u003e\u003e and \u003c\u003cAdding a Tag to a Category\u003e\u003e."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// tag::addrepeat[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d Adding a Recurring Task"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Add tasks that occur in regular intervals. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`repeat r/REPEATS i/INTERVAL n/NAME p/PRIORITYLEVEL t/[TAG] d/DEADLINE v/VENUE` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`repeat r/4 i/7 n/CS2103T Tutorial p/3 t/Tutorial d/111018 v/COM1-0210`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Adds 4 tasks named [blue]`CS2103T Tutorial` with priority level [blue]`3`,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "tag [blue]`Tutorial`, venue at [blue]`COM1-0210`, and deadlines on the 11th October 2018, 18th October 2018, 25th October 2018, and 1st November 2018."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below illustrates the SSP before and after the above command was entered:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "image::beforeafteraddrepeat.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The number of repeats should be a positive integer (≥1). Setting the repeat as 1 has the same"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "effect as using the `add` command."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The number of repeats should be an integer that is greater or equals to 1. Setting the repeat as 1 has the same effect as using the [blue]`add` command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Use this command to schedule tasks that you carry out regularly."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "The maximum number of repetitions is 15."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Tasks whose deadlines go beyond 2099 will have their deadlines set to the 21st century instead. For example, a task"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "created by the AddRepeatCommand that with the deadline on 1st January 2101 will instead have the  deadline set to 1st"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " January 2001 instead."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// end::addrepeat[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Editing a Task"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Edit an existing task in the schedule planner. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`edit INDEX n/[NAME] p/[PRIORITYLEVEL] t/[TAGS]... d/[DEADLINE] v/[VENUE]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`edit 3 p/1 d/121019` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The task at index `3` will have it\u0027s priority value changed to [blue]`1` , and its deadline is changed to"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`121019`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`INDEX` refers to the number shown beside each task name in the displayed task list. Refer to the task"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "according to its index number."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The [blue]`INDEX` *must be a positive integer* (≥1)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` refers to the index number shown in the displayed task list. Refer to the task according to the index number."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "At least one of the optional fields must be provided. Existing values of provided field"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "will be updated to the input values."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Duplicate tasks are not allowed in Student Schedule Planner; two tasks are considered identical if they"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "have same name, deadline date, tags, and venue. If two tasks have same attributes except for priority,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "they are still considered as identical."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Please take note that task name is case-sensitive. For example, task name `study` and `Study` are"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "considered different."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "As we have implemented auto-sorting, if you edited `date` or `priority`, the task might get reordered in the task"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "list. For more detailed guide about auto-sorting, please refer to \u003c\u003cSorting Tasks by Deadline Date and Priority\u003e\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Existing tags of a task will be removed when its tag is edited. If input is"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`edit 3 t/project`, then the resulting tag(s) of task 3 will be `project` only."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "To remove all tags of an existing task e.g for task with index number `3`, you can type [blue]`edit 3 t/`, all the"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "tags of the task of index number `3` will be removed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Deleting a Task"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Delete the specified task from the schedule planner.+"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`delete INDEX`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`delete 3` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Task with index `3` will be deleted from schedule planner."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` refers to the index number shown in the displayed task list. Refer to the task according to the index number."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`INDEX` refers to the index of the task in the displayed task list. Refer to the task according to its index"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "number."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` *must be a positive integer*(≥1)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Use the [BLUE]`list` command to find out the index of the task to be deleted."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::archivetask[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Archiving a Task"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Archives the specified task from the schedule planner. Once a task is archived, it will be hidden from task list. You can"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "view archived tasks in archived task list using [blue]`listarchived` command. For detailed guide regarding"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "viewing archived tasks, please refer to \u003c\u003cViewing Archived Tasks\u003e\u003e. +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`archive INDEX`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`archive 1` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Task with index `1` is removed from the task list. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Below is the partial screenshots of task list before and after executing the archive command."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::archiveTask.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` refers to the index number shown in the displayed task list. Refer to the task according to the index number."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`INDEX` refers to the index of the task in the displayed task list. Refer to the task according to its index"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "number."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The `INDEX` *must be a positive integer*(≥1)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Use the [blue]`listarchived` command to find out the index of the task to be archived."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "View \u003c\u003cViewing Archived Tasks\u003e\u003e for detailed guide."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Any archived tasks with deadline date earlier than 2 weeks before current date will be"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "deleted from schedule planner when the application relaunches."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::archivetask[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "// tag::listarchived[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Viewing Archived Tasks"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "List all archived tasks. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`listarchived`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Step 1: [blue]`archive 1` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Below is the screenshot of task list that will appear on screen after step 1."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::archiveTask.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Step 2: [blue]`listarchived`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Below is the screenshot of archived task list that will appear on screen after step 2."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::listArchive.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "// end::listarchived[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Viewing All Tasks"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Listing all tasks in the schedule planner. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`list`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// tag::listoverdue[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Viewing Overdue Tasks"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Listing all the overdue tasks. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`listoverdue`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`listoverdue` (on the date 111118)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Lists tasks due on 101118 and before."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The following diagram illustrates the SSP before and after [blue]`listoverdue` was entered:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "image::beforeafterlistoverdue.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "// end::listoverdue[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// tag::listday[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Viewing Tasks Due Today"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "List tasks due on the current date. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`listday`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// end::listday[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// tag::listweek[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Viewing Tasks Due This Week"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "List tasks due from current date till the end of the current week. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`listweek`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The following diagram illustrates the SSP when [blue]`listweek` is executed on the date `021118`. Only tasks until"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`041118`, which is the closest Sunday, will be displayed."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::ListWeekCommand_UG_Before_After.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// end::listweek[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::listmonth[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Viewing Tasks Due This Month"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "List tasks due from current date till the end of the current Month. +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`listmonth`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`listmonth` (on the date 111118) +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Tasks from 111118 to end of the month (301118) are listed."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The following diagram illusatrates the SSP when [blue]`listmonth` is executed on the date `111118`. Only tasks until"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "`301118`, which is the last day of the month, will be displayed."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::ListMonth_Before_After.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Tasks from 02 Nov \u002718 to end of the month (30 Nov \u002718) are listed."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::listmonth[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::sorting[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Viewing Tasks in the Order of Deadline Date and Priority"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "All tasks are automatically loaded in the order of deadlines except for archived tasks."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The order of tasks first depends on deadline date, then priority. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is an example of two tasks with different deadline dates."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Task `Do CS2030 lab` is listed before task `Self study` because it has"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "earlier deadline date."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::sortingdate.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Sorting Tasks by Deadline Date and Priority"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "All tasks are sorted chronologically by default. The order of tasks first depends on deadline date, then priority. +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Given below is an example of two tasks with different deadlines."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Task [blue]`Do CS2030 lab` is listed before task [blue]`Self study` because it has"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "earlier deadline."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::sortingdate.png[width\u003d\"400\" caption\u003d\"Figure 1. \"]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "If two tasks have the same deadline, then the order depends on priority, one that has"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "higher priority will appear before one that has lower priority. 3 is the highest priority, while 1 is the lowest. +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Given below is an example of two tasks with the same deadline dates."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::sortingpriority.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Please take note that archived tasks are not shown in order."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::sorting[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Finding Tasks by Name"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Find tasks whose names match with given keyword. The search is case insensitive, `apples` and  `Apples` both return"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "the same tasks. You can include multiple keywords when using [blue]`find`. [blue]`find CS3230 CS5229` will find all"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "tasks with name containing [blue]`CS3230` or [blue]`CS5229`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`find NAME`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`find tutorial` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "All tasks with `tutorial` in their names are listed."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The keyword must be whole word. +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "E.g for finding [blue]`tutorial`, [blue]`tutorial` must be used, [blue]`tut` or other variations would not be allowed."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The order of the keywords does not matter. For example,  [blue]`find apples buy` and [blue]`find buy apples` both return"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " the"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "same tasks. +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "You can include multiple keywords when using `find`. [blue]`find CS3230 CS5229` will find all tasks with name containing"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`CS3230` or `CS5229`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// tag::filtertags[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Filtering Tasks by Tags (Inclusive)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Filter tasks according to tags inclusively. Tags matching ANY of those entered by the user will be listed. The filter"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " is case insensitive. You may include multiple tags when using [blue]`filter`. For example, [blue]`filter tutorial quiz project`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "will return tasks with tags matching at least one of the specified tags."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`filter TAG [TAG2] ...`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "- [blue]`filter tutorial` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::b-a filter tutorial.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Tasks with the tag `tutorial` are listed."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below illustrates the SSP when [blue]`filter tutorial` is executed."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::b-a filter tutorial.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "- [blue]`filter tutorial cs2100` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Tasks with either [blue]`tutorial`, [blue]`2100` tags, or both, are listed."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below illustrates the SSP when [blue]`filter tutorial cs2100` is executed."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::b-a filter tutorial cs2100.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Tasks with either `tutorial`, `2100` tags, or both, are listed."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The keyword must be a whole word. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "E.g for filtering [blue]`tutorial`, [blue]`tutorial` must be used, `tut` or other variations would not be allowed."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The search is case insensitive. e.g `apples` matches `Apples`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The order of the keywords does not matter. For example,  [blue]`filter tutorial cs2103` and [blue]`filter cs2103"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "tutorial` both return the same tasks. +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Filtering Tasks by Tags (Exclusive)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Filter tasks according to tags exclusively. Tags matching ALL of those entered by the user will be listed. The filter"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " is case insensitive. You may include multiple tags when using [blue]`filter`. For example, [blue]`filter tutorial quiz project`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "will return tasks with tags matching ALL of the specified tags."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`filterstrict TAG [TAG2] ...`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "- [blue]`filterstrict tutorial` +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Tasks with the tag `tutorial` are listed."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below illustrates the SSP when [blue]`filterstrict tutorial` is executed."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::b-a filterstrict tutorial.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "-  [blue]`filterstrict tutorial geh1034` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Tasks with both `tutorial` and `2100` tags are listed."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below illustrates the SSP when [blue]`filterstrict tutorial geh1034` is executed."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "image::b-a filterstrict tut geh.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The keyword must be a whole word. +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "E.g for filtering [blue]`tutorial`, [blue]`tutorial` must be used, `tut` or other variations would not be allowed."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The order of the keywords does not matter. For example,  [blue]`filterstrict tutorial cs2100` and [blue]`filterstrict"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "cs2100 tutorial ` both return the same tasks. +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "// end::filtertags[]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// tag::firstday[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d Generating Academic Calendar"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Generate the entire academic calendar based on the first academic day and stores it in storage."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Currently, the generated academic calendar is based on the academic calender of National University of Singapore"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "(NUS). It may not be compatible with academic calendars from other institutions."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Whenever the application is launched within the academic calendar\u0027s dates, the application title will append that"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "particular week\u0027s description to the title of the application. +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`firstday DDMMYY`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`firstday 130818`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The following diagram illustrates when you execute [blue]`firstday 130818`, and launch the application within 121118"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " - 181118 (Week 13 for NUS academic year 18/19 semester 1), the application title will be appended with \"Week 13\"."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::FirstDayCommand_UG_Before_After.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "There would not be any visible changes upon using the command. The changes are only reflected after relaunching the"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "application."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`DDMMYY` refers to the date format of day, month and year. It must fulfil the following criteria:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "1. `DDMMYY` must only be one set of value such as `130818`. Value such as `130818 200818` or `130818 20`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "will be rejected as they are considered as more than one set of date."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "2. `DDMMYY` must be a valid date within 21st century."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "3. `DDMMYY` must be a Monday."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "// end::firstday[]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::addingcat[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Adding a Category"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Add a new category to the schedule planner."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "You can organize tags by adding tags to relevant categories. For detailed guide about"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "how to add tags to category, please refer to \u003c\u003cAdding a Tag to a Category\u003e\u003e. +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`addcat c/CATEGORY`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`addcat c/Steam shopping list`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::addingcat.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Category name can contain space. For example, `Steam`, `Steam2`,"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`Steam shopping list` are all valid category names. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`Modules` and `Others` are two categories exist by default."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Please take note that category is case-sensitive. For example, category `cats` and category `Cats` are"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "considered different."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Duplicated categories are not allowed in schedule planner. All"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "categories must have different names."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "All non-default categories (categories except `Modules` and `Others` can be removed."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "For detailed guide about how to remove categories, please refer to \u003c\u003cDeleting a Category\u003e\u003e."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "All non-default categories (categories except `Modules` and `Others` can be renamed."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "For detailed guide about how to rename categories, please refer to \u003c\u003cRenaming a Category\u003e\u003e."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::addingcat[]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::addingtag[]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Adding Tags to Categories"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Add a tag to a selected existing category."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`addtag c/CATEGORY t/TAG`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`addtag c/Steam shopping list t/Overwatch`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::addtag.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Duplicated tags are not allowed under same category. +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "For instance, in above example, you cannot add another tag `Overwatch`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "to category `Steam shopping list`. However you can save same tag under multiple categories."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Please take note that naming of tag is case-sensitive. For example, tag name `cat` and `Cat`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "are considered different."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "When you add new tasks with new tags (tags that have not been added to any existing categories),"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "these tags will be automatically added to default category `Others`."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "For how to remove tags from categories, please refer to \u003c\u003cClearing a Category\u003e\u003e."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::addingtag[]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::clearcat[]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Clearing a Category"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Clears all tags saved under selected category."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "After executing this command, the selected category will not contain any tags."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`clearcat c/CATEGORY`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`clearcat c/Modules`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::clearcat.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "When a category is cleared, tags saved in other categories are not affected."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "For instance, in above example, if you have tag `CS2105` in category `Others`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "as well, after clearing category `Modules`, tag `CS2105` will still exist in category"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "`Others`. +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "On the other hand, if tag `CS2105` is only saved under category `Modules`, then after clearing"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "category `Modules`, the tag `CS2105` will be removed from schedule planner."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::clearcat[]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::removecat[]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Deleting a Category"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Delete an existing category from schedule planner."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`removecat c/CATEGORY`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`removecat c/Steam shopping list`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::removecat.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Default categories `Modules` and `Others` cannot be removed. The only operation available for default categories is to delete"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "all tags saved under these two categories."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "For more detailed guide about how to do so, please refer to \u003c\u003cClearing a Category\u003e\u003e."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::removecat[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//tag::editcat[]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Renaming a Category"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Edit the name of an existing category."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`editcat c/ORIGINAL CATEGORY NAME c/NEW CATEGORY NAME`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`editcat c/Steam shopping list c/Reading list`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "image::editcat.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Default categories `Modules` and `Others` cannot be renamed."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Duplicated categories are not allowed in schedule planner. Please make sure the new name for selected category"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "does not overlap with other existing categories in your schedule planner."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "//end::editcat[]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "// tag::showtags[]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Displaying Category Tags"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Show all tags categorised under the specified category. It expands the tab in the sidebar. +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`tags c/CATEGORY`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`tags c/Modules`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::Before-after-showtags.png[width\u003d\"400]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "// end::showtags[]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "// tag::progressbar[]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d Displaying Today\u0027s Progress"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Show the percentage of tasks archived for the day in the command result box and lists the uncompleted tasks for today"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ". The progress bar is also displayed at the bottom left of the window. +"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`progresstoday`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 1: [blue]`listday` +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 2: [blue]`archive 1` +"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 3: [blue]`progresstoday` +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below illustrates the SSP after each of the commands entered above."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::before-after-progresstoday.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d Displaying This Week\u0027s Progress"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Show the percentage of tasks archived from today to the nearest Sunday in the command result box, and lists the"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "uncompleted tasks from today until the nearest Sunday. The progress bar is also displayed at the bottom right of the"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "window. +"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`progressweek`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 1: [blue]`listday` +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 2: [blue]`archive 1` +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 3: [blue]`progressweek` +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The diagram below illustrates the SSP after each of the commands entered above."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "image::before-after-progressweek.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "// end::progressbar[]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Displaying Previous Commands"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Show a list of all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`history`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Undoing Previous Command"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Restore the schedule planner to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`undo`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 1: [blue]`delete 1` +"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 2: [blue]`clear` +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 3: [blue]`undo` (reverses the [blue]`clear` command) +"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 4: [blue]`undo` (reverses the [blue]`delete 1` command) +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Undoable commands are those commands that modify the schedule planner\u0027s content:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`add`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`delete`"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`edit`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`archive`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`clear`"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`addtag`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`addcat`"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`editcat`"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`removecat`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** [blue]`clearcat`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Use the `history` command to decide if you want to undo the previous _undoable_ command."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Redoing the Previous Undo Command"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Reverse the most recent `undo` command. +"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`redo`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 1: [blue]`delete 1` +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 2: [blue]`clear` +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 3: [blue]`undo` (reverses the [blue]`clear` command) +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 4: [blue]`undo` (reverses the [blue]`delete 1` command) +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 5: [blue]`redo` (reapplies the [blue]`delete 1` command) +"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Step 6: [blue]`redo` (reapplies the [blue]`clear` command) +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Clearing Schedule Planner"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Clear all entries from the schedule planner. Default categories `Modules` and `Others` still exists"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " after the command is executed, but they contain no tags. +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`clear`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Exiting the App"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Exit the application. +"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`exit`"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d Saving the Data"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Data in the Student Schedule Planner is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* *Viewing Help* :"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`help` +"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* *Adding Tasks* :"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`add n/NAME p/PRIORITYLEVEL t/[TAG] d/DEADLINE v/VENUE` +"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`add n/do tutorial p/1 t/cs2100 d/121019 v/home` +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* *Adding Recurring Tasks* :"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`repeat r/REPEATS i/INTERVAL n/NAME p/PRIORITYLEVEL t/[TAG] d/DEADLINE v/VENUE` +"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Listing All Tasks** :"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`list`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Editing a Task** :"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`edit INDEX n/[NAME] p/[PRIORITYLEVEL] t/[TAGS]... d/[DEADLINE]` +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`edit 3 p/1 d/121019` +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Finding Tasks by Name** :"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`find NAME` +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`find tutorial` +"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Filter Tasks by Tags (Inclusive)** :"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`filter TAG1 [TAG2]...` +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`filter tutorial ...`"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Filter Tasks by Tags (Exclusive)** :"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`filterstrict TAG1 [TAG2]...` +"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`filterstrict tutorial ...`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Deleting Tasks** :"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`delete INDEX` +"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`delete 1` +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* **Archiving Tasks** :"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`archive INDEX` +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`archive 1` +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Viewing Archived Tasks** :"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`listarchived` +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Viewing Tasks Due Today** :"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`listday`"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Viewing Tasks Due This Termweek** :"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`listweek`"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* **Generating Academic Calendar Weeks** :"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "[blue]`firstday DDMMYY`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "[blue]`firstday 130818` +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Adding a Category**:"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`addcat c/[CATEGORY]`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`addcat c/Game list` +"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Adding a Tag to a Category**:"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`addtag c/CATEGORY t/TAG`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`addtag c/Steam shopping list t/Overwatch`"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Clearing a Category:**"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`clearcat c/CATEGORY`"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`clearcat c/Modules`"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Deleting a Category:**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`removecat c/CATEGORY`"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`removecat c/Steam shopping list`"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Renaming a Category:**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`editcat c/ORIGINAL CATEGORY NAME c/NEW CATEGORY NAME`"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`editcat c/Steam shopping list c/Reading list`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Listing Overdue Tasks** :"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`listoverdue`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Listing Used Tags** :"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`tags c/CATEGORY`"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Displaying Today\u0027s Progress** :"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`progresstoday`"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* **Displaying This Week\u0027s Progress** :"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "[blue]`progressweek`"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Listing Used Commands** :"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`history`"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Undoing previous command** :"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`undo`"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Redoing the Previous Undo Command** :"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`redo`"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Clearing Schedule Planner** :"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`clear`"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* **Exiting the App** :"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "[blue]`exit`"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d\u003d Possible Questions"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Schedule planner folder."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 77,
      "Woodnsuns": 443,
      "thaddeuslzy": 260,
      "-": 119,
      "park-sang-jun": 44,
      "hotarumin": 103
    }
  },
  {
    "path": "docs/team/crimsonang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d Ang Chen Shin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "PROJECT: Student Schedule Planner"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "This portfolio showcases the software engineering skills I acquired during my time of study in National University of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " Singapore (NUS)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Student Schedule Planner* (SSP) is a desktop application created by my team T12-3 for CS2103T module. SSP"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "aimed to aid university students to manage their tasks effectively. It is morphed from an existing product called"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*Address Book (Level 4)*, with constraints such as command-line interface must be the main mode of user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "My contributions to the project included adding *task monitoring system* which consists of `firstday`,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "`listday` and `listweek` commands to aid the users in better monitoring of their tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Major enhancement*: Added *task monitoring system*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** What it does: This feature allows user to know what is the current academic week whenever they launch the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "application within the academic semester. It also allow users to know what tasks they have that are due on the current"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "date or from the current date until the closest Sunday."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Justification: This feature allows user to monitor their tasks easier as they may know that they have certain tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " due on a particular week and could use this to plan their remaining time properly. Users could also easily know what"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "  tasks they have on the current week."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Highlights: This implementation was challenging as it required creating a new `model` and `storage` for saving and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "retrieving the data. It was also tedious and time consuming to conduct both system and manual tests for different"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "dates due to the need to manipulate my device\u0027s system date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Credits to *Stack Overflow* and *The Java™ Tutorials - Oracle Docs*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://stackoverflow.com/questions/1816673/how-do-i-check-if-a-file-exists-in-java[#1],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://stackoverflow.com/questions/156503/how-do-you-assert-that-a-certain-exception-is-thrown-in-junit-4-tests[#2],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://stackoverflow.com/questions/5175728/how-to-get-the-current-date-time-in-java[#3],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://stackoverflow.com/questions/428918/how-can-i-increment-a-date-by-one-day-in-java[#4],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html[#5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dcrimsonang[RepoSense]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Morphed and transformed portions of *Address Book (Level 4)* into current product *Student Schedule Planner* :"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/23[#23],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/31[#31],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/37[#37],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/44[#44]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Managed releases `mid-v1.3` - `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Morphed existing diagrams of the Developer Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/81[#81]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Added `Target User Profile`, `User Stories`, `Use Cases` of the Developer Guide:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/1[#1],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/20[#20]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Removed portion of `SE-EDU` related contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/17[#17]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Contributed to forum discussions:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/nus-cs2103-AY1819S1/forum/issues/132[#132],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/nus-cs2103-AY1819S1/forum/issues/146[#146]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Some parts of `listweek` command and `ListWeekCommandTest` test cases I added was adopted by a classmate:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/125/commits/f9702dcbc8cecf2d6d47e306479c43d713bd018e[#125],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/212/commits/4c1c08d6cb9d863283987dc7d0b7c74e9027d8b6[#212]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Some parts of `ListDayCommandTest` test cases I added was adopted by a classmate:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/201/commits/c8b4ce5e96239032f35538942769d24cfab7ec68[#201]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Some parts of `DateSamePredicateTest` test cases I added was adopted by a classmate:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/229/commits/4fe6dbd1a6956d87adf74ab23ff7ab98da4da05c[#229]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-F10-4/main/issues/220[#220],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-F10-4/main/issues/224[#224],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-F10-4/main/issues/235[#235],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-F10-4/main/issues/238[#238],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-F10-4/main/issues/242[#242],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "https://github.com/CS2103-AY1819S1-F10-4/main/issues/248[#248]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "*** Integrated two Github plugins (AppVeyor, Coveralls) to the team repo"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|_Given below are sections I contributed to the User Guide to aid the user in using the application._"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfirstday]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistday]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistweek]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide that includes my technical documentation and depth to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " aid developer to understand how the application functions._"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgenerateacademiccalendar]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviewarangeoftasks]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviewarangeoftasks2]"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 111
    }
  },
  {
    "path": "docs/team/hotarumin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d Xiao Yilin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "PROJECT: Student Schedule Planner"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "This project portfolio showcases a collection of software engineering projects I have worked on during my time studying in NUS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "The first project in this portfolio is Student Schedule Planner, a desktop schedule planner application created by my team T12-3 for the CS2103T module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "This application is targeted at university students for keeping track of their tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "We were tasked to morph it from an existing product called AddressBook, which had around 10,000 lines of existing code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "We also had to work under multiple constraints such as the primary mode of user input must be through command line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "My key contributions in this project were mainly improvements to the UI. The display is updated accordingly whenever a user makes changes to the schedule planner."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* *Major enhancement*: Major redesign of GUI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** What it does: The app displays progress bars, categories, and tags."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Justification: This feature improves user experience because the user will be able to tell how much work he/she has completed and what categories and tags he/she has used."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Highlights: The implementation was challenging as it required learning how to code for JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Credits: https://stackoverflow.com/questions/18539642/progressbar-animated-javafx[CSS styling for progress bars]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Added `listarchived` command that displays all of the archived tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "** Added `progresstoday` and `progressweek` commands to display the exact percentage of user\u0027s progress"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dyilin\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-11\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "*** Updated the GUI color scheme (Pull request https://github.com/CS2103-AY1819S1-T12-3/main/pull/89[#89])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "*** Morphed Phone class to Date class and method that checks if the entered date is valid (Pull request https://github.com/CS2103-AY1819S1-T12-3/main/pull/47[#47])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "*** Corrected typos, grammatical errors and inconsistent uses of language in User Guide and Developer Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "*** Reported bugs and suggestions for other teams:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-1/main/issues/183[#183],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-1/main/issues/185[#185],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-1/main/issues/186[#186],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-1/main/issues/200[#200],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-1/main/issues/202[#202],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-1/main/issues/210[#210],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-1/main/issues/214[#214]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation in terms that are not too technical so that end-users without technical knowledge can understand._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistarchived]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dshowtags]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dprogressbar]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project. It also shows my ability to explain how my implementations work so that future coders that work with my code will be able to improve my code easily._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlistarchivedtasks]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddisplaytagsinsidebar]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dprogressbar]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 30,
      "hotarumin": 48
    }
  },
  {
    "path": "docs/team/park-sang-jun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d Park Sang Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "PROJECT: Student Schedule Planner"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "This project portfolio showcases my contributions to Student Schedule Planner, and how I implemented each of the features."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "In this project, I, together with Chen Shin, Lin Xu, Thaddeus Lim and Xiao Yilin, morphed a generic Address Book application into a specialised Student Schedule Planner aimed exclusively at university students. This was done with the constraint that a Command Line Interface (CLI) was to be the main mode of interaction with the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "As mentioned before, Student Schedule Planner targets a very specific group of people: students. We took into account the pains that we as university students faced when we were using conventional to-do lists and aimed to solve these pains during this project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Student Schedule Planner is hence a desktop application made specifically for students. The user interacts with the application using a CLI, but it has a Graphical User Interface (GUI) for users to view results in a more user-friendly manner. The application was built using Java and has approximately 10 kLoC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "* *Major enhancement*: added *the ability to add recurring tasks*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** What it does: allows the user to add a recurring task by specifying the number of repeats and interval between each repeat."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** Justification: This feature gives convenience to users as users with to-do tasks that happen repeatedly (eg. weekly) will not have to manually add the same tasks over and over again."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** Highlights: The implementation forced me to come up with new field classes. The implementation required an understanding of the Calendar API, and duplicate tasks had to be handled."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "** Credits: The Calendar API from Java provided a variety of functions made implementing the AddRepeatCommand simpler than if I had started from scratch."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "* *Minor enhancement*: added a list overdue command that allows the user to view his/her overdue tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dpark-sang-jun\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-11\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "*** Updated user guide and developer guide, helped to correct awkward phrasing and grammar, markdown."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "*** Reported bugs for other teams:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-4/main/issues/159[#159],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-4/main/issues/160[#160]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "*** Integrated Github plugin (Travis CI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "|_Below are my contributions to the User Guide. This shows my ability to write effective documentation for the features I implemented. Furthermore, I helped to refactor the initial user guide for address book level 4 into a user guide for our current application, Student Schedule Planner._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddrepeat]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistoverdue]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "|_Below are my contributions to the Developer Guide. This showcases the technical depth of my contributions to the application and my ability to make abstract technical information easier to understand. This will allow future developers to change or expand on my existing code effortlessly."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddrepeat]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlistoverdue]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "\u003d\u003d PROJECT:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "Prior to this project, I have undertaken various software engineering projects, either for Orbital 2018 or for hackathons."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "https://github.com/park-sang-jun/orbital-2018[Speakify]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "This Android-based application allows users to practice their speaking skills by helping them to quantify their speaking speed and"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "user of various filler words."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "https://github.com/park-sang-jun/reee-searcher[Reee-searcher!]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "This Telegram bot was built to help researchers and students to effortlessly summarise articles and research papers and generate a bibligraphy in either the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "APA or MLA format. It helps users to compare a list of articles to see how similar they are."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 37,
      "park-sang-jun": 43
    }
  },
  {
    "path": "docs/team/thaddeuslzy.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d Thaddeus - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d PROJECT: Student Schedule Planner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "This Personal Project Portfolio details the contributions which I have made to the Student Schedule Planner(SSP)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "project. It also outlines skills which I have picked up."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Student Schedule Planner (SSP) is a desktop application, created by Team T12-3. It is a planner customised for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "university students, and it aims to help university students manage their time effectively."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "SSP incorporates various features that streamline the creation, organisation, and finding of tasks. In addition, it"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "allows the user to keep track of the current academic week, and has a progress tracking feature, which displays"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "user progress."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Instead of utilising a conventional Graphical User Interface(GUI). SSP is optimised for users who prefer typing out"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "their commands. This application has the potential to be much faster than regular planner applications, especially for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "users who are proficient in typing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "In total, I contributed approximately 1500+ lines of code, in both features and documentation. The features I"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "implemented were `listmonth`, `filter`, and `filterstrict`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "I also aided in refactoring major parts of the codebase, morphing the original \"Address Book (Level 4)\" code to suit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "our new SSP application. This included changing \"addressbook\" and \"person\" references in the code to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\"scheduleplanner\" and \"task\" references respectively."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "The features I implemented are as follows:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Major enhancements:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "1. Ability to *list remaining number of tasks in the current month*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _What it does:_ This feature allows the user to list all remaining tasks in the current month, in chronological"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "   order. This feature takes into account leap years."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Justification:_ The user can narrow the scope of the list to the current month, making it easier to manage tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "within this period. This provides a convenient way to list tasks that occur in commonly used time frames(day, week, month)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Highlights:_ It required an in-depth analysis of design alternatives. The implementation was challenging as it"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "had to factor in the variations of days between months, and in February during leap years."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Credits:_ Code from ListWeekCommand was referenced in the implementation of ListMonthCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "2. Ability to *filter tasks inclusively according to tags*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _What it does:_ This feature allows the user to filter tasks inclusively by their tags. This means that given 2 or"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "more tags as user-input, tasks with ANY of the specified tags will be listed. This includes any number of tags."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Justification:_ The user can filter out tasks with certain tags, expediting the search process, and reducing the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "time needed to find a specific task, or tasks belonging to the same category."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Highlights:_ The implementation was challenging, as it required the filter feature to be able to search for more"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "multiple tags. This was made complicated by the fact that each task may contain multiple tags"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Credits:_ Code from FindCommand was referenced in the implementation of FilterCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "3. Ability to *filter tasks exclusively according to tags*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _What it does:_ This feature allows the user to filter tasks exclusively by their tags. This means that given 2 or"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "more tags to filter, only tasks with ALL of the specified tags will be listed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Justification:_ The user can now narrow the scope of the filter function, further expediting the search process."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "This feature caters to users who prefer a more strict filter mechanic."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Highlights:_ The implementation made small tweaks to the filter predicate such that, only tasks containing tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "that match all user-input tags will be displayed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** _Credits:_ Code from FilterCommand was referenced in the implementation of FilterCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "\u003d\u003d\u003d Minor enhancements:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dthaddeuslzy[RepoSense]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** *Project management*:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Managed releases `v1.3.1` (1 release) on GitHub: +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/releases/tag/v1.3.1[1.3.1]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Morphed large sections of code in *Address Book (Level 4)* into current product *Student Schedule Planner* :"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/41[#41]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Added preloaded test cases for jar file, so that users may test commands:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/140[#140]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** *Documentation*:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Enhanced Introduction for DevGuide:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/77[#77]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Added Use Cases for DevGuide:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/115[#115]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Added Instructions for Manual Testing in Developer Guide:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/251[#251]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Improvements to flow of existing contents of the User Guide:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/64[#64] ,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/140[#140],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/[#245] ,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Improvements to flow of existing contents of the Developer Guide:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/64[#64] ,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/87[#87] ,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/221[#221] ,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/224[#224] ,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/245[#245]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "** *Community*:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/76[#76]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "Examples: https://github.com/CS2103-AY1819S1-T10-1/main/issues/110[1] ,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/issues/106[2]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "|_Provided below are the sections I have contributed to the User Guide. They showcase my ability to write concise,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "and coherent documentation targeting end-users who are seeing the SSP application for the first time_"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistmonth]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfiltertags]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "|_Provided below are sections I contributed to the Developer Guide. They showcase my ability to write intelligible"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "technical documentation to aid developers who are looking at the SSP for the first time. It also showcases the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "technical depth of my contributions to the project, and the value of improvements made to the SSP application._"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlistmonth]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfiltertags]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 29,
      "thaddeuslzy": 120
    }
  },
  {
    "path": "docs/team/woodnsuns.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "\u003d LIN XU - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d PROJECT: Student Schedule Planner"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "This document showcases my contributions in building desktop application Student Schedule Planner"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " for software engineering module CS2103T as a member of team T12-3 together with other 4 members. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Student Schedule Planner is a desktop task management application built specially for university students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Our application offers university students more convenience than other todo-list application through a series of features,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "such as multiple tagging for each tasks, customized task and tag management and so on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "This application is built on top of original Address Book Level-4, which is around 6kLoC, written in JAVA OOP fashion."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "Currently our Student Schedule Planner has approximately 10kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* *Major enhancement*: Major enhancement: Task management, which mainly involves two components: one is archive and another"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "is category."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** What it does: Archive command allows users to archive completed tasks. Archived tasks are stored in separate list, which can be viewed with command `listarchived`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "The tags used on tasks can be managed by customizable categories by adding tags to relevant category."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Justification: Archive is a necessary command for a task managing application, because users have the need to hide completed tasks, and review them in a separate list. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "As for category, our application allows user to attach multiple tags to a task when adding the task. Category gives user further freedom and power to manage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "the tags according to their needs. Our user can create their own categories and add relevant tags into a category."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "** Highlights: Both functions, especially category, required good planning of detailed implementation as well as deep"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "understanding and prediction of user-experience. It required deep analysis of users\u0027 demand as well as sophisticated and sustainable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "design to decide how to let user organize the tags and what to use, and the implementation involved building a whole new set of structure"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "and commands. This enhancement affects the future direction and feature design of schedule planner."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dwoodnsuns\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-11\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*** Morphed AddressBook application to Schedule Planner:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/39[#39],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/25[#25],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/15[#15],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/12[#12]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*** Added sorting feature that allows tasks to always be displayed in the order of deadline date and priority."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*** Added automatic deletion feature that deletes archived tasks with deadline date earlier than 2 weeks before current date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "whenever application launches."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*** Documentation: Reformatted and edited existing User Guide: https://github.com/CS2103-AY1819S1-T12-3/main/pull/56[#56],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/pull/69[#69], https://github.com/CS2103-AY1819S1-T12-3/main/pull/73[#73]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/CS2103-AY1819S1-W14-4/main/issues/187[1],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-W14-4/main/issues/179[2], https://github.com/CS2103-AY1819S1-W14-4/main/issues/174[3],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-W14-4/main/issues/168[4], https://github.com/CS2103-AY1819S1-W14-4/main/issues/166[5],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-W14-4/main/issues/164[6], https://github.com/CS2103-AY1819S1-W14-4/main/issues/161[7],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-W14-4/main/issues/163[8], https://github.com/CS2103-AY1819S1-W14-4/main/issues/160[9],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-W14-4/main/issues/159[10], https://github.com/CS2103-AY1819S1-W14-4/main/issues/157[11],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "https://github.com/CS2103-AY1819S1-W14-4/main/issues/183[12]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "*** Integrated Codacy to the team repo"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "|_Given below are sections I contributed to the User Guide."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../UserGuide.adoc[tag\u003darchivetask]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddingcat]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclearcat]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../UserGuide.adoc[tag\u003dremovecat]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditcat]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsorting]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003darchivetask]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtags]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautoDelete]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsorting]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 41,
      "Woodnsuns": 63
    }
  },
  {
    "path": "rangeofweek.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003crangeofweek\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e130818\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e190818\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 1\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e200818\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e260818\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 2\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e270818\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e020918\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 3\u003c/description\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e030918\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e090918\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 4\u003c/description\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e100918\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e160918\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 5\u003c/description\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e170918\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e230918\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 6\u003c/description\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e240918\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e300918\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eRecess Week\u003c/description\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e011018\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e071018\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 7\u003c/description\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e081018\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e141018\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 8\u003c/description\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e151018\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e211018\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 9\u003c/description\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e221018\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e281018\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 10\u003c/description\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e291018\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e041118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 11\u003c/description\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e051118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e111118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 12\u003c/description\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e121118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e181118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 13\u003c/description\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e191118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e251118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eStudy Week\u003c/description\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e261118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e021218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e031218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e091218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/rangeofweek\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 88
    }
  },
  {
    "path": "scheduleplanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModules\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eShopping\u003c/tags\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eLecture\u003c/tags\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eUni\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eLab\u003c/tags\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eQuiz\u003c/tags\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eTutorial\u003c/tags\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eStudy\u003c/tags\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eExam\u003c/tags\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctags\u003eLecture\u003c/tags\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003ecat\u003c/name\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eCat\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo CS2030 lab\u003c/name\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e311018\u003c/date\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eCOM1 01-23\u003c/venue\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eCS2030\u003c/tagged\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eLab\u003c/tagged\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e011118\u003c/date\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eTech Hangout\u003c/venue\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e011118\u003c/date\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e021118\u003c/date\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eUtown Starbucks\u003c/venue\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e031118\u003c/date\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eGroceries\u003c/name\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e041118\u003c/date\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eFairprice\u003c/venue\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eShopping\u003c/tagged\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo CS2100 lab\u003c/name\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e051118\u003c/date\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eCS2100\u003c/tagged\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eLab\u003c/tagged\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo CS2105 lab\u003c/name\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e041118\u003c/date\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eCS2105\u003c/tagged\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eLab\u003c/tagged\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eGEQ1000 Quiz\u003c/name\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e051118\u003c/date\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003ehome\u003c/venue\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eGEQ1000\u003c/tagged\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eWatch CS2106 lecture\u003c/name\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e101118\u003c/date\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eLecture\u003c/tagged\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eCS2106\u003c/tagged\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo GEH1034 tutorial\u003c/name\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e111118\u003c/date\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eTutorial\u003c/tagged\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eGEH1034\u003c/tagged\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eWatch CS2103T lecture\u003c/name\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e121118\u003c/date\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eLecture\u003c/tagged\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eCS2103T\u003c/tagged\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo CS2100 tutorial\u003c/name\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e131118\u003c/date\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eTech Hangout\u003c/venue\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eTutorial\u003c/tagged\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eCS2101\u003c/tagged\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo MA1101R tutorial\u003c/name\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e141118\u003c/date\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eTutorial\u003c/tagged\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eMA1101R\u003c/tagged\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo CS2030 lab\u003c/name\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e141118\u003c/date\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eCOM1 01-23\u003c/venue\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eCS2030\u003c/tagged\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eLab\u003c/tagged\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e151118\u003c/date\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eTech Hangout\u003c/venue\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e161118\u003c/date\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e181118\u003c/date\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHome\u003c/venue\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eGroceries\u003c/name\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e191118\u003c/date\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eFairprice\u003c/venue\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eShopping\u003c/tagged\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eGroceries\u003c/name\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e201118\u003c/date\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eShengShiong\u003c/venue\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eShopping\u003c/tagged\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eGEH1034 Quiz \u003c/name\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e211118\u003c/date\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eLT34\u003c/venue\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eQuiz\u003c/tagged\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eGEH1034\u003c/tagged\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eST2334 Finals \u003c/name\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e221118\u003c/date\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eMPSH 1\u003c/venue\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eST2334\u003c/tagged\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eExam\u003c/tagged\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eCS2103 Finals \u003c/name\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e231118\u003c/date\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eMPSH 1\u003c/venue\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eST2334\u003c/tagged\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eExam\u003c/tagged\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003carchivedTasks\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eDo GEH1034 tutorial\u003c/name\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e311018\u003c/date\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eHoe\u003c/venue\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eTutorial\u003c/tagged\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eGEH1034\u003c/tagged\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/archivedTasks\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003carchivedTasks\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eSelf study\u003c/name\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e171118\u003c/date\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cvenue\u003eUtown Starbucks\u003c/venue\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/archivedTasks\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 211,
      "-": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FirstDayCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.SchedulePlannerStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.XmlSchedulePlannerStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 7, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SchedulePlanner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        SchedulePlannerStorage schedulePlannerStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new XmlSchedulePlannerStorage(userPrefs.getSchedulePlannerFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        storage \u003d new StorageManager(schedulePlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.autoDeleteArchived();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s schedule planner and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample schedule planner will be used instead if {@code storage}\u0027s schedule planner is not"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * found, or an empty schedule planner will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * schedule planner."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Optional\u003cReadOnlySchedulePlanner\u003e schedulePlannerOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ReadOnlySchedulePlanner initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            schedulePlannerOptional \u003d storage.readSchedulePlanner();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (!schedulePlannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SchedulePlanner\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            initialData \u003d schedulePlannerOptional.orElseGet(SampleDataUtil::getSampleSchedulePlanner);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty SchedulePlanner\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            initialData \u003d new SchedulePlanner();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SchedulePlanner\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            initialData \u003d new SchedulePlanner();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    protected Config initConfig(Path configFilePath) throws CommandException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //When user launch the application for the first time or deleted the \u0027rangeofweek.xml\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //or modify the content until some are invalid"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //generate the file with a default setting to allow user to use \u0027firstday\u0027 command"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        FirstDayCommand fdc \u003d new FirstDayCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        fdc.createDefaultFileIfNotExist();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        fdc.createDefaultFileIfUnableConvert();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        fdc.createDefaultFileIfSizeDiff();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        fdc.createDefaultFileIfNull();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        fdc.createDefaultFileIfInvalidDateOrRange();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            Config updateConfig \u003d new Config();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            updateConfig.setAppTitle(fdc.computeAppTitle());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            ConfigUtil.saveConfig(updateConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            logger.warning(\"Failed to update config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SchedulePlanner\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        logger.info(\"Starting SchedulePlanner \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Schedule Planner ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 38,
      "Woodnsuns": 3,
      "-": 191
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String appTitle \u003d \"Schedule App\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String LOG_FILE \u003d \"scheduleplanner.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DEFAULT_CATEGORY \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Default categories (Modules and Others) cannot be removed. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    + \"(But you can clear their tags using clear command)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CATEGORY \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"This category does not exist your schedule planner T_T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_EDIT_DEFAULT_CATEGORY \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Default categories (Modules and Others) cannot be changed.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "Woodnsuns": 8,
      "-": 11
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/commons/events/model/SchedulePlannerChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/** Indicates the SchedulePlanner in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class SchedulePlannerChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public final ReadOnlySchedulePlanner data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public SchedulePlannerChangedEvent(ReadOnlySchedulePlanner data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return \"number of tasks \" + data.getTaskList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 16,
      "-": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/commons/events/ui/ChangeViewEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * An event requesting to change the view of the window."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ChangeViewEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Types of views to display"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public enum View {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        NORMAL, ARCHIVE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private View view;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ChangeViewEvent(View targetView) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        this.view \u003d targetView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public View getView() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 32
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/commons/events/ui/ShowTagsRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Indicates a request to expand the list of tags under a specified category."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ShowTagsRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public final String category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ShowTagsRequestEvent(String cat) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        this.category \u003d cat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 25
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/commons/events/ui/TaskPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Represents a selection change in the Task List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class TaskPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final Task newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public TaskPanelSelectionChangedEvent(Task newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Task getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 23,
      "-": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of archived tasks */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredArchivedTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /** Returns an unmodifiable view of the list of categories */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    ObservableList\u003cCategory\u003e getCategoryList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "-": 25,
      "hotarumin": 7
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.SchedulePlannerParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final SchedulePlannerParser schedulePlannerParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        schedulePlannerParser \u003d new SchedulePlannerParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            Command command \u003d schedulePlannerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredArchivedTaskList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return model.getFilteredArchivedTaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return model.getCategoryList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 5,
      "-": 47,
      "hotarumin": 11
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/AddCategoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Adds a category to schedule planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class AddCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addcat\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \": Adds a category to the Schedule Planner. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"CATEGORY \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"SteamList \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New category has been added: %1$s \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"This category exists your schedule planner! Please consider alternative naming \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Creates an AddCategoryCommand to add the specified {@code Category}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public AddCategoryCommand(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categoryName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (model.hasCategory(categoryName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addCategory(categoryName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, categoryName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 52
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Adds a task to the Schedule Planner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the Schedule Planner. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"CS2103T Tutorial \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"191218 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRIORITY + \"3 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_VENUE + \"COM1-0210 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Tutorial\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the Schedule Planner\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 12,
      "Woodnsuns": 2,
      "-": 50,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/AddRepeatCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Interval;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Repeat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " * Adds a repeated task to the Schedule Planner."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class AddRepeatCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a repeated task to the Schedule Planner. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_REPEAT + \"REPEAT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_INTERVAL + \"INTERVAL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_REPEAT + \"10 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_INTERVAL + \"7 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"CS2103T Tutorial \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"111018 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_PRIORITY + \"3 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_VENUE + \"COM1-0210 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Tutorial\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New repeated task added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private final Repeat repeat;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private final Interval repeatInterval;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Creates an AddRepeatCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public AddRepeatCommand(Task task, Repeat times, Interval interval) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        repeat \u003d times;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        repeatInterval \u003d interval;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        // Add the first task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        int interval \u003d Integer.parseInt(repeatInterval.value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        DateFormat schedulerFormat \u003d new SimpleDateFormat(\"ddMMyy\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Calendar baseDate \u003d toAdd.getDate().calendar;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        String newDate \u003d schedulerFormat.format(baseDate.getTime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Date date \u003d new Date(newDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task newTask \u003d new Task(toAdd.getName(), date,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                toAdd.getPriority(), toAdd.getVenue(), toAdd.getTags());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        // If the first task is not a duplicate task, add it."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        if (!model.hasTask(newTask)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            model.addTask(newTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        // Loop through to add the rest of the tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        for (int i \u003d 1; i \u003c Integer.parseInt(repeat.value); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            baseDate.add(Calendar.DAY_OF_YEAR, interval);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            newDate \u003d schedulerFormat.format(baseDate.getTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            date \u003d new Date(newDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            newTask \u003d new Task(toAdd.getName(), date,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                    toAdd.getPriority(), toAdd.getVenue(), toAdd.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            // Add the task only if there is no duplicate task within the model."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            if (!model.hasTask(newTask)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                model.addTask(newTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 95
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/AddTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Adds a tag to the given category."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \": Adds a tag to selected category in the Schedule Planner. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"TAG \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"Modules \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"CS2103T \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag %1$s added to category %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in this category\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NONEXISTENT \u003d \"This category does not exist.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final Tag tagToAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Creates an AddTagCommand to add the specified {@code Tag}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public AddTagCommand(Tag tag, String addTo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        tagToAdd \u003d tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categoryName \u003d addTo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!model.hasCategory(categoryName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(MESSAGE_CATEGORY_NONEXISTENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (model.hasTagInCategory(tagToAdd, model.getCategory(categoryName))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addTag(tagToAdd, categoryName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tagToAdd, categoryName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 61
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ArchiveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Archive a completed task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \": Archive the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_TASK_SUCCESS \u003d \"Archived Task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Task taskToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.archiveTask(taskToArchive);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_TASK_SUCCESS, taskToArchive));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 53,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ClearCategoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Clears all existing tags of a category from schedule planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class ClearCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearcat\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \": Remove a category from the Schedule Planner. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"CATEGORY \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"Modules \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Category %1$s has been cleared!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CATEGORY \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"This category does not exist your schedule planner T_T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Creates an ClearCategoryCommand to add the specified {@code name}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ClearCategoryCommand(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categoryName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!model.hasCategory(categoryName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_CATEGORY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.clearCategory(categoryName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, categoryName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 52
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Clears the Schedule Planner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your Schedule Planner has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.resetData(new SchedulePlanner());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "-": 22,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the Schedule Planner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 9,
      "-": 46,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/EditCategoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Edit the name of a category to schedule planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class EditCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editcat\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \": Edit the name of a category in the Schedule Planner. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"ORIGINALNAME \" + CliSyntax.PREFIX_CATEGORY + \"NEWNAME\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"Steam discount list \" + CliSyntax.PREFIX_CATEGORY + \"Switch discount list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Category %1$s has been changed to: %2$s \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"This category exists your schedule planner! Please consider alternative naming \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_SAME_NAME \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"The new name given is same as original name. Please consider another name T_T\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DEFAULT_CATEGORY \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Default categories (Modules and Others) cannot be changed.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final String originalName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Creates an AddCategoryCommand to add the specified {@code Category}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public EditCategoryCommand(String original, String changeTo) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(changeTo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        originalName \u003d original;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        newName \u003d changeTo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (model.hasCategory(newName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (originalName.equals(newName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (originalName.equals(\"Modules\") || originalName.equals(\"Others\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException((MESSAGE_DEFAULT_CATEGORY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.editCategory(originalName, newName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, originalName, newName));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 67
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Edits the details of an existing task in the venue book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_VENUE + \"VENUE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"111018 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRIORITY + \"3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the schedule planner.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Date updatedDate \u003d editTaskDescriptor.getDate().orElse(taskToEdit.getDate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Venue updatedVenue \u003d editTaskDescriptor.getVenue().orElse(taskToEdit.getVenue());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new Task(updatedName, updatedDate, updatedPriority, updatedVenue, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, date, priority, venue, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void setVenue(Venue venue) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public Optional\u003cVenue\u003e getVenue() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    \u0026\u0026 getVenue().equals(e.getVenue())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 60,
      "-": 165,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Schedule Planner as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Filters and lists all tasks in schedule planner whose tags contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters all tasks whose tags match ANY of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" tutorial exam cca\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private final TagsContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public FilterCommand(TagsContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 43,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/FilterStrictCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Filters and lists all tasks in schedule planner whose tags contains ALL of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterStrictCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filterstrict\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters all tasks whose tags match ALL of the \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            + \"specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" tutorial exam cca\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private final TagsContainsAllKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public FilterStrictCommand(TagsContainsAllKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                || (other instanceof FilterStrictCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterStrictCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 46
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Finds and lists all tasks in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 4,
      "-": 39,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/FirstDayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.storage.XmlSerializableRangeOfWeek;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Generate academic calendar based on given date input. It also have methods to save and retrieve the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * generated data in storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class FirstDayCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"firstday\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Mark the first monday of the semester. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            + \"Date should be in ddmmyy format\\nExample: \" + COMMAND_WORD + \" \" + \"130818\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"First day of semester saved successfully\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_ONLY_ONE_ARGUMENT \u003d \"FirstDay command only accept one set of date\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Invalid date or date format\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            + \"Date should be in ddmmyy format\\nExample: \" + COMMAND_WORD + \" \" + \"130818\";;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_NOT_MONDAY \u003d \"Date given is not a Monday\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST \u003d \"Unable to save range of dates of semester as \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            + \"default file is missing\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_DATA_UNABLE_CONVERT \u003d \"Data unable to convert from saved file\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final int WEEKS_IN_SEMESTER \u003d 17;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String DEFAULT_MONDAY_DATE \u003d \"010118\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FirstDayCommand.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path PATH \u003d Paths.get(\"rangeofweek.xml\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String inputDate \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String[][] rangeOfWeek \u003d new String[WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String weekDescription \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //To allow other class to use the methods without causing any changes to the storage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public FirstDayCommand() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public FirstDayCommand(String userInputDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        checkArgument(isMonday(userInputDate), MESSAGE_NOT_MONDAY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        checkArgument(Date.isValidDate(userInputDate), MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.inputDate \u003d userInputDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        computeRangeOfWeeks(inputDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        saveRangeOfWeeks(rangeOfWeek);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (isWithinDateRange(rangeOfWeek[0][0], rangeOfWeek[16][1])) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            weekDescription \u003d retrieveWeekDescription(rangeOfWeek);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS + \"\\n\" + \"Current week: %s\", weekDescription"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    + \"\\n\" + \"The week description will be reflected when you relaunch the application\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Check if system date is within the semester date"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param firstDayOfSem the first day of academic semester"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param lastDayOfSem the last day of academic semester"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean isWithinDateRange(String firstDayOfSem, String lastDayOfSem) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.parse(firstDayOfSem, DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        LocalDate lastDate \u003d LocalDate.parse(lastDayOfSem, DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        LocalDate systemDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return (systemDate.isEqual(firstDate) || systemDate.isAfter(firstDate) \u0026\u0026 (systemDate.isBefore(lastDate)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || systemDate.isEqual(lastDate)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The following code is referenced from:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Retrieve the description of a particular week. If week can\u0027t be found, return empty string"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param rangeOfWeek the 2d String array that contains the dates and description of the academic calendar"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return description of week"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String retrieveWeekDescription(String[][] rangeOfWeek) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        LocalDate systemDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            LocalDate firstDate \u003d LocalDate.parse(rangeOfWeek[i][0], DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            LocalDate lastDate \u003d LocalDate.parse(rangeOfWeek[i][1], DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (systemDate.isEqual(firstDate) || systemDate.isAfter(firstDate) \u0026\u0026 (systemDate.isBefore(lastDate)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    || systemDate.isEqual(lastDate))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                return rangeOfWeek[i][2];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method save the rangeOfWeeks into storage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param rangeOfWeek the 2d String array that contains the dates and description of the academic calendar"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void saveRangeOfWeeks (String[][] rangeOfWeek) throws CommandException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlFileStorage.saveWeekDataToFile(PATH, new XmlSerializableRangeOfWeek(rangeOfWeek));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method retrieve the rangeOfWeeks from storage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String[][] retrieveRangeOfWeeks (String[][] storeRangeOfWeeks) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(PATH);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            storeRangeOfWeeks \u003d range.convertRangeOfWeeksToString2dArray(range);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return storeRangeOfWeeks;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The following code is referenced from:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method compute the range of weeks for one semester based on the first Monday."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param firstDay the first day of the academic semester"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return the 2d string array"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String[][] computeRangeOfWeeks(String firstDay) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            String startOfWeekDate \u003d LocalDate.parse(firstDay, DateTimeFormatter.ofPattern(\"ddMMyy\")).plusDays(7 * i)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    .format(DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            String endOfWeekDate \u003d LocalDate.parse(firstDay, DateTimeFormatter.ofPattern(\"ddMMyy\")).plusDays(7 * i + 6)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    .format(DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            rangeOfWeek[i][0] \u003d startOfWeekDate;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            rangeOfWeek[i][1] \u003d endOfWeekDate;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        addDescriptionForWeeks(rangeOfWeek);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return rangeOfWeek;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Helper method to insert description of each week in the 2d String array"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param rangeOfWeek the 2d String array that contains the dates and description of the academic semester"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void addDescriptionForWeeks(String[][] rangeOfWeek) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[0][2] \u003d \"Week 1\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[1][2] \u003d \"Week 2\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[2][2] \u003d \"Week 3\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[3][2] \u003d \"Week 4\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[4][2] \u003d \"Week 5\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[5][2] \u003d \"Week 6\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[6][2] \u003d \"Recess Week\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[7][2] \u003d \"Week 7\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[8][2] \u003d \"Week 8\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[9][2] \u003d \"Week 9\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[10][2] \u003d \"Week 10\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[11][2] \u003d \"Week 11\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[12][2] \u003d \"Week 12\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[13][2] \u003d \"Week 13\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[14][2] \u003d \"Study Week\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[15][2] \u003d \"Examination Week\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeek[16][2] \u003d \"Examination Week\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method check if the input date is a monday"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Pre-requisite: this method only work for dates in 21st century"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param inputDate the date to be check if is a monday"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean isMonday(String inputDate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return (LocalDate.parse(inputDate, DateTimeFormatter.ofPattern(\"ddMMyy\")).getDayOfWeek().name() \u003d\u003d \"MONDAY\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method compute the correct application title and return the string value"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return application title"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String computeAppTitle() throws CommandException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String appTitle \u003d \"Student Schedule Planner\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String[][] retrieveData \u003d new String[WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        retrieveData \u003d retrieveRangeOfWeeks(retrieveData);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (isWithinDateRange(retrieveData[0][0], retrieveData[16][1])) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            appTitle \u003d \"Student Schedule Planner\" + \"  - \" + retrieveWeekDescription(retrieveData);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method create default storage file if not exist."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * solution below adapted from"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * https://stackoverflow.com/questions/1816673/how-do-i-check-if-a-file-exists-in-java"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFileIfNotExist () throws CommandException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        File checkFileExist \u003d new File(\"rangeofweek.xml\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!checkFileExist.exists()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                logger.info(\"rangeofweek.xml data file not found. \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                        + \"Will be starting with a default rangeofweek.xml\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                checkFileExist.createNewFile();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                saveRangeOfWeeks(computeRangeOfWeeks(DEFAULT_MONDAY_DATE));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                throw new CommandException(\"Failed to create rangeofweek.xml\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method the default storage file is the number of data entry is different from expected"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFileIfSizeDiff () throws CommandException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(PATH);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (range.returnSize() !\u003d WEEKS_IN_SEMESTER) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                logger.warning(\"rangeofweek.xml data entries different from expected academic number of weeks. \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                        + \"Will be starting with a default rangeofweek.xml\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                saveRangeOfWeeks(computeRangeOfWeeks(DEFAULT_MONDAY_DATE));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method create default storage file if the date data in the storage is modified into invalid date"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFileIfInvalidDateOrRange () throws CommandException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(PATH);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (!range.checkIfValidDateOrRangeFromStorage()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                logger.warning(\"rangeofweek.xml data contains invalid date or date range. \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                        + \"Will be starting with a default rangeofweek.xml\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                saveRangeOfWeeks(computeRangeOfWeeks(DEFAULT_MONDAY_DATE));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method create default storage file if either data in the storage is null"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFileIfNull () throws CommandException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(PATH);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (!range.checkIfNullValueFromStorage()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                logger.warning(\"rangeofweek.xml data file contains null value. \""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                        + \"Will be starting with a default rangeofweek.xml\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                saveRangeOfWeeks(computeRangeOfWeeks(DEFAULT_MONDAY_DATE));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method create default storage file if the date data in the storage is unable to be converted"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFileIfUnableConvert () throws CommandException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(PATH);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            logger.warning(\"rangeofweek.xml data file unable to convert. \""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    + \"Will be starting with a default rangeofweek.xml\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            saveRangeOfWeeks(computeRangeOfWeeks(DEFAULT_MONDAY_DATE));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String returnUserDate () {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return inputDate;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || (other instanceof FirstDayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 inputDate.equals(((FirstDayCommand) other).returnUserDate()));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 314
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ListArchivedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.model.Model.PREDICATE_SHOW_ALL_ARCHIVED_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Lists all tasks in the Schedule Planner to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class ListArchivedCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listarchived\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.updateFilteredArchivedTaskList(PREDICATE_SHOW_ALL_ARCHIVED_TASKS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.ARCHIVE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 26,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all tasks in the Schedule Planner to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "-": 23,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ListDayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.DateSamePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * List all tasks of the current date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class ListDayCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listday\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all task(s) with the current date.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Today\u0027s task(s) are listed as follows.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //Solution below adapted from:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //https://stackoverflow.com/questions/5175728/how-to-get-the-current-date-time-in-java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String systemDate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new SimpleDateFormat(\"ddMMyy\").format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(new DateSamePredicate(systemDate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 24,
      "-": 4,
      "hotarumin": 3,
      "park-sang-jun": 1
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ListMonthCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.DateWeekSamePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * List all tasks till the end of current month."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Pre-condition: The year must be within the 21st century"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class ListMonthCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmonth\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all task(s) till the end of the month.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This month\u0027s task(s) are listed as follows.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        appendDateList(dateList, numDaysTillEndOfMonth(currentDate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * This method append the date of days till nearest sunday into \u0027dateList\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void appendDateList (List\u003cString\u003e dateList, int numDays) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //solution below adapted from:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //https://stackoverflow.com/questions/428918/how-can-i-increment-a-date-by-one-day-in-java"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //if current day is last day of month, just append current date into dateList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //also doubled up to add the base current date into dateList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //for day 1 till last day of month, append the corresponding date(s) till the last day into dateList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //will not append for last day as numDays is 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        for (int i \u003d 0; i \u003c numDays; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * This method checks and returns the number of days left from current date till the end of the month."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * @param currentDay the name of today date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * @return numDays"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public int numDaysTillEndOfMonth (LocalDate currentDay) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        int numDays;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        int dayValue \u003d currentDay.getDayOfMonth();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        int monthValue \u003d currentDay.getMonthValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        int yearValue \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        switch(monthValue) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            numDays \u003d 31 - dayValue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            numDays \u003d 30 - dayValue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            if (((yearValue % 4 \u003d\u003d 0) \u0026\u0026 !(yearValue % 100 \u003d\u003d 0)) || (yearValue % 400 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                numDays \u003d 29 - dayValue;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                numDays \u003d 28 - dayValue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            numDays \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            System.out.println(\"Invalid month.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return numDays;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 96
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ListOverdueCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.OverduePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " * This class encapsulates the information regarding the ListOverdueCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class ListOverdueCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listoverdue\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all task(s) that are overdue.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The overdue task(s) are listed as follows.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    // The system date in yyMMdd format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final int SYSTEM_DATE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    // Set SYSTEM_DATE variable to be the current date in the yyMMdd format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        SYSTEM_DATE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                Integer.parseInt(new SimpleDateFormat(\"yyMMdd\").format(Calendar.getInstance().getTime()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        // Filter the task list using the OverduePredicate with the current date as the parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.updateFilteredTaskList(new OverduePredicate(SYSTEM_DATE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 33,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ListWeekCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.DateWeekSamePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * List all tasks from the current date till closest Sunday."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class ListWeekCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listweek\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all task(s) till this Sunday.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This week\u0027s task(s) are listed as follows.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String dateName \u003d LocalDate.now().getDayOfWeek().name();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        appendDateList(dateList, numDaysTillSunday(dateName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method append the date of days till nearest sunday into \u0027dateList\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Prerequisite: this method only work for dates in 21st century"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param dateList the list to keep the string date values"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param numDays the number of days from current date until Sunday, excluding the current date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static void appendDateList (List\u003cString\u003e dateList, int numDays) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //solution below adapted from:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //https://stackoverflow.com/questions/428918/how-can-i-increment-a-date-by-one-day-in-java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //if current day is sunday, just append current date into dateList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //also doubled up to add the base current date into dateList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //for monday to saturday, append the corresponding date(s) till sunday into dateList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //will not work for sunday as intended as numDays for sunday till sunday is 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c numDays; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method check and return the number of positive days left from current date till the nearest sunday."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Prerequisite: this method only work for dates in 21st century"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param currentDate the name of today date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return numDays the number of days from current date until Sunday, excluding current date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static int numDaysTillSunday (String currentDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        int numDays;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        switch(currentDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case \"SUNDAY\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case \"MONDAY\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 6;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case \"TUESDAY\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 5;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case \"WEDNESDAY\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 4;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case \"THURSDAY\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 3;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case \"FRIDAY\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case\"SATURDAY\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            numDays \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return numDays;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 83,
      "-": 4,
      "hotarumin": 6,
      "park-sang-jun": 1
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ProgressTodayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.task.DateSamePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Displays the percentage of tasks done for today."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ProgressTodayCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"progresstoday\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed %.2f%% of your tasks for today!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String systemDate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            new SimpleDateFormat(\"ddMMyy\").format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        model.updateFilteredTaskList(new DateSamePredicate(systemDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        model.updateFilteredArchivedTaskList(new DateSamePredicate(systemDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int uncompleted \u003d model.getFilteredTaskList().size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int completed \u003d model.getFilteredArchivedTaskList().size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int total \u003d uncompleted + completed;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        float percentage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        if (total \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            percentage \u003d 0.0f;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            percentage \u003d (float) completed * 100.0f / (float) total;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, percentage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 32,
      "park-sang-jun": 6
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ProgressWeekCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.task.DateWeekSamePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Displays the percentage of tasks done for this week."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ProgressWeekCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"progressweek\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed %.2f%% of your tasks for this week!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String dateName \u003d LocalDate.now().getDayOfWeek().name();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ListWeekCommand.appendDateList(dateList, ListWeekCommand.numDaysTillSunday(dateName));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        model.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        model.updateFilteredArchivedTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int uncompleted \u003d model.getFilteredTaskList().size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int completed \u003d model.getFilteredArchivedTaskList().size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int total \u003d uncompleted + completed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        float percentage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        if (total \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            percentage \u003d 0.0f;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            percentage \u003d (float) completed * 100.0f / (float) total;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, percentage));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 34,
      "park-sang-jun": 6
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!model.canRedoSchedulePlanner()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.redoSchedulePlanner();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "-": 28,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/RemoveCategoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Removes a category from schedule planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class RemoveCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removecat\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \": Remove a category from the Schedule Planner. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"CATEGORY \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"SteamList \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"(Assumuing SteamList is a existing category)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Category %1$s has been removed \u003d^ ^\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CATEGORY \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"This category does not exist your schedule planner T_T\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DEFAULT_CATEGORY \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Default categories (Modules and Others) cannot be removed. \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    + \"(But you can clear their tags using clear command)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Creates an RemoveCategoryCommand to add the specified {@code Category}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public RemoveCategoryCommand(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categoryName \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!model.hasCategory(categoryName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_CATEGORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (categoryName.equals(\"Modules\") || categoryName.equals(\"Others\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CommandException((MESSAGE_DEFAULT_CATEGORY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.removeCategory(categoryName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, categoryName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 60
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a task identified using it\u0027s displayed index from the schedule planner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            + \": Selects the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_TASK_SUCCESS \u003d \"Selected Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_TASK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 4,
      "-": 53
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/ShowTagsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ShowTagsRequestEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Shows the tags under a specified category."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ShowTagsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tags\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            + \": Expands the tags under the specified category. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            + CliSyntax.PREFIX_CATEGORY + \"Modules \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The tags under that category are shown. \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NONEXISTENT \u003d \"This category does not exist.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Creates a ShowTagsCommand to display tags under the specified {@code category}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ShowTagsCommand(String category) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        categoryName \u003d category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (!model.hasCategory(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new CommandException(MESSAGE_CATEGORY_NONEXISTENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ShowTagsRequestEvent(categoryName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 48
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!model.canUndoSchedulePlanner()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.undoSchedulePlanner();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.updateFilteredArchivedTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeViewEvent(ChangeViewEvent.View.NORMAL));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "Woodnsuns": 1,
      "-": 28,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/AddCategoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Parses input arguments and creates a new AddCategoryCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class AddCategoryCommandParser implements Parser\u003cAddCategoryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCategoryCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * and returns an AddCategoryCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public AddCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    AddCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String categoryName \u003d ParserUtil.parseCategoryName(argMultimap.getValue(CliSyntax.PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new AddCategoryCommand(categoryName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 38
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/AddRepeatCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddRepeatCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Interval;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Repeat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " *  Parses input arguments and creates a new AddRepeatCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class AddRepeatCommandParser implements Parser\u003cAddRepeatCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public AddRepeatCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_REPEAT, CliSyntax.PREFIX_INTERVAL,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                        CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_DATE, CliSyntax.PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                        CliSyntax.PREFIX_VENUE, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_REPEAT, CliSyntax.PREFIX_INTERVAL,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_VENUE, CliSyntax.PREFIX_DATE, CliSyntax.PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                    AddRepeatCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Interval interval \u003d ParserUtil.parseInterval(argMultimap.getValue(CliSyntax.PREFIX_INTERVAL).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Repeat repeat \u003d ParserUtil.parseRepeat(argMultimap.getValue(CliSyntax.PREFIX_REPEAT).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_DATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(CliSyntax.PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Venue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(CliSyntax.PREFIX_VENUE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task task \u003d new Task(name, date, priority, venue, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return new AddRepeatCommand(task, repeat, interval);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 60
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/AddTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Parses input arguments and creates a new AddTagCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_CATEGORY, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_CATEGORY, CliSyntax.PREFIX_TAG)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String categoryName \u003d ParserUtil.parseCategoryName(argMultimap.getValue(CliSyntax.PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(CliSyntax.PREFIX_TAG).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new AddTagCommand(tag, categoryName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 42
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/ArchiveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * and returns an ArchiveCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 28
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/ClearCategoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ClearCategoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Parses input arguments and creates a new ClearCategoryCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class ClearCategoryCommandParser implements Parser\u003cClearCategoryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCategoryCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * and returns an ClearCategoryCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ClearCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    ClearCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String categoryName \u003d ParserUtil.parseCategoryName(argMultimap.getValue(CliSyntax.PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new ClearCategoryCommand(categoryName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 39
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final Prefix PREFIX_REPEAT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final Prefix PREFIX_INTERVAL \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "Woodnsuns": 1,
      "-": 9,
      "park-sang-jun": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/EditCategoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCategoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Parses input arguments and creates a new EditCategoryCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class EditCategoryCommandParser implements Parser\u003cEditCategoryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCategoryCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public EditCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    EditCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String[] oldAndNewNames \u003d ParserUtil.parseCategoryNames(argMultimap.getAllValues(CliSyntax.PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new EditCategoryCommand(oldAndNewNames[0], oldAndNewNames[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 38
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_VENUE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            editTaskDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            editTaskDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            editTaskDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 12,
      "-": 72
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return new FilterCommand(new TagsContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 32
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/FilterStrictCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FilterStrictCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Parses input arguments and creates a new FilterStrictCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterStrictCommandParser implements Parser\u003cFilterStrictCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterStrictCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * and returns a FilterStrictCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public FilterStrictCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FilterStrictCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return new FilterStrictCommand(new TagsContainsAllKeywordsPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 32
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/FirstDayCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FirstDayCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Parses input arguments and creates a new FirstDayCommand object based on first argument"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class FirstDayCommandParser implements Parser\u003cFirstDayCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FirstDayCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * and returns an FirstDayCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public FirstDayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FirstDayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!onlyOneSetArgument(trimmedArgs)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new ParseException(FirstDayCommand.MESSAGE_ONLY_ONE_ARGUMENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!Date.isValidDate(trimmedArgs)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new ParseException(FirstDayCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!isMonday(trimmedArgs)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new ParseException(FirstDayCommand.MESSAGE_NOT_MONDAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new FirstDayCommand(trimmedArgs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * If user input only one set of argument in correct format, there should be no space as it"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * suggest more than one set of argument"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param string the value to be check if there are more than one set of argument"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private boolean onlyOneSetArgument(String string) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return containsWhiteSpace(string);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Helper method to check if a string contains white space"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param string the value to check if there are any white space"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private boolean containsWhiteSpace(String string) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c string.length(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (Character.isWhitespace(string.charAt(i))) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Method to check if input date is a Monday"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Pre-requisite: This method only work for date in 21st century"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param inputDate the date to check if input date is a monday"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean isMonday(String inputDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return (LocalDate.parse(inputDate, DateTimeFormatter.ofPattern(\"ddMMyy\")).getDayOfWeek().name() \u003d\u003d \"MONDAY\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 77
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Interval;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Repeat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Parses a {@code String repeat} into a {@code Repeat}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * @throws ParseException if the given {@code repeat} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static Repeat parseRepeat(String repeat) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        requireNonNull(repeat);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        String trimmedRepeat \u003d repeat.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        if (!Repeat.isValidRepeat(trimmedRepeat)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new ParseException(Repeat.MESSAGE_REPEAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return new Repeat(trimmedRepeat);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Parses a {@code String interval} into a {@code interval}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * @throws ParseException if the given {@code repeat} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static Interval parseInterval(String interval) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        requireNonNull(interval);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        String trimmedInterval \u003d interval.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        if (!Interval.isValidInterval(trimmedInterval)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_INTERVAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return new Interval(trimmedInterval);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new ParseException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Parses a {@code String address} into an {@code Venue}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static Venue parseVenue(String address) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!Venue.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new ParseException(Venue.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new Venue(trimmedAddress);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Parses a {@code String email} into an {@code Priority}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static Priority parsePriority(String email) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!Priority.isValidPriority(trimmedEmail)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new Priority(trimmedEmail);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static String parseCategoryName(String name) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!Category.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new ParseException(Category.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return trimmedName;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a String array of size two {@code names}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * names[0] contains original name of selected category,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * names[1] contains new name of this category."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static String[] parseCategoryNames(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String[] names \u003d new String[2];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        for (String categoryName: categories) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            names[i] \u003d parseCategoryName(categoryName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 10,
      "Woodnsuns": 33,
      "-": 106,
      "park-sang-jun": 32,
      "hotarumin": 8
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/RemoveCategoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RemoveCategoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Parses input arguments and creates a new RemoveCategoryCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class RemoveCategoryCommandParser implements Parser\u003cRemoveCategoryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCategoryCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * and returns an RemoveCategoryCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public RemoveCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    RemoveCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String categoryName \u003d ParserUtil.parseCategoryName(argMultimap.getValue(CliSyntax.PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new RemoveCategoryCommand(categoryName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 39
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/SchedulePlannerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddRepeatCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ClearCategoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCategoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FilterStrictCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FirstDayCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListArchivedCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListDayCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListMonthCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListOverdueCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListWeekCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ProgressTodayCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ProgressWeekCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RemoveCategoryCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ShowTagsCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class SchedulePlannerParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        case AddCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new AddCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        case EditCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new EditCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        case RemoveCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new RemoveCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        case ClearCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new ClearCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        case AddRepeatCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            return new AddRepeatCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case FirstDayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return new FirstDayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case FilterStrictCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            return new FilterStrictCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        case ListArchivedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new ListArchivedCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case ListDayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return new ListDayCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        case ListMonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            return new ListMonthCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        case ListOverdueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            return new ListOverdueCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        case ListWeekCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return new ListWeekCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        case ProgressTodayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return new ProgressTodayCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        case ProgressWeekCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return new ProgressWeekCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        case ShowTagsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return new ShowTagsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 11,
      "Woodnsuns": 28,
      "thaddeuslzy": 12,
      "-": 90,
      "park-sang-jun": 8,
      "hotarumin": 13
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/logic/parser/ShowTagsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ShowTagsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Parses input arguments and creates a new ShowTagsCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ShowTagsCommandParser implements Parser\u003cShowTagsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowTagsCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * and returns a ShowTagsCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ShowTagsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    ShowTagsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String categoryName \u003d ParserUtil.parseCategoryName(argMultimap.getValue(CliSyntax.PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return new ShowTagsCommand(categoryName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 40
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /** {@code Predicate} that always evaluate to true*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_ARCHIVED_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void resetData(ReadOnlySchedulePlanner newData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /** Returns the SchedulePlanner */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    ReadOnlySchedulePlanner getSchedulePlanner();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Check through the archived task list and deletes tasks with date earlier than one week ago."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void autoDeleteArchived();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the Schedule Planner."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if a archived task with the same identity as {@code archivedTask} exists"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * in the Schedule Planner."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    boolean hasArchivedTask(Task archivedTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if given category contains tag with same name as {@code tag}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    boolean hasTagInCategory(Tag tag, Category category);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Change name of a category."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void editCategory(String original, String categoryName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Remove the entire category together with tags stored under this category."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void removeCategory(String name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Clears all existing tags of selected category."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void clearCategory(String name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The task must exist in the Schedule Planner."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code task} must not already exist in the Schedule Planner."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Archive the given task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void archiveTask(Task task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds the given category into schedule planner."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void addCategory(String name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds the given tag."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code tag} must not already exist under any existing category in Schedule Planner."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void addTag(Tag tag, String categoryName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code target} must exist in the Schedule Planner."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the Schedule Planner."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void updateTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered archived task list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredArchivedTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /** Returns an unmodifiable view of the categories. */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    ObservableList\u003cCategory\u003e getCategoryList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**Returns a category according to given name.*/"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    Category getCategory(String name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**Check if there is category with same name as {@code name} exists*/"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    boolean hasCategory(String name);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * updates the filter of filtered archived task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    void updateFilteredArchivedTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if the model has previous Schedule Planner states to restore."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    boolean canUndoSchedulePlanner();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if the model has undone Schedule Planner states to restore."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    boolean canRedoSchedulePlanner();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Restores the model\u0027s Schedule Planner to its previous state."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void undoSchedulePlanner();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Restores the model\u0027s Schedule Planner to its previously undone state."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void redoSchedulePlanner();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Saves the current Schedule Planner state for undo/redo."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void commitSchedulePlanner();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 30,
      "Woodnsuns": 67,
      "-": 48,
      "hotarumin": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Represents the in-memory model of the Schedule Planner data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final VersionedSchedulePlanner versionedSchedulePlanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final ObservableList\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredArchivedTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Initializes a ModelManager with the given Schedule Planner and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ModelManager(ReadOnlySchedulePlanner schedulePlanner, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(schedulePlanner, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        logger.fine(\"Initializing with Schedule Planner: \" + schedulePlanner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner \u003d new VersionedSchedulePlanner(schedulePlanner);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categories \u003d versionedSchedulePlanner.getCategoryList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedSchedulePlanner.getTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        filteredArchivedTasks \u003d new FilteredList\u003c\u003e(versionedSchedulePlanner.getArchivedTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this(new SchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Sort filtered tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return SortedList containing tasks sorted according to priority."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public SortedList\u003cTask\u003e sortFilteredTasks() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        SortedList\u003cTask\u003e sortedTasks \u003d filteredTasks.sorted((a, b) -\u003e Task.compare(a, b));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return sortedTasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void resetData(ReadOnlySchedulePlanner newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return versionedSchedulePlanner;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private void indicateSchedulePlannerChanged() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        raise(new SchedulePlannerChangedEvent(versionedSchedulePlanner));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void autoDeleteArchived() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        versionedSchedulePlanner.autoDeleteArchived();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return versionedSchedulePlanner.hasTask(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean hasArchivedTask(Task archivedTask) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(archivedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return versionedSchedulePlanner.hasArchivedTask(archivedTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return versionedSchedulePlanner.hasTagInCategory(tag, category);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner.removeTask(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean hasCategory(String name) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return versionedSchedulePlanner.hasCategory(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void editCategory(String original, String categoryName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        versionedSchedulePlanner.editCategory(original, categoryName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void removeCategory(String name) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        versionedSchedulePlanner.removeCategory(name);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void clearCategory(String name) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        versionedSchedulePlanner.clearCategory(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner.addTask(task);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void archiveTask(Task completedTask) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        versionedSchedulePlanner.archiveTask(completedTask);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void addTag(Tag tag, String categoryName) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        versionedSchedulePlanner.addTag(tag, categoryName);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void addCategory(String name) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category category \u003d new Category(name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        versionedSchedulePlanner.addCategory(category);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Category getCategory(String name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return versionedSchedulePlanner.getCategory(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner.updateTask(target, editedTask);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code versionedSchedulePlanner}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return FXCollections.unmodifiableObservableList(sortFilteredTasks());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredArchivedTaskList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredArchivedTasks);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void updateFilteredArchivedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        filteredArchivedTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean canUndoSchedulePlanner() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return versionedSchedulePlanner.canUndo();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean canRedoSchedulePlanner() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return versionedSchedulePlanner.canRedo();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void undoSchedulePlanner() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner.undo();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void redoSchedulePlanner() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner.redo();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        indicateSchedulePlannerChanged();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        versionedSchedulePlanner.commit();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return versionedSchedulePlanner.equals(other.versionedSchedulePlanner)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 (filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || this.sortFilteredTasks().equals(other.sortFilteredTasks()))"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 (getCategoryList().equals(other.getCategoryList()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 48,
      "Woodnsuns": 96,
      "thaddeuslzy": 1,
      "-": 100,
      "hotarumin": 5
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/ReadOnlySchedulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Unmodifiable view of an Schedule Planner"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public interface ReadOnlySchedulePlanner {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns an unmodifiable view of the archived tasks list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    ObservableList\u003cTask\u003e getArchivedTaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns an unmodifiable view of the categories."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    ObservableList\u003cCategory\u003e getCategoryList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 15,
      "Woodnsuns": 14,
      "-": 1
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/SchedulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.UniqueCategoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Wraps all data at the schedule-planner level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class SchedulePlanner implements ReadOnlySchedulePlanner {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final UniqueCategoryList categories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private final TaskList archivedTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categories \u003d new UniqueCategoryList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categories.add(new Category(\"Modules\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categories.add(new Category(\"Others\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archivedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public SchedulePlanner() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Creates an SchedulePlanner using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public SchedulePlanner(ReadOnlySchedulePlanner toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the contents of the archived task list with {@code archivedTasks}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setArchivedTasks(List\u003cTask\u003e archivedTasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.archivedTasks.setTasks(archivedTasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the contents of the category list with {@code categories}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setCategories(List\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.categories.setCategories(categories);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Remove selected category from schedule planner."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void removeCategory(String categoryName) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!this.hasCategory(categoryName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.categories.removeCategory(categoryName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Removes all tags from selected category."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void clearCategory(String name) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!this.hasCategory(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.categories.setCategory(name, new Category(name));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Change the name of selected category in schedule planner."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void editCategory(String originalName, String categoryName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.categories.setCategory(originalName, categoryName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Resets the existing data of this {@code SchedulePlanner} with {@code newData}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void resetData(ReadOnlySchedulePlanner newData) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        setCategories(newData.getCategoryList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        setArchivedTasks(newData.getArchivedTaskList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Check through the archived task list and deletes tasks with date earlier than one week ago."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void autoDeleteArchived() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archivedTasks.autoDelete();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task list of schedule planner."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if a archived task with the same identity as {@code archivedTask} exists in the archived task list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * of schedule planner."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean hasArchivedTask(Task archivedTask) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(archivedTask);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return archivedTasks.contains(archivedTask);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if given category is valid and contains given tag."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param category"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return (hasCategory(category.getName()) \u0026\u0026 category.hasTag(tag));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns if an existing category in schedule planner has the same name as {@code name}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean hasCategory(String name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return categories.contains(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds a task to the task list of schedule planner."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * The task must not already exist in the current task list of schedule planner."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Iterator tagIterator \u003d p.getTags().iterator();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        while (tagIterator.hasNext()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            boolean tagExists \u003d false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Tag nextTag \u003d (Tag) tagIterator.next();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Iterator catIterator \u003d getCategoryList().iterator();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            while (catIterator.hasNext()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                Category nextCat \u003d (Category) catIterator.next();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                if (nextCat.hasTag(nextTag)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    tagExists \u003d true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (!tagExists) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                addTag(nextTag, \"Others\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            continue;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Archive a done task."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void archiveTask(Task p) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archivedTasks.add(p);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        tasks.remove(p);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void addCategory(Category cat) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categories.add(cat);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds a tag to the given category of schedule planner."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * The tag must not already exist under given category."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void addTag(Tag tag, String categoryName) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category category \u003d categories.getCategory(categoryName);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        category.addTag(tag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds an archived task to archived task list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void addArchivedTask(Task p) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archivedTasks.add(p);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the schedule planner."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Removes {@code key} from this {@code SchedulePlanner}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return (tasks.asUnmodifiableObservableList().size() + \" tasks\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ObservableList\u003cTask\u003e getArchivedTaskList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return archivedTasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return categories.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Get corresponding category from schedule planner."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return category with the same name as given name."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Category getCategory(String name) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return categories.getCategory(name);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || (other instanceof SchedulePlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 categories.equals(((SchedulePlanner) other).categories)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 tasks.equals(((SchedulePlanner) other).tasks))"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 archivedTasks.equals(((SchedulePlanner) other).archivedTasks);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 110,
      "Woodnsuns": 169,
      "thaddeuslzy": 1,
      "-": 3
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //private Path schedulePlannerFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private Path schedulePlannerFilePath \u003d Paths.get(\"scheduleplanner.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        setGuiSettings(1000, 700, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Path getSchedulePlannerFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return schedulePlannerFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void setSchedulePlannerFilePath(Path schedulePlannerFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.schedulePlannerFilePath \u003d schedulePlannerFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 Objects.equals(schedulePlannerFilePath, o.schedulePlannerFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Objects.hash(guiSettings, schedulePlannerFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + schedulePlannerFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 8,
      "Woodnsuns": 1,
      "thaddeuslzy": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/VersionedSchedulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * {@code SchedulePlanner} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class VersionedSchedulePlanner extends SchedulePlanner {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final List\u003cReadOnlySchedulePlanner\u003e schedulePlannerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public VersionedSchedulePlanner(ReadOnlySchedulePlanner initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        schedulePlannerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        schedulePlannerStateList.add(new SchedulePlanner(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Saves a copy of the current {@code SchedulePlanner} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        schedulePlannerStateList.add(new SchedulePlanner(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        schedulePlannerStateList.subList(currentStatePointer + 1, schedulePlannerStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Restores the schedule planner to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        resetData(schedulePlannerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Restores the schedule planner to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        resetData(schedulePlannerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Returns true if {@code undo()} has schedule planner states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Returns true if {@code redo()} has schedule planner states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return currentStatePointer \u003c schedulePlannerStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!(other instanceof VersionedSchedulePlanner)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        VersionedSchedulePlanner otherVersionedSchedulePlanner \u003d (VersionedSchedulePlanner) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return super.equals(otherVersionedSchedulePlanner)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 schedulePlannerStateList.equals(otherVersionedSchedulePlanner.schedulePlannerStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedSchedulePlanner.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            super(\"Current state pointer at start of schedulePlannerState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            super(\"Current state pointer at end of schedulePlannerState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 19,
      "thaddeuslzy": 4,
      "-": 86
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/category/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * A category has a name and contains a list of tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Category name should only contain alphanumeric characters and spaces, and it should not be blank \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                   + \"Example: Steam discount list, Projects\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String CATEGORY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private UniqueTagList tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Category(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Category(String name, UniqueTagList tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return test.matches(CATEGORY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 name.equals(((Category) other).getName())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 (tags.equals(((Category) other).getUniqueTagList())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                || getTags().equals(((Category) other).getTags()))); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Check if two categories are the same"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return true if name and tag list of two categories are the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean isSameCategory(Category other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (other !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return this.equals(other);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds a tag into this category if it does not contain this tag yet."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ObservableList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public UniqueTagList getUniqueTagList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return this.tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if a tag with the same name as {@code tag} exists in the tag list of this category."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 94
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/category/UniqueCategoryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.exceptions.DuplicateCategoryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * UniqueCategoryList which contains categories of this schedule planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Duplicate categories are not allowed in UniqueCategoryList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class UniqueCategoryList implements Iterable\u003cCategory\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private ObservableList\u003cCategory\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ObservableList\u003cCategory\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds a category to the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void add(Category toAdd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Iterator\u003cCategory\u003e iterator() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if the category list contains an equivalent category as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean contains(Category toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCategory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if the category list contains a category with same name as {@code name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean contains(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Iterator catIterator \u003d internalList.iterator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (internalList.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        while (catIterator.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Category nextCategory \u003d (Category) catIterator.next();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (name.equals(nextCategory.getName())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the contents of this list with {@code categories}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code categories} must not contain duplicate categories."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setCategories(UniqueCategoryList replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setCategories(List\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireAllNonNull(categories);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!categoriesAreUnique(categories)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.setAll(categories);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Remove selected category from schedule planner."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void removeCategory(String name) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category category \u003d getCategory(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.remove(category);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Change the name of an existing category."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setCategory(String originalName, String newName) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(originalName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(newName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if ((!contains(originalName))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (newName.equals(originalName)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category oldCategory \u003d getCategory(originalName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category newCategory \u003d new Category(newName, oldCategory.getUniqueTagList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.set(internalList.indexOf(oldCategory), newCategory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replace existing category with given name with given new category."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setCategory(String originalName, Category newCategory) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(originalName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(newCategory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if ((!contains(originalName))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category oldCategory \u003d getCategory(originalName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.set(internalList.indexOf(oldCategory), newCategory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if {@code categories} contains only unique categories."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private boolean categoriesAreUnique(List\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        for (int i \u003d 0; i \u003c categories.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            for (int j \u003d i + 1; j \u003c categories.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                if (categories.get(i).isSameCategory(categories.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other instanceof UniqueCategoryList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (internalList.equals(((UniqueCategoryList) other).internalList)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            boolean isSameCategoryList \u003d true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            UniqueCategoryList otherCats \u003d (UniqueCategoryList) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Iterator catIterator \u003d otherCats.internalList.iterator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            while (catIterator.hasNext() \u0026\u0026 isSameCategoryList) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                Category nextOtherCategory \u003d (Category) catIterator.next();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                Category nextCategory \u003d getCategory(nextOtherCategory.getName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                isSameCategoryList \u003d isSameCategoryList"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                        \u0026\u0026 (nextOtherCategory.equals(nextCategory));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return isSameCategoryList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Category getCategory(String name) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Iterator catIterator \u003d internalList.iterator();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        while (catIterator.hasNext()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Category nextCat \u003d (Category) catIterator.next();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (name.equals(nextCat.getName())) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return nextCat;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 183
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/category/exceptions/CategoryNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.model.category.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class CategoryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 6
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/category/exceptions/DuplicateCategoryException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.model.category.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class DuplicateCategoryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public DuplicateCategoryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        super(\"Operation would result in duplicate categories\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 11
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/rangeofweek/RangeOfWeek.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.model.rangeofweek;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static ssp.scheduleplanner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Represents a rangeOfWeek for the schedule planner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class RangeOfWeek {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final String startOfWeekDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final String endOfWeekDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public RangeOfWeek(String startOfWeekDate, String endOfWeekDate, String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireAllNonNull(startOfWeekDate, endOfWeekDate, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.startOfWeekDate \u003d startOfWeekDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.endOfWeekDate \u003d endOfWeekDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String getStartOfWeekDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return startOfWeekDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String getEndOfWeekDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return endOfWeekDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if both object have same fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        RangeOfWeek otherRangeOfWeek \u003d (RangeOfWeek) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return otherRangeOfWeek !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherRangeOfWeek.getStartOfWeekDate().equals(getStartOfWeekDate())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherRangeOfWeek.getEndOfWeekDate().equals(getEndOfWeekDate())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherRangeOfWeek.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Objects.hash(startOfWeekDate, endOfWeekDate, description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        builder.append(\" Start of Week: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(getStartOfWeekDate())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" End of Week: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(getEndOfWeekDate())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 72
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Represents a Tag in the Schedule Planner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Tags names should be alphanumeric and should not contain any space\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Please add t/ in front of each tag name! \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Example: t/Game t/Steam t/Overwatch\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_TAG_NONEXISTENT \u003d \"Tag not found. Please add tag first.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return true if two tags have the same name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean isSameTag(Tag other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 this.equals(other);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Getter method for the Tag\u0027s name in String format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * @return String representation of Tag\u0027s name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "Woodnsuns": 21,
      "thaddeuslzy": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/tag/UniqueTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * A tags is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding and updating of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * tags uses Tag#isSameTag(Tag) for equality so as to ensure that the tag being added is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * unique in terms of identity in the UniqueTagList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds a tag to the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * The tag must not already exist in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other instanceof UniqueTagList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (internalList.equals(((UniqueTagList) other).internalList)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                Object[] tags \u003d (((UniqueTagList) other).internalList).toArray();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                boolean isSameTagList \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                int i \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                while (isSameTagList \u0026\u0026 i \u003c tags.length) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    isSameTagList \u003d isSameTagList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                            \u0026\u0026 internalList.contains(tags[i]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return isSameTagList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setTag(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 126
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/tag/exceptions/DuplicateTagException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Signals that the operation will result in duplicate Tags (Tags are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 11
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Represents a Task\u0027s date in the Schedule Planner."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Date format should be: ddmmyy \\nExample: 191219 will be 19th Dec, 2019\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            + \"Please make sure your date is valid ^ ^ \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{6}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public final int yymmdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public final Calendar calendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public final String displayDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public final String[] monthNames \u003d {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String dayString \u003d date.substring(0, 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        int day \u003d Integer.parseInt(dayString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String monthString \u003d date.substring(2, 4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        int month \u003d Integer.parseInt(monthString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String yearString \u003d date.substring(4, 6);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        int year \u003d Integer.parseInt(yearString) + 2000;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        calendar.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        calendar.set(Calendar.MONTH, month - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        calendar.set(Calendar.DATE, day);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        yymmdd \u003d Integer.parseInt(yearString + monthString + dayString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        displayDate \u003d dayString + \" \" + monthNames[month - 1] + \" \" + year;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (!test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String dayString \u003d test.substring(0, 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int day \u003d Integer.parseInt(dayString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String monthString \u003d test.substring(2, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int month \u003d Integer.parseInt(monthString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String yearString \u003d test.substring(4, 6);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int year \u003d Integer.parseInt(yearString) + 2000;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (month \u003e 12 || month \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        } else if (day \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        } else if (isLargeMonth(month)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return day \u003c\u003d 31;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            if (isLeapYear(year)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                return day \u003c\u003d 29;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                return day \u003c\u003d 28;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return day \u003c\u003d 30;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Returns true if a given year is a leap year."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @param year A year"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (year % 4 !\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        } else if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        } else if (year % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Returns true if a given month has 31 days."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @param month A month"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static boolean isLargeMonth(int month) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                || month \u003d\u003d 7 || month \u003d\u003d 8"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                || month \u003d\u003d 10 || month \u003d\u003d 12;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Compare two dates."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param b"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return -1 if a is an earlier date than b, 0 if a and b are equal,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 1 if a is a later date than b."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static int compare(Date a, Date b) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (a.yymmdd \u003c b.yymmdd) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else if (a.yymmdd \u003d\u003d b.yymmdd) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 36,
      "Woodnsuns": 19,
      "-": 4,
      "park-sang-jun": 13,
      "hotarumin": 70
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/DateSamePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Date} matches the current system date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class DateSamePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public DateSamePredicate(String date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return date.equals(task.getDate().value);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || (other instanceof DateSamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 date.equals(((DateSamePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 26,
      "-": 1
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/DateWeekSamePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Date} matches the current list of system date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class DateWeekSamePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private final List\u003cString\u003e dates;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public DateWeekSamePredicate(List\u003cString\u003e date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        this.dates \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return dates.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .anyMatch(date -\u003e StringUtil.containsWordIgnoreCase(task.getDate().value, date));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || (other instanceof DateWeekSamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                \u0026\u0026 dates.equals(((DateWeekSamePredicate) other).dates)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 25,
      "thaddeuslzy": 4,
      "-": 2
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/Interval.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " * This class encapsulates information about the Interval class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " * It is used for the AddRepeatCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class Interval {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_INTERVAL_CONSTRAINTS \u003d \"Interval should be positive integer\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            + \"Where the number refers to the interval between repetitions.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String INTERVAL_VALIDATION_REGEX \u003d \"\\\\b\\\\d{1,4}\\\\b\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public Interval(String interval) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        requireNonNull(interval);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        checkArgument(isValidInterval(interval), MESSAGE_INTERVAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        value \u003d interval;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Returns if a given string is a valid interval."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * @param test The number of intervals in String format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static boolean isValidInterval(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (!test.matches(INTERVAL_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        int intValue \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return intValue \u003e 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                || (other instanceof Repeat"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                \u0026\u0026 value.equals(((Repeat) other).value));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 46,
      "hotarumin": 6
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Represents a Task\u0027s name in the Schedule Planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            \"Task name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param b"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static int compare(Name a, Name b) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (((a.toString()).compareTo(b.toString())) \u003c 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else if (((a.toString()).compareTo(b.toString())) \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "Woodnsuns": 16,
      "-": 57
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/OverduePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " * This encapsulates the information regarding the OverduePredicate class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class OverduePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private final int date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public OverduePredicate(int date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * A function to see if the date of the task is before or after the current date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * @param task The task to test."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * @return true if the task\u0027s date is after the current date, false if the task\u0027s date is before."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return date - task.getDate().yymmdd \u003e 0 ? true : false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                || (other instanceof OverduePredicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                \u0026\u0026 date \u003d\u003d ((OverduePredicate) other).date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 32
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/Priority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Represents a Task\u0027s priority in the Schedule Planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d \"Priority should be only 1, 2 or 3\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            + \"Where 1 is the lowest priority level and 3 is the highest priority level\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    // value 1,2 or 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[123]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Constructs an {@code Priority}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param priority A valid priority."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return test.matches(PRIORITY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return Integer value of this priority."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public int toInt() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param b"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return -1 if a has smaller integer value than b,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 0 if integer value of a equals to b."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 1 if integer value of a is larger than b."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static int compare(Priority a, Priority b) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (a.toInt() \u003e b.toInt()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else if (a.toInt() \u003d\u003d b.toInt()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 50,
      "Woodnsuns": 24,
      "-": 4
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/Repeat.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " * Represents the number of times a Task is to be repeated in Schedule Planner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class Repeat {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static final String MESSAGE_REPEAT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            \"Repeat should be an integer greater than 1 but less than 16.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            + \"Where the number refers to the number of repetitions.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String REPEAT_VALIDATION_REGEX \u003d \"\\\\b\\\\d{1,3}\\\\b\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public Repeat(String repeat) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        requireNonNull(repeat);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        checkArgument(isValidRepeat(repeat), MESSAGE_REPEAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        value \u003d repeat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * Returns if a given string is a valid number of repetitions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * @param test The number of repetitions in String format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public static boolean isValidRepeat(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (!test.matches(REPEAT_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        int intValue \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return intValue \u003e 0 \u0026\u0026 intValue \u003c 16;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                || (other instanceof Repeat"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                \u0026\u0026 value.equals(((Repeat) other).value));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 48,
      "hotarumin": 5
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/TagsContainsAllKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Tag(s)} matches all of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class TagsContainsAllKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public TagsContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Set\u003cTag\u003e tags \u003d task.getTags();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Due to a property of allMatch, called vacuous truth, an empty stream returns true for all tests. However"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // in this case, we do not want to return all tasks in the case of no keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                .allMatch(keyword -\u003e tags.stream().anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.getTagName(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                keyword)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                || (other instanceof TagsContainsAllKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsAllKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 40
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/TagsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Tag(s)} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Set\u003cTag\u003e tags \u003d task.getTags();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                .anyMatch(keyword -\u003e tags.stream().anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.getTagName(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                keyword)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 35
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Represents a Task in the schedule planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final Venue venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Task(Name name, Date date, Priority priority, Venue venue, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, date, priority, venue, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if both  of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName()) \u0026\u0026 otherTask.getDate().equals(getDate())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 otherTask.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherTask.getDate().equals(getDate())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherTask.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Objects.hash(name, date, priority, venue, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(getVenue())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Compare two tasks according to their priority or name."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param b"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @return -1 if Task a has lower priority than Task b,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 0 if same priority,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 1 if Task a has higher priority."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static int compare(Task a, Task b) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        int result \u003d Date.compare(a.getDate(), b.getDate());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (result \u003d\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            result \u003d Priority.compare(a.getPriority(), b.getPriority());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (result \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                result \u003d Name.compare(a.getName(), b.getName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 114,
      "Woodnsuns": 20,
      "-": 4,
      "hotarumin": 1
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/TaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * List for tasks that allows duplicates, used for archived tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Check through the task list and deletes tasks with date earlier than one week ago."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void autoDelete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Calendar expireTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expireTime.add(Calendar.DAY_OF_MONTH, -14);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        java.util.Date expireDate \u003d expireTime.getTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Iterator iterator \u003d this.iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Task nextTask \u003d (Task) iterator.next();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            java.util.Date date \u003d nextTask.getDate().calendar.getTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (date.compareTo(expireDate) \u003c 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setTasks(TaskList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        SortedList\u003cTask\u003e sortedList \u003d internalList.sorted((a, b) -\u003e Task.compare(a, b));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else if (other instanceof TaskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            SortedList\u003cTask\u003e otherSortedList \u003d ("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    (TaskList) other).internalList.sorted((a, b) -\u003e Task.compare(a, b));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (internalList.equals(((TaskList) other).internalList)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            } else if (sortedList.equals(otherSortedList)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 137
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        SortedList\u003cTask\u003e sortedList \u003d internalList.sorted((a, b) -\u003e Task.compare(a, b));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        } else if (other instanceof UniqueTaskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            SortedList\u003cTask\u003e otherSortedList \u003d ("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    (UniqueTaskList) other).internalList.sorted((a, b) -\u003e Task.compare(a, b));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (internalList.equals(((UniqueTaskList) other).internalList)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            } else if (sortedList.equals(otherSortedList)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 126,
      "Woodnsuns": 17,
      "-": 6
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/Venue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Represents a Task\u0027s venue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Constructs an {@code Venue}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Venue(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || (other instanceof Venue // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 value.equals(((Venue) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 5,
      "-": 51,
      "hotarumin": 2
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 5,
      "-": 1
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Contains utility methods for populating {@code SchedulePlanner} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE Do 2100 Tutorial\"), new Date(\"011118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"CS2100\", \"Sample\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE Do 2101 Assignment\"), new Date(\"011118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"CS2101\", \"Sample\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE 2103 Tutorial Prep\"), new Date(\"061118\"), new Priority(\"2\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"CS2103\", \"Tutorial\", \"Sample\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE 2100 Tutorial Prep\"), new Date(\"051118\"), new Priority(\"2\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new Venue(\"COM1\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"CS2100\", \"Tutorial\", \"Sample\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE 2103 PE Dry Run\"), new Date(\"021118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new Venue(\"I3\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"CS2103\", \"Sample\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE Groceries for Mum\"), new Date(\"311018\"), new Priority(\"1\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new Venue(\"Clementi Fairprice\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"Errands\", \"Sample\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE TGIF\"), new Date(\"021118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new Venue(\"Zouk\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"Party\", \"Sample\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 2100 Lecture Prep\"), new Date(\"031118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"CS2100\", \"Sample\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 2106 Tutorial Prep\"), new Date(\"041118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"CS2106\", \"Sample\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 2103 Tutorial Prep\"), new Date(\"081118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"CS2103\", \"Sample\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 2334 Quiz Prep\"), new Date(\"111118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"ST2334\", \"Sample\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 2103 Demo Prep\"), new Date(\"151118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"CS2103\", \"Sample\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 2103 PE Prep\"), new Date(\"161118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"CS2103\", \"Sample\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 2100 Tutorial Prep\"), new Date(\"171118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"CS2100\", \"Sample\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new Task(new Name(\"SAMPLE 1231 Tutorial Prep\"), new Date(\"181118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getTagSet(\"CS1231\", \"Sample\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            new Task(new Name(\"SAMPLE Watch 2103 Lecture\"), new Date(\"291118\"), new Priority(\"3\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new Venue(\"Home\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                getTagSet(\"CS2100\", \"Sample\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static ReadOnlySchedulePlanner getSampleSchedulePlanner() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        SchedulePlanner sampleAb \u003d new SchedulePlanner();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 33,
      "thaddeuslzy": 22,
      "-": 35
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/SchedulePlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Represents a storage for {@link SchedulePlanner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public interface SchedulePlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    Path getSchedulePlannerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns SchedulePlanner data as a {@link ReadOnlySchedulePlanner}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @see #getSchedulePlannerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Saves the given {@link ReadOnlySchedulePlanner} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param schedulePlanner cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @see #saveSchedulePlanner(ReadOnlySchedulePlanner)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 12,
      "-": 34
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public interface Storage extends SchedulePlannerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    Path getSchedulePlannerFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Saves the current version of the Schedule Planner to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    void handleSchedulePlannerChangedEvent(SchedulePlannerChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 6,
      "-": 33
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Manages storage of SchedulePlanner data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private SchedulePlannerStorage schedulePlannerStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public StorageManager(SchedulePlannerStorage schedulePlannerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.schedulePlannerStorage \u003d schedulePlannerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SchedulePlanner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Path getSchedulePlannerFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return schedulePlannerStorage.getSchedulePlannerFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return readSchedulePlanner(schedulePlannerStorage.getSchedulePlannerFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return schedulePlannerStorage.readSchedulePlanner(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        saveSchedulePlanner(schedulePlanner, schedulePlannerStorage.getSchedulePlannerFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        schedulePlannerStorage.saveSchedulePlanner(schedulePlanner, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void handleSchedulePlannerChangedEvent(SchedulePlannerChangedEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            saveSchedulePlanner(event.data);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 18,
      "-": 76
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlAdaptedCategory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class XmlAdaptedCategory {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Category\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tag list of the category contains duplicate tag(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tags \u003d new ArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Constructs an XmlAdaptedCategory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public XmlAdaptedCategory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Constructs an {@code XmlAdaptedCategory} with the given category details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public XmlAdaptedCategory(String name, List\u003cXmlAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Converts a given Category into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCategory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public XmlAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        tags.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Converts this jaxb-friendly adapted category object into the model\u0027s Category object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category category \u003d new Category(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        for (XmlAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Tag modelTag \u003d tag.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (category.hasTag(modelTag)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            category.addTag(modelTag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (!(other instanceof XmlAdaptedCategory)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        boolean isSameCategory \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        if (name.equals(((XmlAdaptedCategory) other).name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (tags.size() \u003d\u003d ((XmlAdaptedCategory) other).tags.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                int i \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                while (isSameCategory \u0026\u0026 (i \u003c tags.size())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    isSameCategory \u003d isSameCategory"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                            \u0026\u0026 (tags.contains(((XmlAdaptedCategory) other).tags.get(i)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                return isSameCategory;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 100
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlAdaptedRangeOfWeek.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.rangeofweek.RangeOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * JAXB-friendly version of the rangeOfWeek."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlAdaptedRangeOfWeek {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"RangeOfWeek\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String startOfWeekDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String endOfWeekDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Constructs an XmlAdaptedRangeOfWeek."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlAdaptedRangeOfWeek() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Constructs an {@code XmlAdaptedRangeOfWeek} with the given task details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlAdaptedRangeOfWeek(String startOfWeekDate, String endOfWeekDate, String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.startOfWeekDate \u003d startOfWeekDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.endOfWeekDate \u003d endOfWeekDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Converts a given RangeOfWeek into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedRangeOfWeek"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlAdaptedRangeOfWeek(RangeOfWeek source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        startOfWeekDate \u003d source.getStartOfWeekDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        endOfWeekDate \u003d source.getEndOfWeekDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Converts this jaxb-friendly adapted rangeOfWeek object into the model\u0027s rangeOfWeek object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public RangeOfWeek toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (startOfWeekDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    RangeOfWeek.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!Date.isValidDate(startOfWeekDate)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (endOfWeekDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    RangeOfWeek.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!Date.isValidDate(endOfWeekDate)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    RangeOfWeek.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new RangeOfWeek(startOfWeekDate, endOfWeekDate, description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String getStartOfWeekDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return startOfWeekDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String getEndOfWeekDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return endOfWeekDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        sb.append(startOfWeekDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        sb.append(endOfWeekDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!(other instanceof XmlAdaptedRangeOfWeek)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek otherRangeOfWeek \u003d (XmlAdaptedRangeOfWeek) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Objects.equals(startOfWeekDate, otherRangeOfWeek.startOfWeekDate)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 Objects.equals(endOfWeekDate, otherRangeOfWeek.endOfWeekDate)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherRangeOfWeek.description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 117
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlAdaptedTask {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Constructs an XmlAdaptedTask."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlAdaptedTask() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Constructs an {@code XmlAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlAdaptedTask(String name, String date, String priority, String venue, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Converts a given Task into this class for JAXB use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedTask"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        venue \u003d source.getVenue().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!Venue.isValidAddress(venue)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalValueException(Venue.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new Task(modelName, modelDate, modelPriority, modelVenue, modelTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!(other instanceof XmlAdaptedTask)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Objects.equals(name, otherTask.name)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherTask.date)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 Objects.equals(priority, otherTask.priority)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 Objects.equals(venue, otherTask.venue)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 tagged.equals(otherTask.tagged);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 47,
      "-": 89,
      "hotarumin": 2
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Stores scheduleplanner data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Saves the given scheduleplanner data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableSchedulePlanner schedulePlanner)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlUtil.saveDataToFile(file, schedulePlanner);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Saves the given scheduleplanner rangeOfWeek data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static void saveWeekDataToFile(Path file, XmlSerializableRangeOfWeek rangeOfWeek)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlUtil.saveDataToFile(file, rangeOfWeek);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns schedule planner in the file or an empty schedule planner"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static XmlSerializableSchedulePlanner loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableSchedulePlanner.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns rangeOfWeek in the file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static XmlSerializableRangeOfWeek loadWeekDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableRangeOfWeek.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 31,
      "-": 32
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlSchedulePlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A class to access SchedulePlanner data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlSchedulePlannerStorage implements SchedulePlannerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlSchedulePlannerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlSchedulePlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Path getSchedulePlannerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return readSchedulePlanner(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Similar to {@link #readSchedulePlanner()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            logger.info(\"SchedulePlanner file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        XmlSerializableSchedulePlanner xmlSchedulePlanner \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return Optional.of(xmlSchedulePlanner.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        saveSchedulePlanner(schedulePlanner, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Similar to {@link #saveSchedulePlanner(ReadOnlySchedulePlanner)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(schedulePlanner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableSchedulePlanner(schedulePlanner));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Similar to {@link #saveRangeOfWeek(String[][], Path)}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void saveRangeOfWeek(String[][] src, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(src);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlFileStorage.saveWeekDataToFile(filePath, new XmlSerializableRangeOfWeek(src));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 29,
      "Woodnsuns": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlSerializableRangeOfWeek.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * An Immutable rangeOfWeek for schedule planner that is serializable to XML format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "@XmlRootElement(name \u003d \"rangeofweek\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlSerializableRangeOfWeek {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final int WEEKS_IN_SEMESTER \u003d 17;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private List\u003cXmlAdaptedRangeOfWeek\u003e rangeOfWeeks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Creates an empty XmlSerializableRangeOfWeek."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlSerializableRangeOfWeek() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlSerializableRangeOfWeek(String[][] src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            rangeOfWeeks.add(new XmlAdaptedRangeOfWeek(src[i][0], src[i][1], src[i][2]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public int returnSize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return rangeOfWeeks.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Conversion from RangeOfWeeks to 2d array"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String[][] convertRangeOfWeeksToString2dArray(XmlSerializableRangeOfWeek rangeOfWeek) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String[][] string2dArray \u003d new String[WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            string2dArray[i][0] \u003d rangeOfWeeks.get(i).getStartOfWeekDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            string2dArray[i][1] \u003d rangeOfWeeks.get(i).getEndOfWeekDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            string2dArray[i][2] \u003d rangeOfWeeks.get(i).getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return string2dArray;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * The following code is referenced from:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method check if the date data from storage is modified into invalid date format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * or if the date range is invalid (startOfWeek value is after endOfWeek value or vice versa"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return return false if invalid date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean checkIfValidDateOrRangeFromStorage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String[][] string2dArray \u003d new String[WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (!Date.isValidDate(rangeOfWeeks.get(i).getStartOfWeekDate())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    || !Date.isValidDate(rangeOfWeeks.get(i).getEndOfWeekDate())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            LocalDate firstDate \u003d LocalDate.parse(rangeOfWeeks.get(i).getStartOfWeekDate(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            LocalDate lastDate \u003d LocalDate.parse(rangeOfWeeks.get(i).getEndOfWeekDate(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (firstDate.isAfter(lastDate) || lastDate.isBefore(firstDate)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * This method check if either value from storage is null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return return false if there is null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean checkIfNullValueFromStorage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String[][] string2dArray \u003d new String[WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (rangeOfWeeks.get(i).getStartOfWeekDate() \u003d\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    || rangeOfWeeks.get(i).getEndOfWeekDate() \u003d\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    || rangeOfWeeks.get(i).getDescription() \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            sb.append(rangeOfWeeks.get(i).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!(other instanceof XmlSerializableRangeOfWeek)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return rangeOfWeeks.equals(((XmlSerializableRangeOfWeek) other).rangeOfWeeks);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 125
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/storage/XmlSerializableSchedulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * An Immutable SchedulePlanner that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"scheduleplanner\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlSerializableSchedulePlanner {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"Category list contains duplicate category.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private List\u003cXmlAdaptedCategory\u003e categories;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTask\u003e tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private List\u003cXmlAdaptedTask\u003e archivedTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Creates an empty XmlSerializableSchedulePlanner."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlSerializableSchedulePlanner() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archivedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public XmlSerializableSchedulePlanner(ReadOnlySchedulePlanner src) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        categories.addAll(src.getCategoryList().stream().map(XmlAdaptedCategory::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archivedTasks.addAll(src.getArchivedTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Converts this schedule planner into the model\u0027s {@code SchedulePlanner} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code XmlAdaptedTask}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public SchedulePlanner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        SchedulePlanner schedulePlanner \u003d new SchedulePlanner();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        for (XmlAdaptedCategory c: categories) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Category category \u003d c.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            String name \u003d category.getName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (name.equals(\"Modules\") || name.equals(\"Others\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                schedulePlanner.removeCategory(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (schedulePlanner.hasCategory(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            schedulePlanner.addCategory(category);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTask p : tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            Task task \u003d p.toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            if (schedulePlanner.hasTask(task)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            schedulePlanner.addTask(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        for (XmlAdaptedTask p : archivedTasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            Task archivedTask \u003d p.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            schedulePlanner.addArchivedTask(archivedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return schedulePlanner;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!(other instanceof XmlSerializableSchedulePlanner)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return (tasks.equals(((XmlSerializableSchedulePlanner) other).tasks))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 (archivedTasks.equals(((XmlSerializableSchedulePlanner) other).archivedTasks))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                \u0026\u0026 (categories.equals(((XmlSerializableSchedulePlanner) other).categories));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 9,
      "Woodnsuns": 37,
      "-": 56
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private SidebarPanel sidebarPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private TaskListPanel archivedTaskListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private BorderPane sidebarPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private StackPane progressbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        sidebarPanel \u003d new SidebarPanel(logic);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        sidebarPlaceholder.getChildren().add(sidebarPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getSchedulePlannerFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ProgressBarPanel progressBarPanel \u003d new ProgressBarPanel(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        progressbarPlaceholder.getChildren().add(progressBarPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Shows the archived task list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void showArchived() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        archivedTaskListPanel \u003d new TaskListPanel(logic.getFilteredArchivedTaskList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(archivedTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Shows the regular task list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void showTasks() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Handles the event to change the view"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @param event the event raised"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void handleChangeView(ChangeViewEvent event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        switch(event.getView()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        case NORMAL:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            showTasks();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        case ARCHIVE:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            showArchived();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 198,
      "hotarumin": 44
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/ui/ProgressBarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListWeekCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.task.DateSamePredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.task.DateWeekSamePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * A ui for the progress bars."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ProgressBarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProgressBarPanel.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String FXML \u003d \"ProgressBar.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ProgressBar today;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ProgressBar week;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Text todaylabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Text weeklabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ProgressBarPanel(Logic logic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        today.setPrefWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        today.setPrefHeight(30);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        week.setPrefWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        week.setPrefHeight(30);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        todaylabel.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        weeklabel.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        todaylabel.setFont(Font.font (\"Verdana\", 20));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        weeklabel.setFont(Font.font (\"Verdana\", 20));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        updateProgressBars(logic.getFilteredTaskList(), logic.getFilteredArchivedTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Updates both today and this week\u0027s progress bars."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * @param archivedTaskList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private void updateProgressBars(ObservableList\u003cTask\u003e taskList, ObservableList\u003cTask\u003e archivedTaskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String systemDate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new SimpleDateFormat(\"ddMMyy\").format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        FilteredList\u003cTask\u003e taskTodayList \u003d new FilteredList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        taskTodayList.setPredicate(new DateSamePredicate(systemDate));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        FilteredList\u003cTask\u003e archivedTaskTodayList \u003d new FilteredList\u003c\u003e(archivedTaskList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        archivedTaskTodayList.setPredicate(new DateSamePredicate(systemDate));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int uncompletedToday \u003d taskTodayList.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int completedToday \u003d archivedTaskTodayList.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int totalToday \u003d uncompletedToday + completedToday;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        double percentageToday \u003d (double) completedToday / (double) totalToday;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        today.setProgress(percentageToday);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        FilteredList\u003cTask\u003e filteredWeekTasks \u003d new FilteredList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        FilteredList\u003cTask\u003e filteredWeekArchivedTasks \u003d new FilteredList\u003c\u003e(archivedTaskList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String dateName \u003d LocalDate.now().getDayOfWeek().name();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ListWeekCommand.appendDateList(dateList, ListWeekCommand.numDaysTillSunday(dateName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        filteredWeekTasks.setPredicate(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        filteredWeekArchivedTasks.setPredicate(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int uncompleted \u003d filteredWeekTasks.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int completed \u003d filteredWeekArchivedTasks.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        int total \u003d uncompleted + completed;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        double percentageWeek \u003d (double) completed / (double) total;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        week.setProgress(percentageWeek);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void handleSchedulePlannerChangedEvent(SchedulePlannerChangedEvent e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        updateProgressBars(e.data.getTaskList(), e.data.getArchivedTaskList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 100
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/ui/SidebarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.control.Accordion;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.control.ToggleButton;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.control.ToggleGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ShowTagsRequestEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.ListElementPointer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * The Sidebar Panel of the App."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class SidebarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String FXML \u003d \"SidebarPanel.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ToggleButton today;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ToggleButton week;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Accordion accordion;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Text categorieslabel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ToggleGroup group;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public SidebarPanel(Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        this.historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        this.group \u003d new ToggleGroup();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        today.setToggleGroup(group);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        week.setToggleGroup(group);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        categorieslabel.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        today.setAlignment(Pos.BASELINE_LEFT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        week.setAlignment(Pos.BASELINE_LEFT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        setTags(logic.getCategoryList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Handles the sidebar button pressed event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private void handleShowView(ActionEvent event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String view \u003d (String) ((Node) event.getSource()).getUserData();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        switch (view) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                CommandResult commandResult \u003d logic.execute(\"listday\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                initHistory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                historySnapshot.next();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                logger.info(\"Invalid command: \" + \"listday\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                CommandResult commandResult \u003d logic.execute(\"listweek\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                initHistory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                historySnapshot.next();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                logger.info(\"Invalid command: \" + \"listweek\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void handleSchedulePlannerChangedEvent(SchedulePlannerChangedEvent e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        setTags(e.data.getCategoryList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private void setTags(ObservableList\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                accordion.getPanes().clear();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                for (Category cat : categories) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    String catName \u003d cat.getName();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    TitledPane catPane \u003d new TitledPane();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    catPane.setText(catName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    accordion.getPanes().add(catPane);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    ObservableList\u003cTag\u003e tags \u003d cat.getTags();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    VBox tagsContent \u003d new VBox();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    for (Tag tag : tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                        String tagName \u003d tag.getTagName();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                        Text tagLabel \u003d new Text(tagName);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                        tagLabel.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                        tagLabel.setFont(Font.font(\"Verdana\", 18));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                        tagsContent.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                    catPane.setContent(tagsContent);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void handleShowTagsRequestEvent(ShowTagsRequestEvent e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String catName \u003d e.getCategory();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ObservableList\u003cTitledPane\u003e titledPanes \u003d accordion.getPanes();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        for (TitledPane titledPane : titledPanes) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            if (titledPane.getText().equals(catName)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                accordion.setExpandedPane(titledPane);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 160
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void handleSchedulePlannerChangedEvent(SchedulePlannerChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on SchedulePlanner level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        date.setText(task.getDate().displayDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        priority.setText(task.getVenue().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        venue.setText(task.getPriority().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 12,
      "-": 57,
      "hotarumin": 1
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.TaskPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        setConnections(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private void setConnections(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        SortedList\u003cTask\u003e sortedList \u003d taskList.sorted((a, b) -\u003e Task.compare(a, b));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                        raise(new TaskPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 7,
      "Woodnsuns": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/ssp/scheduleplanner/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //need to modify scheduleplanner icon as this is only renaming"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/calendar.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 118,
      "hotarumin": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    background-color: #1f3a4c; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: linear-gradient("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            from 0px .75em to .75em 0px,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            repeat,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            -fx-accent 0%,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            -fx-accent 49%,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            derive(-fx-accent, 30%) 50%,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            derive(-fx-accent, 30%) 99%"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-box-border: white;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-control-inner-background: #1f3a4c;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #445866;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #283c49;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #476a82;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     -fx-border-color: derive(#1f3a4c, 10%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-color: derive(#1f3a4c, 25%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-color: derive(#1f3a4c, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 50%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-max-width: 500px;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #1f3a4c;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-alignment: left;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: derive(#1f3a4c, 50%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".titled-pane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-max-width: 500px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #1f3a4c;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".titled-pane \u003e .title {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #1f3a4c;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".titled-pane \u003e *.content {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #1f3a4c;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-color: #1f3a4c;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".titled-pane:focused {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #1f3a4c;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".titled-pane:focused \u003e .title {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #1f3a4c;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".toggle-button {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-max-width: 500px;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #1f3a4c;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-alignment: left;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".toggle-button:selected {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: #4f8bad;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ".toggle-button:selected:focused {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "#categorieslabel {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: transparent #1f3a4c transparent #1f3a4c;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-background-color: transparent, #1f3a4c, transparent, #1f3a4c;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "#sidebar {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    -fx-max-width: 300px;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 319,
      "hotarumin": 112
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    \u003cImage url\u003d\"@/images/calendar.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "          \u003cBorderPane fx:id\u003d\"sidebarPlaceholder\" prefWidth\u003d\"100\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "          \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "          \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cStackPane fx:id\u003d\"progressbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "hotarumin": 9
    }
  },
  {
    "path": "src/main/resources/view/ProgressBar.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003cGridPane fx:id\u003d\"progressbar\" styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "  \u003cText fx:id\u003d\"todaylabel\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Today\u0027s Progress\" wrappingWidth\u003d\"300\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "  \u003cProgressBar styleClass\u003d\"stack-pane\" fx:id\u003d\"today\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "  \u003cText fx:id\u003d\"weeklabel\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"This Week\u0027s Progress\" GridPane.columnIndex\u003d\"1\" nodeOrientation\u003d\"RIGHT_TO_LEFT\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "  \u003cProgressBar styleClass\u003d\"stack-pane\" fx:id\u003d\"week\" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 18
    }
  },
  {
    "path": "src/main/resources/view/SidebarPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.control.ToggleButton?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003cBorderPane fx:id\u003d\"sidebar\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     \u003cVBox prefWidth\u003d\"300\" spacing\u003d\"5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "         \u003cToggleButton fx:id\u003d\"today\" onAction\u003d\"#handleShowView\" text\u003d\"Today\" userData\u003d\"today\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "         \u003cToggleButton fx:id\u003d\"week\" onAction\u003d\"#handleShowView\" text\u003d\"This Week\" userData\u003d\"week\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "         \u003cText fx:id\u003d\"categorieslabel\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Categories\" wrappingWidth\u003d\"300\" textAlignment\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "         \u003cListView fx:id\u003d\"listview\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "             \u003cAccordion fx:id\u003d\"accordion\" prefWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "             \u003c/Accordion\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "         \u003c/ListView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 1,
      "hotarumin": 22
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "      \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/data/XmlSchedulePlannerStorageTest/invalidAndValidTaskSchedulePlanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModule\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c!-- Valid Task --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e9482424\u003c/date\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    \u003c!-- Task with invalid date field --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e948asdf2424\u003c/date\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 7,
      "Woodnsuns": 6,
      "-": 9,
      "hotarumin": 1
    }
  },
  {
    "path": "src/test/data/XmlSchedulePlannerStorageTest/invalidTaskSchedulePlanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModule\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c!-- Task with invalid name field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e111124\u003c/date\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003ehans@example.com\u003c/priority\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "Woodnsuns": 6,
      "-": 6,
      "hotarumin": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableRangeOfWeekTest/diffsizerangeofweek.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003crangeofweek\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e010118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e070118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 1\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/rangeofweek\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 8
    }
  },
  {
    "path": "src/test/data/XmlSerializableRangeOfWeekTest/invaliddaterangeofweek.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003crangeofweek\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003eaaaa\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e@@@@\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 1\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e080118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e140118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 2\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e150118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e210118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 3\u003c/description\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e220118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e280118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 4\u003c/description\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e290118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 5\u003c/description\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 6\u003c/description\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eRecess Week\u003c/description\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 7\u003c/description\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 8\u003c/description\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 9\u003c/description\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 10\u003c/description\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 11\u003c/description\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e010418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 12\u003c/description\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e020418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e080418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 13\u003c/description\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e090418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e150418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eStudy Week\u003c/description\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e160418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e220418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e230418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e290418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/rangeofweek\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 88
    }
  },
  {
    "path": "src/test/data/XmlSerializableRangeOfWeekTest/invaliddaterangerangeofweek.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003crangeofweek\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e070118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e010118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 1\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e080118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e140118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 2\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e150118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e210118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 3\u003c/description\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e220118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e280118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 4\u003c/description\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e290118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 5\u003c/description\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 6\u003c/description\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eRecess Week\u003c/description\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 7\u003c/description\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 8\u003c/description\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 9\u003c/description\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 10\u003c/description\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 11\u003c/description\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e010418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 12\u003c/description\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e020418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e080418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 13\u003c/description\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e090418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e150418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eStudy Week\u003c/description\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e160418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e220418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e230418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e290418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/rangeofweek\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 88
    }
  },
  {
    "path": "src/test/data/XmlSerializableRangeOfWeekTest/nullrangeofweek.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003crangeofweek\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e080118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e140118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 2\u003c/description\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e150118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e210118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 3\u003c/description\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e220118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e280118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 4\u003c/description\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e290118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 5\u003c/description\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 6\u003c/description\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eRecess Week\u003c/description\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 7\u003c/description\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 8\u003c/description\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 9\u003c/description\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 10\u003c/description\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 11\u003c/description\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e010418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 12\u003c/description\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e020418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e080418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 13\u003c/description\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e090418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e150418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eStudy Week\u003c/description\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e160418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e220418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e230418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e290418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/rangeofweek\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 85
    }
  },
  {
    "path": "src/test/data/XmlSerializableRangeOfWeekTest/typicalrangeofweek.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003crangeofweek\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e010118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e070118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 1\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e080118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e140118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 2\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e150118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e210118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 3\u003c/description\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e220118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e280118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 4\u003c/description\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e290118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 5\u003c/description\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 6\u003c/description\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eRecess Week\u003c/description\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 7\u003c/description\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 8\u003c/description\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 9\u003c/description\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 10\u003c/description\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 11\u003c/description\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e010418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 12\u003c/description\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e020418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e080418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 13\u003c/description\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e090418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e150418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eStudy Week\u003c/description\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e160418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e220418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e230418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e290418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/rangeofweek\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 88
    }
  },
  {
    "path": "src/test/data/XmlSerializableRangeOfWeekTest/unableconvertrangeofweek.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003crangeofweek\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e080118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e140118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 2\u003c/description\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e150118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e210118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 3\u003c/description\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e220118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e280118\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 4\u003c/description\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e290118\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 5\u003c/description\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 6\u003c/description\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eRecess Week\u003c/description\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250218\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 7\u003c/description\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260218\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e040318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 8\u003c/description\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e050318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e110318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 9\u003c/description\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e120318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e180318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 10\u003c/description\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e190318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e250318\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 11\u003c/description\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e260318\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e010418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 12\u003c/description\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e020418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e080418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eWeek 13\u003c/description\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e090418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e150418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eStudy Week\u003c/description\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e160418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e220418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003crangeOfWeeks\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cstartOfWeekDate\u003e230418\u003c/startOfWeekDate\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cendOfWeekDate\u003e290418\u003c/endOfWeekDate\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cdescription\u003eExamination Week\u003c/description\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c/rangeOfWeeks\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/rangeofweek\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 84
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulePlannerTest/duplicateTaskSchedulePlanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModule\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate\u003e120823\u003c/date\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003e123, Jurong West Ave 6, #08-111\u003c/venue\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c!-- Task with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate\u003e120823\u003c/date\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003e123, Jurong West Ave 6, #08-111\u003c/venue\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 6,
      "Woodnsuns": 6,
      "-": 12,
      "hotarumin": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulePlannerTest/invalidTaskSchedulePlanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModule\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003c!-- Task with invalid email field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e111124\u003c/date\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/priority\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "Woodnsuns": 6,
      "-": 6,
      "hotarumin": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulePlannerTest/typicalTasksSchedulePlanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- SchedulePlanner save file which contains the same Task values as in TypicalTasks#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModule\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate\u003e120823\u003c/date\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003e123, Jurong West Ave 6, #08-111\u003c/venue\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate\u003e130921\u003c/date\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003e311, Clementi Ave 2, #02-25\u003c/venue\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e131018\u003c/date\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003ewall street\u003c/venue\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e120823\u003c/date\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003e10th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e141018\u003c/date\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003emichegan ave\u003c/venue\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e131018\u003c/date\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003elittle tokyo\u003c/venue\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cdate\u003e141018\u003c/date\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 9,
      "Woodnsuns": 16,
      "thaddeuslzy": 1,
      "-": 29,
      "hotarumin": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidTaskField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c!-- Task with an invalid date field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003ctask\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003cdate\u003e9482asf424\u003c/date\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/task\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 6,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingTaskField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c!-- Task with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003ctask\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    \u003cdate\u003e111124\u003c/date\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/task\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 5,
      "-": 2,
      "hotarumin": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempSchedulePlanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModule\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 6,
      "-": 12
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validSchedulePlanner.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cscheduleplanner\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eModule\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003ccategories\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        \u003cname\u003eOthers\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    \u003c/categories\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e111124\u003c/date\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e120289\u003c/date\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e81th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e120312\u003c/date\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003ewall street\u003c/venue\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e040123\u003c/date\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e10th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e120312\u003c/date\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003emichegan ave\u003c/venue\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e230423\u003c/date\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003elittle tokyo\u003c/venue\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e080412\u003c/date\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e230412\u003c/date\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003elittle india\u003c/venue\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e300912\u003c/date\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003echicago ave\u003c/venue\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/scheduleplanner\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 6,
      "-": 49,
      "hotarumin": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validTask.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003ctask\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    \u003cdate\u003e111124\u003c/date\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003c/task\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 4,
      "-": 3,
      "hotarumin": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TaskListPanelHandle taskListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final SidebarPanelHandle sidebarPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final ProgressBarPanelHandle progressBarPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        sidebarPanel \u003d new SidebarPanelHandle(getChildNode(SidebarPanelHandle.SIDEBAR_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        progressBarPanel \u003d new ProgressBarPanelHandle(getChildNode(ProgressBarPanelHandle.PROGRESSBAR_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public SidebarPanelHandle getSidebarPanel() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return sidebarPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ProgressBarPanelHandle getProgressBarPanel() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return progressBarPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "hotarumin": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProgressBarPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * A handler for the {@code ProgressBarPanel} of the UI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ProgressBarPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String PROGRESSBAR_ID \u003d \"#progressbar\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final ProgressBar today;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final ProgressBar week;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ProgressBarPanelHandle(Node progressBarPanelNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        super(progressBarPanelNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        today \u003d getChildNode(\"#today\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        week \u003d getChildNode(\"#week\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public Double getTodayProgress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return today.getProgress();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public Double getWeekProgress() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return week.getProgress();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 30
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/SidebarPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.scene.control.Accordion;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * A handler for the {@code SidebarPanel} of the UI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class SidebarPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String SIDEBAR_ID \u003d \"#sidebar\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final Accordion accordion;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public SidebarPanelHandle(Node sidebarPanelNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        super(sidebarPanelNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        accordion \u003d getChildNode(\"#accordion\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public String getExpandedPaneName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return accordion.getExpandedPane().getText();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "hotarumin": 13
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Provides a handle to a task card in the task list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#priority\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#date\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#venue\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return getName().equals(task.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 getAddress().equals(task.getVenue().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                \u0026\u0026 getDate().equals(task.getDate().displayDate)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 getEmail().equals(task.getPriority().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 9,
      "-": 72,
      "hotarumin": 6
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cTask\u003e lastRememberedSelectedTaskCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cTask\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code TaskCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e selectedTaskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (selectedTaskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new AssertionError(\"Task list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedTaskList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Navigates the listview to display {@code task}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!getRootNode().getItems().contains(task)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            getRootNode().scrollTo(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code TaskCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns the task card handle of a task associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskCardHandle getTaskCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getTask(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code TaskCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedTaskCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedTaskCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedTaskCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedTaskCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedTaskCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 13,
      "-": 146
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WebViewUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods for dealing with {@code WebView}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class WebViewUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page in the {@code webView}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static URL getLoadedUrl(WebView webView) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * If the {@code sidebarPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static void waitUntilBrowserLoaded(SidebarPanelHandle sidebarPanelHandle) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        //new GuiRobot().waitForEvent(sidebarPanelHandle::isLoaded);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "hotarumin": 3
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.XmlSerializableSchedulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    protected Supplier\u003cReadOnlySchedulePlanner\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlySchedulePlanner\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            createDataFileWithData(new XmlSerializableSchedulePlanner(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    protected Config initConfig(Path configFilePath) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        userPrefs.setSchedulePlannerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns a defensive copy of the schedule planner data stored inside the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public SchedulePlanner readStorageSchedulePlanner() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return new SchedulePlanner(storage.readSchedulePlanner().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new AssertionError(\"Data is not in the SchedulePlanner format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return storage.getSchedulePlannerFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model copy \u003d new ModelManager((model.getSchedulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredTaskList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 13,
      "-": 108
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Schedule App\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.XmlAdaptedTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.XmlSerializableSchedulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.SchedulePlannerBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path MISSING_TASK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingTaskField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path INVALID_TASK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path VALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"validTask.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String INVALID_DATE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String VALID_DATE \u003d \"111124\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlUtil.getDataFromFile(null, SchedulePlanner.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, SchedulePlanner.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, SchedulePlanner.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        SchedulePlanner dataFromFile \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableSchedulePlanner.class).toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(9, dataFromFile.getTaskList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedTaskFromFile_fileWithMissingTaskField_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                MISSING_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                null, VALID_DATE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask, actualTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedTaskFromFile_fileWithInvalidTaskField_validResult() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                INVALID_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                VALID_NAME, INVALID_DATE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask, actualTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedTaskFromFile_fileWithValidTask_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_TASK_FILE, XmlAdaptedTaskWithRootElement.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                VALID_NAME, VALID_DATE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask, actualTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlUtil.saveDataToFile(null, new SchedulePlanner());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new SchedulePlanner());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlSerializableSchedulePlanner dataToWrite \u003d new XmlSerializableSchedulePlanner(new SchedulePlanner());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlSerializableSchedulePlanner dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlSerializableSchedulePlanner.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlannerBuilder builder \u003d new SchedulePlannerBuilder(new SchedulePlanner());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dataToWrite \u003d new XmlSerializableSchedulePlanner("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withTask(new TaskBuilder().build()).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableSchedulePlanner.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedTask}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @XmlRootElement(name \u003d \"task\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static class XmlAdaptedTaskWithRootElement extends XmlAdaptedTask {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 25,
      "-": 118,
      "hotarumin": 5
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        logic.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "-": 122
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/AddCategoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.testutil.CategoryBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class AddCategoryCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void constructor_nullCategory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        new AddCategoryCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_categoryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelStubAcceptingCategoryAdded modelStub \u003d new ModelStubAcceptingCategoryAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category validCategory \u003d new CategoryBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                new AddCategoryCommand(validCategory.getName()).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(String.format(AddCategoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                validCategory.getName()), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(Arrays.asList(validCategory), modelStub.categoriesAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_duplicateCategory_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category validModules \u003d new CategoryBuilder().withName(\"Modules\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category validOthers \u003d new CategoryBuilder().withName(\"Others\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddCategoryCommand addModulesCommand \u003d new AddCategoryCommand(validModules.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddCategoryCommand addOthersCommand \u003d new AddCategoryCommand(validOthers.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCategory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        thrown.expectMessage(AddCategoryCommand.MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        addModulesCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        addOthersCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category games \u003d new CategoryBuilder().withName(\"Games\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category queen \u003d new CategoryBuilder().withName(\"Queen\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddCategoryCommand addGamesCommand \u003d new AddCategoryCommand(\"Games\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddCategoryCommand addQueenCommand \u003d new AddCategoryCommand(\"Queen\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(addGamesCommand.equals(addGamesCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(addGamesCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(addGamesCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(addGamesCommand.equals(addQueenCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void archiveTask(Task completedTask) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void autoDeleteArchived() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void editCategory(String original, String newName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void clearCategory(String name) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void removeCategory(String name) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTag(Tag tag, String category) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addCategory(String name) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public Category getCategory(String category) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void resetData(ReadOnlySchedulePlanner newData) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasArchivedTask(Task archivedTask) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasCategory(String name) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredArchivedTaskList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void updateFilteredArchivedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean canUndoSchedulePlanner() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean canRedoSchedulePlanner() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void undoSchedulePlanner() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void redoSchedulePlanner() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * A Model stub that contains two default categories."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private class ModelStubWithCategory extends ModelStub {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        private final Category modules;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        private final Category others;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelStubWithCategory() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            this.modules \u003d new Category(\"Modules\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            this.others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasCategory(String category) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(category);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return (category.equals(\"Modules\") || category.equals(\"Others\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * A Model stub that always accept the category being added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private class ModelStubAcceptingCategoryAdded extends ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final ArrayList\u003cCategory\u003e categoriesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final Category modules \u003d new Category(\"Modules\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final Category others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final ArrayList\u003cCategory\u003e categories \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                new ArrayList\u003cCategory\u003e() {{"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    add(modules);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                    add(others);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                }};"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void autoDeleteArchived(){"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasCategory(String category) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(category);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return (category.equals(\"Modules\") || category.equals(\"Others\"));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addCategory(String name) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            categoriesAdded.add(new Category(name));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return FXCollections.observableArrayList(categories);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new SchedulePlanner();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 297
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task taskInList \u003d model.getSchedulePlanner().getTaskList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 9,
      "-": 40
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void archiveTask(Task completedTask) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void autoDeleteArchived() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTag(Tag tag, String category) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void editCategory(String original, String name) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void removeCategory(String name) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void clearCategory(String name) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addCategory(String name) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public Category getCategory(String category) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void resetData(ReadOnlySchedulePlanner newData) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasArchivedTask(Task archivedTask) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasCategory(String name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredArchivedTaskList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void updateFilteredArchivedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public boolean canUndoSchedulePlanner() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public boolean canRedoSchedulePlanner() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void undoSchedulePlanner() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void redoSchedulePlanner() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final Category modules \u003d new Category(\"Modules\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final Category others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final ArrayList\u003cCategory\u003e categories \u003d"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                new ArrayList\u003cCategory\u003e() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                add(modules);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                add(others);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        };"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void autoDeleteArchived(){"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTag(Tag tag, String category) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return FXCollections.observableArrayList(categories);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return new SchedulePlanner();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 37,
      "Woodnsuns": 93,
      "-": 167,
      "hotarumin": 5
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/AddRepeatCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Interval;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Repeat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class AddRepeatCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        new AddRepeatCommand(null, new Repeat(\"3\"), new Interval(\"3\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        CommandResult commandResult \u003d new AddRepeatCommand(validTask, new Repeat(\"2\"), new Interval(\"1\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task anotherValidTask \u003d (new TaskBuilder()).withDate(\"121155\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertEquals(String.format(AddRepeatCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertEquals(Arrays.asList(validTask, anotherValidTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void archiveTask(Task completedTask) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void autoDeleteArchived() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void addTag(Tag tag, String category) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void addCategory(String name) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void editCategory(String originalName, String newName) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void removeCategory(String name) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void clearCategory(String name) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public Category getCategory(String category) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void resetData(ReadOnlySchedulePlanner newData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean hasArchivedTask(Task archivedTask) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean hasCategory(String name) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredArchivedTaskList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void updateFilteredArchivedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean canUndoSchedulePlanner() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean canRedoSchedulePlanner() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void undoSchedulePlanner() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void redoSchedulePlanner() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        final Category modules \u003d new Category(\"Modules\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        final Category others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        final ArrayList\u003cCategory\u003e categories \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                new ArrayList\u003cCategory\u003e() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                add(modules);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                add(others);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        };"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void autoDeleteArchived(){"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void addTag(Tag tag, String category) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            return FXCollections.observableArrayList(categories);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "            return new SchedulePlanner();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 15,
      "park-sang-jun": 255
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/AddTagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_tagAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddTagCommandTest.ModelStubAcceptingTagAdded modelStub \u003d new AddTagCommandTest.ModelStubAcceptingTagAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Tag tag \u003d new Tag(\"CS2103\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        CommandResult commandResult \u003d new AddTagCommand(tag, \"Others\").execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(String.format(AddTagCommand.MESSAGE_SUCCESS, tag, \"Others\"), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(Arrays.asList(tag), modelStub.others.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_duplicateTagInSameCategory_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Tag validTag \u003d new Tag(\"CS2103\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddTagCommand addCommand \u003d new AddTagCommand(validTag, \"Others\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddTagCommandTest.ModelStub modelStub \u003d new AddTagCommandTest.ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(modelStub.hasTagInCategory(validTag, modelStub.getCategory(\"Others\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        thrown.expectMessage(AddTagCommand.MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Tag cs \u003d new Tag(\"CS2103\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Tag st \u003d new Tag(\"ST2334\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddTagCommand addCsCommand \u003d new AddTagCommand(cs, \"Others\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        AddTagCommand addStCommand \u003d new AddTagCommand(st, \"Others\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(addCsCommand.equals(addCsCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Tag csCopy \u003d new Tag(\"CS2103\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(cs.equals(csCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(addCsCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(addCsCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(addCsCommand.equals(addStCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void archiveTask(Task completedTask) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void autoDeleteArchived() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void editCategory(String original, String newName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void clearCategory(String name) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void removeCategory(String name) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTag(Tag tag, String category) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addCategory(String name) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public Category getCategory(String category) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void resetData(ReadOnlySchedulePlanner newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasArchivedTask(Task archivedTask) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasCategory(String name) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredArchivedTaskList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void updateFilteredArchivedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean canUndoSchedulePlanner() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean canRedoSchedulePlanner() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void undoSchedulePlanner() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void redoSchedulePlanner() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * A Model stub that contains two default categories."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private class ModelStubWithTag extends AddTagCommandTest.ModelStub {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final ArrayList\u003cTag\u003e othersCategory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final Category others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelStubWithTag(Tag tag) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            this.others.addTag(tag);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasCategory(String category) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return category.equals(others.getName());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public Category getCategory (String name) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return others;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return category.getUniqueTagList().contains(tag);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTag(Tag tag, String name) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            othersCategory.add(tag);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * A Model stub that always accept the category being added."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private class ModelStubAcceptingTagAdded extends AddTagCommandTest.ModelStub {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final ArrayList\u003cTag\u003e othersCategory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        final Category others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasCategory(String category) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void addTag(Tag tag, String name) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            others.addTag(tag);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public Category getCategory(String name) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return others;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return othersCategory.contains(tag);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            // called by {@code AddTagCommand#execute()}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return new SchedulePlanner();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 308
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ArchiveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * {@code ArchiveCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Task taskToArchive \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_TASK_SUCCESS, taskToArchive);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.archiveTask(taskToArchive);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Check whether expected model and actual model has archived task in archived task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(expectedModel.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(model.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(archiveCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Task taskToArchive \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_TASK_SUCCESS, taskToArchive);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.archiveTask(taskToArchive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Check whether expected model and actual model has archived task in archived task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(expectedModel.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(model.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSchedulePlanner().getTaskList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(archiveCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Task taskToArchive \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.archiveTask(taskToArchive);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // archive -\u003e first task archived"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archiveCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Check whether expected model and actual model has archived task in archived task list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(expectedModel.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(model.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Check whether expected model and actual model has archived task in archived task list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(expectedModel.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(model.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // redo -\u003e same first task archived again"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Check whether expected model and actual model has archived task in archived task list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(expectedModel.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(model.hasArchivedTask(taskToArchive));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(archiveCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 1. Archives a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 2. Undo the archive."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously archived task in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 4. Redo the archive. This ensures {@code RedoCommand} archives the task object regardless of indexing."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskArchived() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Task taskToArchive \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.archiveTask(taskToArchive);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // archive -\u003e archives second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        archiveCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // undo -\u003e reverts scheduleplanner back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertNotEquals(taskToArchive, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // redo -\u003e archives same second task in unfiltered task list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void executeRepeatitive_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Task taskToArchive \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_TASK_SUCCESS, taskToArchive);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.archiveTask(taskToArchive);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Add back the archived task"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.addTask(taskToArchive);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.undoSchedulePlanner();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Archive feature should not fail even if two same tasks are archived."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.archiveTask(taskToArchive);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertNotEquals(expectedModel.getFilteredArchivedTaskList(), model.getFilteredArchivedTaskList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 220
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ClearCategoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class ClearCategoryCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void executeClearNonexistentCategory_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ClearCategoryCommand clearCommand \u003d new ClearCategoryCommand(\"School\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(clearCommand, model, commandHistory, Messages.MESSAGE_NONEXISTENT_CATEGORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void executeClearCategory_success() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addTag(new Tag(\"CS2101\"), \"Modules\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addTag(new Tag(\"CS2103\"), \"Modules\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ClearCategoryCommand clearCommand \u003d new ClearCategoryCommand(\"Modules\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        clearCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(model.getCategory(\"Modules\"), new Category(\"Modules\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 41
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptySchedulePlanner_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptySchedulePlanner_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.resetData(new SchedulePlanner());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"221222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String VALID_CATEGORY_MODULES \u003d \"Modules\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String VALID_CATEGORY_OTHERS \u003d \"Others\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String VALID_CATEGORY_SCHOOL \u003d \"School\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String VALID_TAG_CS \u003d \"CS0000\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String VALID_TAG_ST \u003d \"ST2334\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_PRIORITY + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            ADDRESS_DESC_AMY \u003d \" \" + PREFIX_VENUE + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_VENUE + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String TAG_DESC_CS \u003d \" \" + PREFIX_TAG + VALID_TAG_CS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String TAG_DESC_ST \u003d \" \" + PREFIX_TAG + VALID_TAG_ST;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String CATEGORY_DESC_MODULES \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_MODULES;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String CATEGORY_DESC_OTHERS \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_OTHERS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String CATEGORY_DESC_SCHOOL \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_SCHOOL;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"911a\"; // \u0027a\u0027 not allowed in dates"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_PRIORITY + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_VENUE; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                .withDate(VALID_DATE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                .withDate(VALID_DATE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the schedule planner and the filtered task list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner expectedSchedulePlanner \u003d new SchedulePlanner(actualModel.getSchedulePlanner());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSchedulePlanner, actualModel.getSchedulePlanner());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s schedule planner."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s schedule planner."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 20,
      "Woodnsuns": 15,
      "-": 114,
      "hotarumin": 7
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSchedulePlanner().getTaskList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * 1. Deletes a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted task in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts scheduleplanner back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(taskToDelete, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // redo -\u003e deletes same second task in unfiltered task list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 34,
      "Woodnsuns": 1,
      "-": 143
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/EditCategoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class EditCategoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_editDefaultCategories_throwsCommandException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EditCategoryCommand modulesEditCommand \u003d new EditCategoryCommand(\"Modules\", \"School\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(modulesEditCommand, model, commandHistory, Messages.MESSAGE_EDIT_DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EditCategoryCommand othersEditCommand \u003d new EditCategoryCommand(\"Others\", \"School\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(othersEditCommand, model, commandHistory, Messages.MESSAGE_EDIT_DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_editEmptyCategory_success() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addCategory(\"School\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.addCategory(\"School\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.editCategory(\"School\", \"Work\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EditCategoryCommand editCommand \u003d new EditCategoryCommand(\"School\", \"Work\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String expectedMessage \u003d String.format(EditCategoryCommand.MESSAGE_SUCCESS, \"School\", \"Work\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_editNonemptyCategory_success() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addCategory(\"School\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addTag(new Tag(\"Tutorial\"), \"School\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addTag(new Tag(\"Lab\"), \"School\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.addCategory(\"School\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.addTag(new Tag(\"Tutorial\"), \"School\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.addTag(new Tag(\"Lab\"), \"School\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.editCategory(\"School\", \"Work\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String expectedMessage \u003d String.format(EditCategoryCommand.MESSAGE_SUCCESS, \"School\", \"Work\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        EditCategoryCommand editCommand \u003d new EditCategoryCommand(\"School\", \"Work\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 71
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SchedulePlanner(model.getSchedulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Task editedTask \u003d taskInList.withName(VALID_NAME_BOB).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                .withDate(VALID_DATE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SchedulePlanner(model.getSchedulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SchedulePlanner(model.getSchedulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SchedulePlanner(model.getSchedulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSchedulePlanner().getTaskList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SchedulePlanner(model.getSchedulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // edit -\u003e first task edited"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // redo -\u003e same first task edited again"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * 1. Edits a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited task in the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the task object regardless of indexing."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskEdited() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SchedulePlanner(model.getSchedulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // edit -\u003e edits second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), taskToEdit);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // redo -\u003e edits same second task in unfiltered task list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_AMY);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        EditCommand.EditTaskDescriptor copyDescriptor \u003d new EditCommand.EditTaskDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_AMY)));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_BOB)));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 44,
      "-": 189,
      "hotarumin": 3
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/EditTaskDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        EditCommand.EditTaskDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertTrue(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 3,
      "Woodnsuns": 1,
      "-": 53,
      "hotarumin": 2
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new TagsContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new TagsContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterCommand findFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d preparePredicate(\"friends owesMoney enemy\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Parses {@code userInput} into a {@code TagsContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private TagsContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return new TagsContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 1,
      "thaddeuslzy": 81
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/FilterStrictCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterStrictCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterStrictCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new TagsContainsAllKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new TagsContainsAllKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterStrictCommand filterFirstCommand \u003d new FilterStrictCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterStrictCommand filterSecondCommand \u003d new FilterStrictCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterStrictCommand findFirstCommandCopy \u003d new FilterStrictCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void execute_zeroKeywords_allTasksFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterStrictCommand command \u003d new FilterStrictCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void execute_multipleKeywords_singleTaskFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate predicate \u003d preparePredicate(\"friends owesMoney\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterStrictCommand command \u003d new FilterStrictCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     * Parses {@code userInput} into a {@code TagsContainsAllKeywordsPredicate}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private TagsContainsAllKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return new TagsContainsAllKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 82
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(Arrays.asList(CARL, FIONA, ELLE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 4,
      "Woodnsuns": 1,
      "-": 80
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/FirstDayCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.rmi.UnmarshalException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.storage.XmlSerializableRangeOfWeek;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class FirstDayCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String INVALID_DATE_RANGE \u003d \"010101\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            \"XmlSerializableRangeOfWeekTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String USER_INPUT_DATE \u003d \"130818\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final File CHECK_FILE_EXIST \u003d new File(\"testrangeofweek.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final File CHECK \u003d new File(\"rangeofweek.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path PATH \u003d Paths.get(\"testrangeofweek.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path NULL_PATH \u003d TEST_DATA_FOLDER.resolve(\"nullrangeofweek.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path DIFF_SIZE_PATH \u003d TEST_DATA_FOLDER.resolve(\"diffsizerangeofweek.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path INVALID_DATE_PATH \u003d TEST_DATA_FOLDER.resolve(\"invaliddaterangeofweek.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path INVALID_DATE_RANGE_PATH \u003d TEST_DATA_FOLDER.resolve(\"invaliddaterangerangeofweek.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path TYPICAL_PATH \u003d TEST_DATA_FOLDER.resolve(\"typicalrangeofweek.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path NON_EXIST_FILE_PATH \u003d TEST_DATA_FOLDER.resolve(\"testrangeofweek.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path UNABLE_CONVERT_FILE_PATH \u003d TEST_DATA_FOLDER.resolve(\"unableconvertrangeofweek.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private FirstDayCommand fds \u003d new FirstDayCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String[][] rangeOfWeeks \u003d new String[FirstDayCommand.WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String[][] storeRangeOfWeeks \u003d new String[FirstDayCommand.WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[0][0] \u003d \"130818\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[0][1] \u003d \"190818\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[0][2] \u003d \"Week 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[1][0] \u003d \"200818\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[1][1] \u003d \"260818\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[1][2] \u003d \"Week 2\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[2][0] \u003d \"270818\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[2][1] \u003d \"020918\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[2][2] \u003d \"Week 3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[3][0] \u003d \"030918\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[3][1] \u003d \"090918\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[3][2] \u003d \"Week 4\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[4][0] \u003d \"100918\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[4][1] \u003d \"160918\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[4][2] \u003d \"Week 5\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[5][0] \u003d \"170918\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[5][1] \u003d \"230918\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[5][2] \u003d \"Week 6\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[6][0] \u003d \"240918\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[6][1] \u003d \"300918\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[6][2] \u003d \"Recess Week\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[7][0] \u003d \"011018\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[7][1] \u003d \"071018\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[7][2] \u003d \"Week 7\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[8][0] \u003d \"081018\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[8][1] \u003d \"141018\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[8][2] \u003d \"Week 8\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[9][0] \u003d \"151018\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[9][1] \u003d \"211018\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[9][2] \u003d \"Week 9\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[10][0] \u003d \"221018\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[10][1] \u003d \"281018\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[10][2] \u003d \"Week 10\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[11][0] \u003d \"291018\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[11][1] \u003d \"041118\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[11][2] \u003d \"Week 11\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[12][0] \u003d \"051118\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[12][1] \u003d \"111118\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[12][2] \u003d \"Week 12\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[13][0] \u003d \"121118\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[13][1] \u003d \"181118\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[13][2] \u003d \"Week 13\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[14][0] \u003d \"191118\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[14][1] \u003d \"251118\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[14][2] \u003d \"Study Week\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[15][0] \u003d \"261118\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[15][1] \u003d \"021218\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[15][2] \u003d \"Examination Week\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[16][0] \u003d \"031218\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[16][1] \u003d \"091218\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[16][2] \u003d \"Examination Week\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void saveRangeOfWeeks_success() throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!CHECK_FILE_EXIST.exists()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                CHECK_FILE_EXIST.createNewFile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlFileStorage.saveWeekDataToFile(PATH, new XmlSerializableRangeOfWeek(rangeOfWeeks));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                throw new CommandException(fds.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(CHECK_FILE_EXIST.exists());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void retrieveRangeOfWeeks_success() throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!CHECK_FILE_EXIST.exists()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            saveRangeOfWeeks_success();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(PATH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            storeRangeOfWeeks \u003d range.convertRangeOfWeeksToString2dArray(range);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //check first entry first data and last entry last data if they are empty to verify if null data"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(storeRangeOfWeeks[0][0] !\u003d null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(storeRangeOfWeeks[16][2] !\u003d null);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //check first entry first data and last entry last data if they are empty to verify if empty data"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(storeRangeOfWeeks[0][0] !\u003d \"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(storeRangeOfWeeks[16][2] !\u003d \"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //The following code is referenced from: https://stackoverflow.com/questions/156503/how-do-you-assert-"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //that-a-certain-exception-is-thrown-in-junit-4-tests"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test(expected \u003d FileNotFoundException.class)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void retrieveRangeOfWeeks_fileNotExist_throwsFileNotFoundException() throws FileNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!CHECK_FILE_EXIST.exists()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(PATH);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void retrieveRangeOfWeeks_fileNotExist_throwsDataConversionException() throws DataConversionException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (!CHECK_FILE_EXIST.exists()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(INVALID_DATE_PATH);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void retrieveWeekDescription_emptyString_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String[][] emptyString \u003d new String[fds.WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c fds.WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            emptyString[i][0] \u003d INVALID_DATE_RANGE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            emptyString[i][1] \u003d INVALID_DATE_RANGE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            emptyString[i][2] \u003d \"placeholder description\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(fds.retrieveWeekDescription(emptyString).equals(\"\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void isMonday_test() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //the following tests are Monday"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(fds.isMonday(\"130818\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(fds.isMonday(\"200818\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //the following tests are Tuesday to Sunday"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(fds.isMonday(\"140818\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(fds.isMonday(\"150818\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(fds.isMonday(\"160818\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(fds.isMonday(\"170818\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(fds.isMonday(\"180818\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(fds.isMonday(\"190818\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void computeRangeOfWeekTest_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String[][] testUserRangeOfWeeks \u003d new String[FirstDayCommand.WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        testUserRangeOfWeeks \u003d fds.computeRangeOfWeeks(USER_INPUT_DATE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        boolean allFieldsSame \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c FirstDayCommand.WEEKS_IN_SEMESTER; i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            if (!testUserRangeOfWeeks[i][0].equals(rangeOfWeeks[i][0])"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    || !testUserRangeOfWeeks[i][1].equals(rangeOfWeeks[i][1])"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    || !testUserRangeOfWeeks[i][2].equals(rangeOfWeeks[i][2])) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                allFieldsSame \u003d false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(allFieldsSame);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void isWithinDateRange_test() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //system date before range"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(isWithinDateRange(\"120818\", \"130818\", \"091218\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //system date on boundary of start date"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(isWithinDateRange(\"130818\", \"130818\", \"091218\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //system date within both boundary of start date and end date"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(isWithinDateRange(\"130818\", \"130818\", \"130818\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //system date inside boundary of start date and end date"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(isWithinDateRange(\"211018\", \"130818\", \"091218\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //system date on boundary of end date"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(isWithinDateRange(\"091218\", \"130818\", \"091218\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //system date after range"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(isWithinDateRange(\"101218\", \"130818\", \"091218\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFileIfNotExist_success() throws CommandException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        fds.createDefaultFileIfNotExist();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(CHECK.exists());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        retrieveRangeOfWeeks_success();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //The following code is referenced from: https://stackoverflow.com/questions/156503/how-do-you-assert-"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //that-a-certain-exception-is-thrown-in-junit-4-tests"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test(expected \u003d IndexOutOfBoundsException.class)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void diffSizePath_throwsIndexOutOfBoundException() throws CommandException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(DIFF_SIZE_PATH);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertTrue(range.returnSize() !\u003d fds.WEEKS_IN_SEMESTER);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            storeRangeOfWeeks \u003d range.convertRangeOfWeeksToString2dArray(range);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //The following code is referenced from: https://stackoverflow.com/questions/156503/how-do-you-assert-"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    //that-a-certain-exception-is-thrown-in-junit-4-tests"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test(expected \u003d FileNotFoundException.class)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFile_fileNotExist_throwFileNotFoundException() throws FileNotFoundException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(NON_EXIST_FILE_PATH);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void createDefaultFile_invalidDataFormat_throwDataConversionException() throws DataConversionException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(INVALID_DATE_PATH);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            System.out.println(e.getMessage());;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void nullPath_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(NULL_PATH);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            storeRangeOfWeeks \u003d range.convertRangeOfWeeksToString2dArray(range);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertFalse(range.checkIfNullValueFromStorage());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void invalidDatePath_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(INVALID_DATE_PATH);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            storeRangeOfWeeks \u003d range.convertRangeOfWeeksToString2dArray(range);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertFalse(range.checkIfValidDateOrRangeFromStorage());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void invalidDateRangePath_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(INVALID_DATE_RANGE_PATH);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            storeRangeOfWeeks \u003d range.convertRangeOfWeeksToString2dArray(range);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertFalse(range.checkIfValidDateOrRangeFromStorage());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void unableConvertFilePath_invalidData_throwsUnmarshalException() throws UnmarshalException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            thrown.expect(UnmarshalException.class);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(UNABLE_CONVERT_FILE_PATH);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void typicalPath_success() throws CommandException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            XmlSerializableRangeOfWeek range \u003d XmlFileStorage.loadWeekDataFromSaveFile(TYPICAL_PATH);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            storeRangeOfWeeks \u003d range.convertRangeOfWeeksToString2dArray(range);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertTrue(range.returnSize() \u003d\u003d fds.WEEKS_IN_SEMESTER);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertTrue(range.checkIfNullValueFromStorage());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertTrue(range.checkIfValidDateOrRangeFromStorage());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_DATA_UNABLE_CONVERT);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new CommandException(fds.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void computeAppTitle_test() throws CommandException {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String appTitle \u003d \"Student Schedule Planner\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (fds.isWithinDateRange(rangeOfWeeks[0][0], rangeOfWeeks[16][1])) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            appTitle \u003d \"Student Schedule Planner\" + \"  - \" + fds.retrieveWeekDescription(rangeOfWeeks);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //if system time is within date range, appTitle should not be \"Student Schedule Planner\""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //else, appTitle should be \"Student Schedule Planner\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (fds.isWithinDateRange(rangeOfWeeks[0][0], rangeOfWeeks[16][1])) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertFalse(appTitle.equals(\"Student Schedule Planner\"));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            assertTrue(appTitle.equals(\"Student Schedule Planner\"));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        if (CHECK_FILE_EXIST.exists()) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            CHECK_FILE_EXIST.delete();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Modification of actual isWithinDateRange in FirstDayCommand.java"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Add a parameter for \"testing\" system date"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param firstDayOfSem the first day of the semester"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @param lastDayOfSem the last day of the semester"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private boolean isWithinDateRange(String systemTestDate, String firstDayOfSem, String lastDayOfSem) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.parse(firstDayOfSem, DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        LocalDate lastDate \u003d LocalDate.parse(lastDayOfSem, DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        LocalDate systemDate \u003d LocalDate.parse(systemTestDate, DateTimeFormatter.ofPattern(\"ddMMyy\"));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return (systemDate.isEqual(firstDate) || systemDate.isAfter(firstDate) \u0026\u0026 (systemDate.isBefore(lastDate)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                || systemDate.isEqual(lastDate)));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 384
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ListArchivedCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.ListArchivedCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ChangeViewEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ListArchivedCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertCommandSuccess(new ListArchivedCommand(), model, commandHistory, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeViewEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 30
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ListDayCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.DateSamePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListDayCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class ListDayCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validToday \u003d new TaskBuilder().withDate(new SimpleDateFormat(\"ddMMyy\").format(c.getTime())).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validToday);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.addTask(validToday);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateFilteredTaskList(new DateSamePredicate(validToday.getDate().value));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandSuccess(new ListDayCommand(), model, commandHistory, ListDayCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void dateSamePredicate_taskRemainAfterFilter_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //after update the filteredtasklist with a specific date predicate, model would have that task remaining"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTask \u003d new TaskBuilder().withDate(\"111111\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(new DateSamePredicate(validTask.getDate().value));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.hasTask(validTask));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTask));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(model.getFilteredTaskList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void dateSamePredicate_taskGoneAfterFilter_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //after update the filteredtasklist with a specific date predicate, model would not have other task remaining"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model modelCheck \u003d new ModelManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTask \u003d new TaskBuilder().withDate(\"111111\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskCheck \u003d new TaskBuilder().withDate(\"121212\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskCheck);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelCheck.addTask(validTaskCheck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(new DateSamePredicate(validTask.getDate().value));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(model.getFilteredTaskList().equals(modelCheck.getFilteredTaskList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskCheck));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 66,
      "-": 8
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ListMonthCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.DateWeekSamePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListWeekCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class ListMonthCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        ListMonthCommand lmc \u003d new ListMonthCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        int numDaysTillEndOfMonth \u003d lmc.numDaysTillEndOfMonth(currentDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //check how many days from current date until end of month, generate corresponding tasks for each day"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //add each task to both model and expected model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //each date from current date until last day of month is added to dateList as predicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        for (int i \u003d 0; i \u003c numDaysTillEndOfMonth; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            Task validToday \u003d new TaskBuilder().withDate(new SimpleDateFormat(\"ddMMyy\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                    .format(c.getTime())).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            // increment day by 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            // add next day into dateList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            model.addTask(validToday);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            expectedModel.addTask(validToday);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //update expectedModel by using the dateList as predicate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        expectedModel.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertCommandSuccess(new ListMonthCommand(), model, commandHistory, ListMonthCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void appendDateList_test_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        ListMonthCommand lmc \u003d new ListMonthCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e expectedDateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //expectedDateList contains 30 values as we are appending 30 days, excluding current date"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        expectedDateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        for (int i \u003d 0; i \u003c 30; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            expectedDateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        lmc.appendDateList(dateList, 30);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(dateList, expectedDateList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(dateList.containsAll(expectedDateList));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(expectedDateList.containsAll(dateList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void numDaysTillEndOfMonth_test_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        ListMonthCommand lmc \u003d new ListMonthCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDay1 \u003d LocalDate.of(2018, 10, 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDay6 \u003d LocalDate.of(2018, 10, 6);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDay11 \u003d LocalDate.of(2018, 10, 11);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDay16 \u003d LocalDate.of(2018, 10, 16);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDay21 \u003d LocalDate.of(2018, 10, 21);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDay26 \u003d LocalDate.of(2018, 10, 26);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDay31 \u003d LocalDate.of(2018, 10, 31);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        LocalDate testDefault \u003d LocalDate.of(2018, 10, 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDay1), 30);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDay6), 25);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDay11), 20);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDay16), 15);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDay21), 10);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDay26), 5);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDay31), 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(lmc.numDaysTillEndOfMonth(testDefault), 30);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void dateListSamePredicate_tasksRemainAfterFilter_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // update FilteredTaskList with a specific date predicate, model would have that task(s) from that date"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //till the closest sunday."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //131018 is a saturday -\u003e task from 131018 and 141018 will remain."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Model modelCheck \u003d new ModelManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay1 \u003d new TaskBuilder().withDate(\"011018\").build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay30 \u003d new TaskBuilder().withDate(\"301018\").build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"011018\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"301018\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay30);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        modelCheck.addTask(validTaskDay1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        modelCheck.addTask(validTaskDay30);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(model.getFilteredTaskList().equals(modelCheck.getFilteredTaskList()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskDay1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskDay30));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(model.getFilteredTaskList(), modelCheck.getFilteredTaskList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void dateListSamePredicate_correctTasksRemainAfterFilter_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // update the FilteredTaskList with a predicate, that checks for tasks whose dates match those in the list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // updated list will contain task(s) that are on the specified dates."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Example:  dates 261018 - 31101 in predicate -\u003e only 261018 and 311018 will be displayed"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Model modelCheck \u003d new ModelManager();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay1 \u003d new TaskBuilder().withDate(\"011018\").build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay6 \u003d new TaskBuilder().withDate(\"061018\").build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay11 \u003d new TaskBuilder().withDate(\"111018\").build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay16 \u003d new TaskBuilder().withDate(\"161018\").build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay21 \u003d new TaskBuilder().withDate(\"211018\").build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay26 \u003d new TaskBuilder().withDate(\"261018\").build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task validTaskDay31 \u003d new TaskBuilder().withDate(\"311018\").build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay6);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay11);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay16);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay21);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay26);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.addTask(validTaskDay31);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        modelCheck.addTask(validTaskDay26);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        modelCheck.addTask(validTaskDay31);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"261018\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"271018\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"281018\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"291018\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"301018\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        dateList.add(\"311018\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        model.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskDay1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskDay6));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskDay11));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskDay16));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskDay21));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskDay26));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskDay31));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(model.getFilteredTaskList(), modelCheck.getFilteredTaskList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 182
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ListOverdueCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.OverduePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class ListOverdueCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task validOverdueTask \u003d (new TaskBuilder()).withDate(\"101010\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        int systemDate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                    Integer.parseInt(new SimpleDateFormat(\"yyMMdd\").format(Calendar.getInstance().getTime()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.addTask(validOverdueTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        expectedModel.addTask(validOverdueTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        expectedModel.updateFilteredTaskList(new OverduePredicate(systemDate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        System.out.println(expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        System.out.println(model.getFilteredTaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertCommandSuccess(new ListOverdueCommand(), model, commandHistory, ListOverdueCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public void task_remain_afterFilter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task validOverdueTask \u003d (new TaskBuilder().withDate(\"010101\")).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.addTask(validOverdueTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.updateFilteredTaskList(new OverduePredicate(030101));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        expectedModel.addTask(validOverdueTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertTrue(model.hasTask(validOverdueTask));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validOverdueTask));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertEquals(model.getFilteredTaskList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public void task_gone_afterFilter() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task validOverdueTask \u003d new TaskBuilder().withDate(\"010101\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        Task validNotOverdue \u003d new TaskBuilder().withDate(\"121212\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.addTask(validOverdueTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.addTask(validNotOverdue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        expectedModel.addTask(validOverdueTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        model.updateFilteredTaskList(new OverduePredicate(011212));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertFalse(model.getFilteredTaskList().equals(expectedModel.getFilteredTaskList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validNotOverdue));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 76
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ListWeekCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.DateWeekSamePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListWeekCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class ListWeekCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ListWeekCommand lwc \u003d new ListWeekCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String todayDate \u003d LocalDate.now().getDayOfWeek().name();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        int numDaysTillSunday \u003d lwc.numDaysTillSunday(todayDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //check how many days from current date until closest Sunday, generate corresponding tasks for each day"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //add each task to both model and expected model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //each date from current date until closest Sunday is added to dateList as predicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c numDaysTillSunday; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            Task validToday \u003d new TaskBuilder().withDate(new SimpleDateFormat(\"ddMMyy\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                    .format(c.getTime())).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            dateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            model.addTask(validToday);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            expectedModel.addTask(validToday);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //update expectedModel by using the dateList as predicate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(new ListWeekCommand(), model, commandHistory, ListWeekCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void appendDateList_test_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ListWeekCommand lwc \u003d new ListWeekCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e expectedDateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //expectedDateList contains 7 values as we are appending 6 days, excluding current date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedDateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            expectedDateList.add(new SimpleDateFormat(\"ddMMyy\").format(c.getTime()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        lwc.appendDateList(dateList, 6);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(dateList, expectedDateList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(dateList.containsAll(expectedDateList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(expectedDateList.containsAll(dateList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void numDaysTillSunday_test_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ListWeekCommand lwc \u003d new ListWeekCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testMonday \u003d LocalDate.of(2018, 10, 22).getDayOfWeek().name();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testTuesday \u003d LocalDate.of(2018, 10, 23).getDayOfWeek().name();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testWednesday \u003d LocalDate.of(2018, 10, 24).getDayOfWeek().name();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testThursday \u003d LocalDate.of(2018, 10, 25).getDayOfWeek().name();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testFriday \u003d LocalDate.of(2018, 10, 26).getDayOfWeek().name();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testSaturday \u003d LocalDate.of(2018, 10, 27).getDayOfWeek().name();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testSunday \u003d LocalDate.of(2018, 10, 28).getDayOfWeek().name();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testDefault \u003d \"Invalid \u0027date\u0027, which return default 0\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testMonday), 6);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testTuesday), 5);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testWednesday), 4);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testThursday), 3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testFriday), 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testSaturday), 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testSunday), 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(lwc.numDaysTillSunday(testDefault), 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void dateWeekSamePredicate_taskRemainAfterFilter_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //after update the filteredtasklist with a specific date predicate, model would have that task(s) from that date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //till the closest sunday."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //131018 is a saturday -\u003e task from 131018 and 141018 will remain."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model modelCheck \u003d new ModelManager();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskSat \u003d new TaskBuilder().withDate(\"201018\").build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskSun \u003d new TaskBuilder().withDate(\"211018\").build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.add(\"201018\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.add(\"211018\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskSat);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskSun);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelCheck.addTask(validTaskSat);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelCheck.addTask(validTaskSun);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.getFilteredTaskList().equals(modelCheck.getFilteredTaskList()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskSat));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskSun));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(model.getFilteredTaskList(), modelCheck.getFilteredTaskList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void dateWeekSamePredicate_taskGoneAfterFilter_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //after update the filteredtasklist with a specific date predicate, model would have that task(s) from that date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //till the closest sunday and not other days."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //131018 is a saturday -\u003e task from 131018 and 141018 will remain"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //131018 is a saturday -\u003e task from 081018(monday) till 121018(friday) will not remain"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Model modelCheck \u003d new ModelManager();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskMon \u003d new TaskBuilder().withDate(\"081018\").build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskTue \u003d new TaskBuilder().withDate(\"091018\").build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskWed \u003d new TaskBuilder().withDate(\"101018\").build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskThu \u003d new TaskBuilder().withDate(\"111018\").build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskFri \u003d new TaskBuilder().withDate(\"121018\").build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskSat \u003d new TaskBuilder().withDate(\"131018\").build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task validTaskSun \u003d new TaskBuilder().withDate(\"141018\").build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskMon);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskTue);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskWed);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskThu);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskFri);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskSat);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(validTaskSun);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelCheck.addTask(validTaskSat);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelCheck.addTask(validTaskSun);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.add(\"131018\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.add(\"141018\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateFilteredTaskList(new DateWeekSamePredicate(dateList));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskMon));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskTue));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskWed));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskThu));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(model.getFilteredTaskList().contains(validTaskFri));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskSat));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(model.getFilteredTaskList().contains(validTaskSun));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(model.getFilteredTaskList(), modelCheck.getFilteredTaskList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 164,
      "Woodnsuns": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ProgressTodayCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ProgressTodayCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ProgressTodayCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void execute_progressToday_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        float percentage \u003d 0.0f;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        CommandResult result \u003d new ProgressTodayCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(result.feedbackToUser, String.format(ProgressTodayCommand.MESSAGE_SUCCESS, percentage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 33,
      "park-sang-jun": 1
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ProgressWeekCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ProgressWeekCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ProgressWeekCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void execute_progressToday_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        float percentage \u003d 0.0f;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        CommandResult result \u003d new ProgressWeekCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(result.feedbackToUser, String.format(ProgressWeekCommand.MESSAGE_SUCCESS, percentage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 33,
      "park-sang-jun": 1
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.undoSchedulePlanner();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.undoSchedulePlanner();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.redoSchedulePlanner();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/RemoveCategoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class RemoveCategoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_invalidModulesRemoval_throwsCommandException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Modules is a default category, cannot be removed, test should fail"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        RemoveCategoryCommand removeCommand \u003d new RemoveCategoryCommand(\"Modules\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, Messages.MESSAGE_DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_invalidOthersRemoval_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Others is a default category, cannot be removed, test should fail"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        RemoveCategoryCommand removeCommand \u003d new RemoveCategoryCommand(\"Others\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, Messages.MESSAGE_DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_nonexistentCategory_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //Category \"work\" does not exist in categories, test should fail"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        RemoveCategoryCommand removeCommand \u003d new RemoveCategoryCommand(\"work\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, Messages.MESSAGE_NONEXISTENT_CATEGORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void execute_validCategoryRemoval_success() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.addCategory(\"School\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        model.commitSchedulePlanner();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.addCategory(\"School\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.removeCategory(\"School\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.commitSchedulePlanner();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        RemoveCategoryCommand removeCommand \u003d new RemoveCategoryCommand(\"School\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveCategoryCommand.MESSAGE_SUCCESS, \"School\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(removeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(model.getCategoryList(), expectedModel.getCategoryList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 66
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_TASK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastTaskIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getSchedulePlanner().getTaskList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_TASK_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 5,
      "-": 113
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/ShowTagsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ShowTagsRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.testutil.CategoryBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ShowTagsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void constructor_nullCategory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        new ShowTagsCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void execute_categoryDoesNotExist_failure() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ModelStub modelStub \u003d new DefaultModelStub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Category validCategory \u003d new CategoryBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        thrown.expectMessage(ShowTagsCommand.MESSAGE_CATEGORY_NONEXISTENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new ShowTagsCommand(validCategory.getName()).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(ShowTagsCommand.MESSAGE_CATEGORY_NONEXISTENT, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void execute_categoryExists_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ModelStub modelStub \u003d new DefaultModelStub();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        CommandResult result \u003d new ShowTagsCommand(\"Modules\").execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(result.feedbackToUser, ShowTagsCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowTagsRequestEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ShowTagsCommand showModules \u003d new ShowTagsCommand(\"Modules\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        ShowTagsCommand showOthers \u003d new ShowTagsCommand(\"Others\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(showModules.equals(showModules));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(showModules.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(showModules.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(showModules.equals(showOthers));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void archiveTask(Task completedTask) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void autoDeleteArchived() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void editCategory(String original, String newName) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void clearCategory(String name) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void removeCategory(String name) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void addTag(Tag tag, String category) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void addCategory(String name) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public Category getCategory(String category) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void resetData(ReadOnlySchedulePlanner newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public ReadOnlySchedulePlanner getSchedulePlanner() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public boolean hasArchivedTask(Task archivedTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public boolean hasTagInCategory(Tag tag, Category category) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public boolean hasCategory(String name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredArchivedTaskList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void updateFilteredArchivedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public boolean canUndoSchedulePlanner() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public boolean canRedoSchedulePlanner() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void undoSchedulePlanner() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void redoSchedulePlanner() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public void commitSchedulePlanner() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * A Model stub that contains two default categories."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private class DefaultModelStub extends ModelStub {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        private final Category modules;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        private final Category others;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        DefaultModelStub() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            this.modules \u003d new Category(\"Modules\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            this.others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        public boolean hasCategory(String category) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            requireNonNull(category);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            return (category.equals(\"Modules\") || category.equals(\"Others\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 243
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalSchedulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.undoSchedulePlanner();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_AMY + DATE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DATE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_DATE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_DATE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DATE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_DATE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Venue.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DATE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 12,
      "-": 106,
      "hotarumin": 23
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_DATE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Priority.MESSAGE_PRIORITY_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Venue.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // invalid date followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + EMAIL_DESC_AMY, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // valid date followed by invalid date. The test case for invalid date followed by valid date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_BOB + INVALID_DATE_DESC, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                .withDate(VALID_DATE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                + TAG_DESC_FRIEND + DATE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                + DATE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DATE_DESC + DATE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new EditTaskDescriptorBuilder().withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_DATE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                + DATE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDate(VALID_DATE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 4,
      "-": 186,
      "hotarumin": 22
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new FilterCommand(new TagsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFilterCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFilterCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 34
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/parser/FilterStrictCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FilterStrictCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class FilterStrictCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    private FilterStrictCommandParser parser \u003d new FilterStrictCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                FilterStrictCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void parse_validArgs_returnsFilterStrictCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterStrictCommand expectedFilterStrictCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new FilterStrictCommand(new TagsContainsAllKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFilterStrictCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFilterStrictCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 35
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/parser/FirstDayCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FirstDayCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class FirstDayCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private FirstDayCommandParser parser \u003d new FirstDayCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void parse_empty_failure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                FirstDayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void parse_validArgument_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //all the following testDate is valid as it is valid date format \"ddMMyy\" and is a monday"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testMonday \u003d \" 130818 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testMonday2 \u003d \" 200818 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testMonday3 \u003d \" 270818 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseSuccess(parser, testMonday, new FirstDayCommand(testMonday.trim()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseSuccess(parser, testMonday2, new FirstDayCommand(testMonday2.trim()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseSuccess(parser, testMonday3, new FirstDayCommand(testMonday3.trim()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void parse_invalidArgument_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //all the following test day are invalid as it is not monday"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testTuesday \u003d \" 140818\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testSunday \u003d \" 190818 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //all the following test date are invalid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testInvalidDate1 \u003d \" 321018 \"; //invalid day"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testInvalidDate2 \u003d \" 311318 \"; //invalid month"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testInvalidDate3 \u003d \" 321318 \"; //invalid day and month"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testInvalidDate4 \u003d \" a12#12 \"; //invalid format with alphabet and special character"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testInvalidDate5 \u003d \" 12101 \"; //date not in ddMMyy format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testInvalidDate6 \u003d \" 1210188 \"; //date not in ddMMyy format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testTuesday, FirstDayCommand.MESSAGE_NOT_MONDAY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testSunday, FirstDayCommand.MESSAGE_NOT_MONDAY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testInvalidDate1, FirstDayCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testInvalidDate2, FirstDayCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testInvalidDate3, FirstDayCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testInvalidDate4, FirstDayCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testInvalidDate5, FirstDayCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testInvalidDate6, FirstDayCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void parse_moreThanOneArgument_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testDate1 \u003d \" 130818 \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testDate2 \u003d \" 140818 \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testDate3 \u003d \" 150818 \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testDate1 + testDate2, FirstDayCommand.MESSAGE_ONLY_ONE_ARGUMENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertParseFailure(parser, testDate1 + testDate2 + testDate3, FirstDayCommand.MESSAGE_ONLY_ONE_ARGUMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void isMonday_test() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //the following tests are Monday"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(parser.isMonday(\"130818\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(parser.isMonday(\"200818\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //the following tests are Tuesday to Sunday"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(parser.isMonday(\"140818\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(parser.isMonday(\"150818\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(parser.isMonday(\"160818\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(parser.isMonday(\"170818\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(parser.isMonday(\"180818\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(parser.isMonday(\"190818\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 95
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String INVALID_DATE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String VALID_DATE \u003d \"120456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVenue((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseVenue(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 14,
      "-": 182,
      "hotarumin": 12
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/logic/parser/SchedulePlannerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FirstDayCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListDayCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListWeekCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.model.task.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class SchedulePlannerParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final SchedulePlannerParser parser \u003d new SchedulePlannerParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        FilterCommand command \u003d (FilterCommand) parser.parseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                FilterCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertEquals(new FilterCommand(new TagsContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void parseCommand_firstday() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(parser.parseCommand(FirstDayCommand.COMMAND_WORD + \" 130818\") instanceof FirstDayCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void parseCommand_listDay() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(parser.parseCommand(ListDayCommand.COMMAND_WORD) instanceof ListDayCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(parser.parseCommand(ListDayCommand.COMMAND_WORD + \" 3\") instanceof ListDayCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void parseCommand_listWeek() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(parser.parseCommand(ListWeekCommand.COMMAND_WORD) instanceof ListWeekCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(parser.parseCommand(ListWeekCommand.COMMAND_WORD + \" 3\") instanceof ListWeekCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 22,
      "thaddeuslzy": 10,
      "-": 141
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.SchedulePlannerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelManager.hasTask(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_taskNotInSchedulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(modelManager.hasTask(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_taskInSchedulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelManager.addTask(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(modelManager.hasTask(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelManager.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner schedulePlanner \u003d new SchedulePlannerBuilder().withTask(ALICE).withTask(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner differentSchedulePlanner \u003d new SchedulePlanner();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(schedulePlanner, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(schedulePlanner, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different schedulePlanner -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentSchedulePlanner, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(schedulePlanner, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        differentUserPrefs.setSchedulePlannerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(schedulePlanner, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 8,
      "-": 76
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/SchedulePlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SchedulePlannerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SchedulePlanner schedulePlanner \u003d new SchedulePlanner();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), schedulePlanner.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlySchedulePlanner_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner newData \u003d getTypicalSchedulePlanner();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, schedulePlanner);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // Two tasks with the same fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Category others \u003d new Category(\"Others\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        others.addTag(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        List\u003cCategory\u003e categories \u003d Arrays.asList(new Category(\"Modules\"), others);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        List\u003cTask\u003e archivedTasks \u003d Arrays.asList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        SchedulePlannerStub newData \u003d new SchedulePlannerStub(categories, newTasks, archivedTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.resetData(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.hasTask(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_taskNotInSchedulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(schedulePlanner.hasTask(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_taskInSchedulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.addTask(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(schedulePlanner.hasTask(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    // OLD TEST"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInSchedulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.addTask(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withVenue(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(schedulePlanner.hasTask(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_taskWithNotAllSameFieldsInSchedulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.addTask(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withVenue(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(schedulePlanner.hasTask(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulePlanner.getTaskList().remove(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * A stub ReadOnlySchedulePlanner whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static class SchedulePlannerStub implements ReadOnlySchedulePlanner {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        private final ObservableList\u003cCategory\u003e categories \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        private final ObservableList\u003cTask\u003e archivedTasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        SchedulePlannerStub(Collection\u003cCategory\u003e categories, Collection\u003cTask\u003e tasks, Collection\u003cTask\u003e archivedTasks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            this.categories.setAll(categories);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            this.archivedTasks.setAll(archivedTasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cTask\u003e getArchivedTaskList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return archivedTasks;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            return categories;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 11,
      "Woodnsuns": 25,
      "thaddeuslzy": 2,
      "-": 103
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/rangeofweek/RangeOfWeekTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.model.rangeofweek;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class RangeOfWeekTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_START_OF_WEEK \u003d \"130818\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_END_OF_WEEK \u003d \"190818\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Week 1\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toString_equal() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        RangeOfWeek range \u003d new RangeOfWeek(VALID_START_OF_WEEK,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_END_OF_WEEK, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        builder.append(\" Start of Week: \")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(VALID_START_OF_WEEK)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" End of Week: \")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(VALID_END_OF_WEEK)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .append(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(range.toString(), builder.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void equals_equal() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        RangeOfWeek range \u003d new RangeOfWeek(VALID_START_OF_WEEK,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_END_OF_WEEK, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        RangeOfWeek checkRange \u003d range;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(range, checkRange);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(range.equals(checkRange));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(checkRange.equals(range));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void hashCode_equal() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        RangeOfWeek range \u003d new RangeOfWeek(VALID_START_OF_WEEK,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_END_OF_WEEK, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        RangeOfWeek checkRange \u003d range;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(range.hashCode(), checkRange.hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 47
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/DateSamePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class DateSamePredicateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String SYSTEM_DATE \u003d \"130818\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String SYSTEM_DATE_CHECK \u003d SYSTEM_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String SYSTEM_DATE_NOT_SAME \u003d \"140818\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void dateSamePredicate_equal() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        DateSamePredicate dateSamePredicate1 \u003d new DateSamePredicate(SYSTEM_DATE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        DateSamePredicate dateSamePredicate2 \u003d new DateSamePredicate(SYSTEM_DATE_NOT_SAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(SYSTEM_DATE, SYSTEM_DATE_CHECK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(SYSTEM_DATE.equals(SYSTEM_DATE_CHECK));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(SYSTEM_DATE_CHECK.equals(SYSTEM_DATE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(dateSamePredicate1.equals(dateSamePredicate1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //same value but different object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(dateSamePredicate1.equals(new DateSamePredicate(SYSTEM_DATE)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //different value return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(dateSamePredicate1.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(dateSamePredicate1.equals(dateSamePredicate2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 35
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"931234\")); // more than 31 days"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"001134\")); // 0 day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"210034\")); // 0 month"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(Date.isValidDate(\"021434\")); // more than 12 months"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(Date.isValidDate(\"091112\")); // exactly 6 numbers"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(Date.isValidDate(\"031234\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertTrue(Date.isValidDate(\"120223\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 20,
      "-": 2,
      "hotarumin": 23
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/DateWeekSamePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class DateWeekSamePredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void dateWeekSamePredicate_equal() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateListEqual \u003d dateList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cString\u003e dateListNotEqual \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateList.add(\"130818\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateListNotEqual.add(\"130818\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dateListNotEqual.add(\"140818\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        DateWeekSamePredicate dateWeekSamePredicate1 \u003d new DateWeekSamePredicate(dateList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        DateWeekSamePredicate dateWeekSamePredicate2 \u003d new DateWeekSamePredicate(dateListNotEqual);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //equal values -\u003e return true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(dateList, dateListEqual);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(dateList.equals(dateListEqual));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(dateListEqual.equals(dateList));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(dateWeekSamePredicate1.equals(dateWeekSamePredicate1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //different value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(dateWeekSamePredicate1.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(dateWeekSamePredicate1.equals(dateWeekSamePredicate2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(dateWeekSamePredicate2.equals(dateWeekSamePredicate1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 41
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // Keywords match date, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"120345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").withDate(\"120345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                .withPriority(\"1\").withVenue(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 7,
      "thaddeuslzy": 1,
      "-": 64,
      "hotarumin": 3
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/OverduePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "public class OverduePredicateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private static final int SYSTEM_DATE \u003d 111118;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private static final int SYSTEM_DATE_CHECK \u003d SYSTEM_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    private static final int SYSTEM_DATE_NOT_SAME \u003d 121118;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    public void overduePredicateEqual() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        OverduePredicate pred1 \u003d new OverduePredicate(SYSTEM_DATE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        OverduePredicate pred2 \u003d new OverduePredicate(SYSTEM_DATE_NOT_SAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertEquals(SYSTEM_DATE, SYSTEM_DATE_CHECK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertTrue(SYSTEM_DATE \u003d\u003d SYSTEM_DATE_CHECK);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertTrue(SYSTEM_DATE_CHECK \u003d\u003d SYSTEM_DATE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertTrue(pred1.equals(pred1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        //same value but different object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertTrue(pred1.equals(new OverduePredicate(SYSTEM_DATE)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        //different value return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertFalse(pred1.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "        assertFalse(pred1.equals(pred2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "park-sang-jun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "park-sang-jun": 35
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/PriorityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // null priority"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // blank priority"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"a\")); // alphabet is invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"@\")); // special character is invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"~\")); // special character is invalid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"4\")); // numerical value outside 1,2,3 is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"11\")); // valid numerical values but more than one digit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"22\")); // valid numerical values but more than one digit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"33\")); // valid numerical values but more than one digit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"a1\")); // mix of alphanumerical"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"a@\")); // mix of alphabet and special character"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"1@\")); // mix of numerical and special character"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"a1@\")); // mix of alphanumerical and special character"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"0\")); // zero is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"-1\")); //valid numerical value in negative form is invalid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"-2\")); //valid numerical value in negative form is invalid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"-3\")); //valid numerical value in negative form is invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"3\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 54,
      "-": 2
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/TagsContainsAllKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class TagsContainsAllKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new TagsContainsAllKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new TagsContainsAllKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                new TagsContainsAllKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void test_tagsContainsAllKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate predicate \u003d new TagsContainsAllKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                \"CS2101\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2101\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsAllKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2101\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsAllKeywordsPredicate(Arrays.asList(\"Cs2101\", \"cS2103\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2101\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void test_tagsDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsAllKeywordsPredicate predicate \u003d new TagsContainsAllKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2100\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsAllKeywordsPredicate(Arrays.asList(\"CS2101\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2103\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // One non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsAllKeywordsPredicate(Arrays.asList(\"CS2103\", \"Tutorial\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"CS2103 Tutorial\").withTags(\"CS2103\", \"Test\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 74
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/TagsContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "public class TagsContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicate \u003d new TagsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate secondPredicate \u003d new TagsContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicateCopy \u003d new TagsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void test_tagsContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d new TagsContainsKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "                \"CS2101\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2101\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2101\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2100\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2101\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"Cs2101\", \"cS2103\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2101\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public void test_tagsDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d new TagsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Lecture\").withTags(\"CS2100\", \"CS2103\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"CS2101\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice Bob\").withTags(\"CS2103\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thaddeuslzy": 71
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/TaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        task.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(ALICE.isSameTask(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.isSameTask(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // different date and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withDate(VALID_DATE_BOB).withPriority(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // same name, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // same name, same date, different attributes -\u003e return false as task are unique"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withPriority(VALID_EMAIL_BOB).withVenue(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //assertTrue(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // same name, same date, different attributes -\u003e return false as task are unique"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withDate(VALID_DATE_BOB).withVenue(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //assertTrue(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same fields -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // commented off as the following test below check if alice is same as alice"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        //editedAlice \u003d new TaskBuilder(ALICE).withVenue(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //assertFalse(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task aliceCopy \u003d new TaskBuilder(ALICE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withVenue(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 74,
      "thaddeuslzy": 5,
      "-": 16,
      "hotarumin": 5
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/UniqueTaskListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(uniqueTaskList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(uniqueTaskList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //OLD TEST"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //public void contains_taskWithSameIdentityFieldsInList_returnsTrue()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_taskWithNotAllSameFieldsInList_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withVenue(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTask(null, ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTask(ALICE, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTask(ALICE, ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTask(ALICE, ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedUniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withVenue(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTask(ALICE, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTask(ALICE, BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTask(ALICE, BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.remove(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.remove(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTasks((UniqueTaskList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTasks((List\u003cTask\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.setTasks(listWithDuplicateTasks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        uniqueTaskList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 154,
      "thaddeuslzy": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/model/task/VenueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class VenueTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Venue(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Venue(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Venue.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Venue.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(Venue.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(Venue.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(Venue.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(Venue.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 35,
      "-": 2
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        userPrefs.setSchedulePlannerFilePath(Paths.get(\"scheduleplanner.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        //userPrefs.setSchedulePlannerFilePath(Paths.get(\"data\\\\scheduleplanner.xml\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "hotarumin": 2
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSchedulePlannerStorage schedulePlannerStorage \u003d new XmlSchedulePlannerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(schedulePlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void schedulePlannerReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "         * {@link XmlSchedulePlannerStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlSchedulePlannerStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner original \u003d getTypicalSchedulePlanner();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        storageManager.saveSchedulePlanner(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ReadOnlySchedulePlanner retrieved \u003d storageManager.readSchedulePlanner().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(original, new SchedulePlanner(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getSchedulePlannerFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertNotNull(storageManager.getSchedulePlannerFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleSchedulePlannerChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlSchedulePlannerStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        storage.handleSchedulePlannerChangedEvent(new SchedulePlannerChangedEvent(new SchedulePlanner()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    class XmlSchedulePlannerStorageExceptionThrowingStub extends XmlSchedulePlannerStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public XmlSchedulePlannerStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        public void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 11,
      "-": 92
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/storage/XmlAdaptedRangeOfWeekTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static ssp.scheduleplanner.storage.XmlAdaptedRangeOfWeek.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.rangeofweek.RangeOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlAdaptedRangeOfWeekTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_START_OF_WEEK \u003d \"130818\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_END_OF_WEEK \u003d \"190818\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Week 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String INVALID_START_OF_WEEK \u003d \"320818\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String INVALID_END_OF_WEEK \u003d \"320818\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static RangeOfWeek rangeOfWeek \u003d new RangeOfWeek(VALID_START_OF_WEEK, VALID_END_OF_WEEK, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toModelType_validRangeOfWeekDetails_returnsRangeOfWeek() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(rangeOfWeek);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(rangeOfWeek, range.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toModelType_invalidStartOfWeek_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(new RangeOfWeek(INVALID_START_OF_WEEK,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_END_OF_WEEK, VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, range::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toModelType_nullStartOfWeek_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(null, VALID_END_OF_WEEK,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RangeOfWeek.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, range::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toModelType_invalidEndOfWeek_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(new RangeOfWeek(VALID_START_OF_WEEK,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                INVALID_END_OF_WEEK, VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, range::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toModelType_nullEndOfWeek_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(VALID_START_OF_WEEK, null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RangeOfWeek.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, range::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(VALID_START_OF_WEEK, VALID_END_OF_WEEK, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RangeOfWeek.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, range::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toString_test_equal() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(new RangeOfWeek(VALID_START_OF_WEEK,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_END_OF_WEEK, VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String testString \u003d new String(VALID_START_OF_WEEK + VALID_END_OF_WEEK + VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(range.toString(), testString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void equals_test() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek range \u003d new XmlAdaptedRangeOfWeek(new RangeOfWeek(VALID_START_OF_WEEK,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                VALID_END_OF_WEEK, VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlAdaptedRangeOfWeek checkRange \u003d range;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String notInstance \u003d \"not instance of XmlSerializableRangeOfWeek\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(range.equals(new XmlAdaptedRangeOfWeek(new RangeOfWeek(\"130818\", \"190818\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                \"Week 1\"))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(range, checkRange);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(checkRange.equals(notInstance));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 92
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/storage/XmlAdaptedTaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlAdaptedTaskTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String INVALID_DATE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final String VALID_DATE \u003d BENSON.getDate().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getPriority().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getVenue().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, task.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new XmlAdaptedTask(INVALID_NAME, VALID_DATE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(null, VALID_DATE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new XmlAdaptedTask(VALID_NAME, INVALID_DATE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new XmlAdaptedTask(VALID_NAME, VALID_DATE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_PRIORITY_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, VALID_DATE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new XmlAdaptedTask(VALID_NAME, VALID_DATE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedMessage \u003d Venue.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, VALID_DATE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                new XmlAdaptedTask(VALID_NAME, VALID_DATE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 5,
      "-": 92,
      "hotarumin": 13
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/storage/XmlSchedulePlannerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalSchedulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlSchedulePlannerStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSchedulePlannerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readSchedulePlanner_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readSchedulePlanner(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlySchedulePlanner\u003e readSchedulePlanner(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new XmlSchedulePlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                .readSchedulePlanner(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readSchedulePlanner(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        readSchedulePlanner(\"NotXmlFormatSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readSchedulePlanner_invalidTaskSchedulePlanner_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        readSchedulePlanner(\"invalidTaskSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readSchedulePlanner_invalidAndValidTaskSchedulePlanner_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        readSchedulePlanner(\"invalidAndValidTaskSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveSchedulePlanner_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner original \u003d getTypicalSchedulePlanner();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSchedulePlannerStorage xmlSchedulePlannerStorage \u003d new XmlSchedulePlannerStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlSchedulePlannerStorage.saveSchedulePlanner(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlySchedulePlanner readBack \u003d xmlSchedulePlannerStorage.readSchedulePlanner(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(original, new SchedulePlanner(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        original.addTask(HOON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        original.removeTask(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlSchedulePlannerStorage.saveSchedulePlanner(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlSchedulePlannerStorage.readSchedulePlanner(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(original, new SchedulePlanner(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        original.addTask(IDA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlSchedulePlannerStorage.saveSchedulePlanner(original); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlSchedulePlannerStorage.readSchedulePlanner().get(); //file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(original, new SchedulePlanner(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveSchedulePlanner_nullSchedulePlanner_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        saveSchedulePlanner(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code schedulePlanner} at the specified {@code filePath}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveSchedulePlanner(ReadOnlySchedulePlanner schedulePlanner, String filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new XmlSchedulePlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveSchedulePlanner(schedulePlanner, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveSchedulePlanner_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        saveSchedulePlanner(new SchedulePlanner(), null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 94,
      "-": 34
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/storage/XmlSerializableRangeOfWeekTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FirstDayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlSerializableRangeOfWeekTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final int WEEKS_IN_SEMESTER \u003d 17;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final String USER_INPUT_DATE \u003d \"130818\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String[][] rangeOfWeeks \u003d new String[WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private String[][] checkRangeOfWeeks \u003d new String[WEEKS_IN_SEMESTER][3];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[0][0] \u003d \"130818\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[0][1] \u003d \"190818\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[0][2] \u003d \"Week 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[1][0] \u003d \"200818\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[1][1] \u003d \"260818\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[1][2] \u003d \"Week 2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[2][0] \u003d \"270818\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[2][1] \u003d \"020918\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[2][2] \u003d \"Week 3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[3][0] \u003d \"030918\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[3][1] \u003d \"090918\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[3][2] \u003d \"Week 4\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[4][0] \u003d \"100918\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[4][1] \u003d \"160918\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[4][2] \u003d \"Week 5\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[5][0] \u003d \"170918\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[5][1] \u003d \"230918\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[5][2] \u003d \"Week 6\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[6][0] \u003d \"240918\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[6][1] \u003d \"300918\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[6][2] \u003d \"Recess Week\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[7][0] \u003d \"011018\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[7][1] \u003d \"071018\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[7][2] \u003d \"Week 7\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[8][0] \u003d \"081018\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[8][1] \u003d \"141018\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[8][2] \u003d \"Week 8\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[9][0] \u003d \"151018\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[9][1] \u003d \"211018\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[9][2] \u003d \"Week 9\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[10][0] \u003d \"221018\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[10][1] \u003d \"281018\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[10][2] \u003d \"Week 10\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[11][0] \u003d \"291018\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[11][1] \u003d \"041118\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[11][2] \u003d \"Week 11\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[12][0] \u003d \"051118\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[12][1] \u003d \"111118\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[12][2] \u003d \"Week 12\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[13][0] \u003d \"121118\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[13][1] \u003d \"181118\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[13][2] \u003d \"Week 13\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[14][0] \u003d \"191118\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[14][1] \u003d \"251118\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[14][2] \u003d \"Study Week\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[15][0] \u003d \"261118\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[15][1] \u003d \"021218\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[15][2] \u003d \"Examination Week\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[16][0] \u003d \"031218\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[16][1] \u003d \"091218\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        rangeOfWeeks[16][2] \u003d \"Examination Week\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void equal_test() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        FirstDayCommand fdc \u003d new FirstDayCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        checkRangeOfWeeks \u003d fdc.computeRangeOfWeeks(USER_INPUT_DATE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlSerializableRangeOfWeek checkSerializableRangeOfWeek \u003d new XmlSerializableRangeOfWeek(checkRangeOfWeeks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlSerializableRangeOfWeek serializableRangeOfWeek \u003d new XmlSerializableRangeOfWeek(rangeOfWeeks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlSerializableRangeOfWeek instanceCheck \u003d checkSerializableRangeOfWeek;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String notInstance \u003d \"not instance of XmlSerializableRangeOfWeek\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(serializableRangeOfWeek.equals(checkSerializableRangeOfWeek));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(checkSerializableRangeOfWeek.equals(serializableRangeOfWeek));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(instanceCheck, checkSerializableRangeOfWeek);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(instanceCheck.equals(notInstance));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void toString_test_assertTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        FirstDayCommand fdc \u003d new FirstDayCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        checkRangeOfWeeks \u003d fdc.computeRangeOfWeeks(USER_INPUT_DATE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlSerializableRangeOfWeek checkSerializableRangeOfWeek \u003d new XmlSerializableRangeOfWeek(checkRangeOfWeeks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        XmlSerializableRangeOfWeek serializableRangeOfWeek \u003d new XmlSerializableRangeOfWeek(rangeOfWeeks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(checkSerializableRangeOfWeek.toString().equals(serializableRangeOfWeek.toString()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(serializableRangeOfWeek.toString().equals(checkSerializableRangeOfWeek.toString()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 99
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/storage/XmlSerializableSchedulePlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class XmlSerializableSchedulePlannerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableSchedulePlannerTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskSchedulePlanner.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableSchedulePlanner dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASK_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlSerializableSchedulePlanner.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner schedulePlannerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        SchedulePlanner typicalTasksSchedulePlanner \u003d TypicalTasks.getTypicalSchedulePlanner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(schedulePlannerFromFile.getTaskList(), typicalTasksSchedulePlanner.getTaskList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableSchedulePlanner dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlSerializableSchedulePlanner.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableSchedulePlanner dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlSerializableSchedulePlanner.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableSchedulePlanner.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 35,
      "Woodnsuns": 1,
      "-": 17
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/testutil/CategoryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.category.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class CategoryBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Life\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private UniqueTagList tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CategoryBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Initializes the CategoryBuilder with the data of {@code categoryToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CategoryBuilder(Category categoryToCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        name \u003d categoryToCopy.getName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        tags \u003d categoryToCopy.getUniqueTagList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Sets the {@code Name} of the {@code Category} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public CategoryBuilder withName(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        this.tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public Category build() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        return new Category(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 42
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private EditCommand.EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder(EditCommand.EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor.setDate(task.getDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor.setVenue(task.getVenue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Date} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public EditTaskDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor.setPriority(new Priority(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Venue} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        descriptor.setVenue(new Venue(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public EditCommand.EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 19,
      "-": 66,
      "hotarumin": 2
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"111155\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        name \u003d new Name("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        venue \u003d new Venue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        date \u003d taskToCopy.getDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        venue \u003d taskToCopy.getVenue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public TaskBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Venue} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public TaskBuilder withVenue(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        this.venue \u003d new Venue(address);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Date} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public TaskBuilder withDate(String date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Sets the {@code Priority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return new Task(name, date, priority, venue, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 25,
      "thaddeuslzy": 7,
      "-": 58,
      "hotarumin": 4
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 6,
      "-": 49
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/testutil/TypicalTags.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package ssp.scheduleplanner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_CS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_ST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " * A utility class containing a list of {@code Tag} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class TypicalTags {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final Tag CS \u003d new Tag(VALID_TAG_CS);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public static final Tag ST \u003d new Tag(VALID_TAG_ST);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 14
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final Task ALICE \u003d new TaskBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withVenue(\"123, Jurong West Ave 6, #08-111\").withPriority(\"1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            .withDate(\"120823\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static final Task BENSON \u003d new TaskBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withVenue(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withPriority(\"1\").withDate(\"130921\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final Task CARL \u003d new TaskBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withDate(\"131018\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withPriority(\"2\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withVenue(\"wall street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withTags(\"owesMoney\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final Task DANIEL \u003d new TaskBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withDate(\"120823\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withPriority(\"1\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withVenue(\"10th street\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final Task ELLE \u003d new TaskBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withDate(\"141018\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withPriority(\"1\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withVenue(\"michegan ave\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final Task FIONA \u003d new TaskBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withDate(\"131018\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withPriority(\"2\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withVenue(\"little tokyo\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "    public static final Task GEORGE \u003d new TaskBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withDate(\"141018\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withPriority(\"3\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withVenue(\"4th street\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final Task HOON \u003d new TaskBuilder().withName(\"Hoon Meier\").withDate(\"090423\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withPriority(\"1\").withVenue(\"little india\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public static final Task IDA \u003d new TaskBuilder().withName(\"Ida Mueller\").withDate(\"121193\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            .withPriority(\"1\").withVenue(\"chicago ave\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Task AMY \u003d new TaskBuilder().withName(VALID_NAME_AMY).withDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withPriority(VALID_EMAIL_AMY).withVenue(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Task BOB \u003d new TaskBuilder().withName(VALID_NAME_BOB).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            .withPriority(VALID_EMAIL_BOB).withVenue(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code SchedulePlanner} with all the typical tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static SchedulePlanner getTypicalSchedulePlanner() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        SchedulePlanner sp \u003d new SchedulePlanner();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "            sp.addTask(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 6,
      "Woodnsuns": 11,
      "thaddeuslzy": 21,
      "-": 47,
      "hotarumin": 3
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A GUI unit test class for SchedulePlanner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/ui/ProgressBarPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static java.lang.Double.NaN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static ssp.scheduleplanner.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import guitests.guihandles.ProgressBarPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class ProgressBarPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ProgressBarPanel progressBarPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private ProgressBarPanelHandle progressBarPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        guiRobot.interact(() -\u003e progressBarPanel \u003d new ProgressBarPanel(logic));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        uiPartRule.setUiPart(progressBarPanel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        progressBarPanelHandle \u003d new ProgressBarPanelHandle(progressBarPanel.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void progress() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        postNow(new SchedulePlannerChangedEvent(new SchedulePlanner()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Double expectedToday \u003d NaN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Double expectedWeek \u003d NaN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(expectedToday, progressBarPanelHandle.getTodayProgress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(expectedWeek, progressBarPanelHandle.getWeekProgress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hotarumin": 42
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/ui/SidebarPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import guitests.guihandles.SidebarPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.ShowTagsRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "public class SidebarPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hotarumin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private static final ShowTagsRequestEvent NEW_SHOW_TAGS_EVENT \u003d new ShowTagsRequestEvent(\"Modules\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private SidebarPanel sidebarPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    private SidebarPanelHandle sidebarPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        guiRobot.interact(() -\u003e sidebarPanel \u003d new SidebarPanel(logic));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        uiPartRule.setUiPart(sidebarPanel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        sidebarPanelHandle \u003d new SidebarPanelHandle(sidebarPanel.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        postNow(NEW_SHOW_TAGS_EVENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String expectedPaneName \u003d \"Modules\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(expectedPaneName, sidebarPanelHandle.getExpandedPaneName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "hotarumin": 23
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.model.SchedulePlannerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static final SchedulePlannerChangedEvent EVENT_STUB \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            new SchedulePlannerChangedEvent(new SchedulePlanner());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "-": 76
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/ui/TaskCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task taskWithNoTags \u003d new TaskBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(taskWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(taskCard, taskWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task taskWithTags \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        taskCard \u003d new TaskCard(taskWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(taskCard, taskWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same task, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCard copy \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(taskCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(taskCard.equals(taskCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(taskCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(taskCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // different task, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task differentTask \u003d new TaskBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // same task, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(task, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // verify task details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysTask(expectedTask, taskCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 47,
      "-": 25
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/ui/TaskListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.storage.XmlSerializableSchedulePlanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskListPanelHandle taskListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            taskListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            Task expectedTask \u003d TYPICAL_TASKS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysTask(expectedTask, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCardHandle expectedTask \u003d taskListPanelHandle.getTaskCardHandle(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCardHandle selectedTask \u003d taskListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedTask, selectedTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of tasks in {@code TaskListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        }, \"Creation and deletion of task cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of tasks containing {@code taskCount} tasks that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code TaskListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cTask\u003e createBackingList(int taskCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithTasks(taskCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableSchedulePlanner xmlSchedulePlanner \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableSchedulePlanner.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlSchedulePlanner.toModelType().getTaskList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code taskCount} tasks. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithTasks(int taskCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003cscheduleplanner\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003ctasks\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "            builder.append(\"\u003cdate\u003e030201\u003c/date\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            //builder.append(\"\u003cpriority\u003ea@aa\u003c/priority\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            builder.append(\"\u003cpriority\u003e1\u003c/priority\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "            builder.append(\"\u003cvenue\u003ea\u003c/venue\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/tasks\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/scheduleplanner\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyTasksFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyTasks.xml\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyTasksFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyTasksFile, builder.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        manyTasksFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyTasksFile;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code taskListPanelHandle} with a {@code TaskListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code TaskListPanel}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private void initUi(ObservableList\u003cTask\u003e backingList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskListPanel taskListPanel \u003d new TaskListPanel(backingList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(taskListPanel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 11,
      "-": 114,
      "hotarumin": 1
    }
  },
  {
    "path": "src/test/java/ssp/scheduleplanner/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ssp.scheduleplanner.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(expectedCard.getDate(), actualCard.getDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedTask.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertEquals(expectedTask.getDate().displayDate, actualCard.getDate());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedTask.getPriority().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedTask.getVenue().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(expectedTask.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            taskListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d taskListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 6,
      "-": 67,
      "hotarumin": 2
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.HOON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.IDA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: add a task without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task toAdd \u003d AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + DATE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: add a task with all fields same as another task in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        toAdd \u003d new TaskBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + DATE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllTasks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: add a task with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + DATE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: add a task, missing tags -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: filters the task list before adding -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* ------------------------ Perform add operation while a task card is selected --------------------------- */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: selects first card in the task list, add a task -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + DATE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        /* Case: missing date -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + TaskUtil.getTaskDetails(toAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + DATE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        /* Case: invalid date -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_DATE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertCommandFailure(command, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(command, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(command, Venue.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private void assertCommandSuccess(Task toAdd) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(TaskUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code command}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private void assertCommandSuccess(String command, Task toAdd) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.addTask(toAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts that"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 19,
      "-": 182,
      "hotarumin": 14
    }
  },
  {
    "path": "src/test/java/systemtests/AddTagCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.CATEGORY_DESC_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_CATEGORY_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTags.CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "public class AddTagCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Tag toAdd \u003d CS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String command \u003d AddTagCommand.COMMAND_WORD + \"  \" + CATEGORY_DESC_MODULES + TAG_DESC_CS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(command, toAdd, VALID_CATEGORY_MODULES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code command}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private void assertCommandSuccess(String command, Tag toAdd, String category) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedModel.addTag(toAdd, category);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddTagCommand.MESSAGE_SUCCESS, toAdd.getTagName(), category);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Task, String)} except asserts that"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * 2. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     * @see AddTagCommandSystemTest#assertCommandSuccess(String, Tag, String)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        //debug"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        System.out.println(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        assertEquals(new SchedulePlanner(expectedModel.getSchedulePlanner()), getModel().getSchedulePlanner());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 53
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: selects first card in task list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: filters the task list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TestUtil.getTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: delete the first task in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TASK.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Task deletedTask \u003d removeTask(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: delete the last task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastTaskIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastTaskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: undo deleting the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: redo deleting the last task in the list -\u003e last task deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removeTask(modelBeforeDeletingLast, lastTaskIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: delete the middle task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleTaskIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middleTaskIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: filtered task list, delete index within bounds of address book and task list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: filtered task list, delete index within bounds of address book but out of bounds of task list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        int invalidIndex \u003d getModel().getSchedulePlanner().getTaskList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* --------------------- Performing delete operation while a task card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: delete the selected task -\u003e task list panel selects the task before the deleted task */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectTask(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedTask \u003d removeTask(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                getModel().getSchedulePlanner().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Task} at the specified {@code index} in {@code model}\u0027s schedule planner."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @return the removed task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task removeTask(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Task targetTask \u003d getTask(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.deleteTask(targetTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        return targetTask;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Deletes the task at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Task deletedTask \u003d removeTask(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 21,
      "-": 172
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.Messages;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Venue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                + DATE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: undo editing the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: redo editing the last task in the list -\u003e last task edited again */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        model.updateTask("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: edit a task with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + DATE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: edit a task with new values same as another task\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(getModel().getSchedulePlanner().getTaskList().contains(BOB));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + DATE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        editedTask \u003d new TaskBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        /* Case: edit a task with new values same as another task\u0027s values but with different date and email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + DATE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thaddeuslzy"
        },
        "content": "        editedTask \u003d new TaskBuilder(BOB).withDate(VALID_DATE_AMY).withPriority(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Task taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        editedTask \u003d new TaskBuilder(taskToEdit).withTags().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: filtered task list, edit index within bounds of address book but out of bounds of task list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        int invalidIndex \u003d getModel().getSchedulePlanner().getTaskList().size();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* --------------------- Performing edit operation while a task card is selected -------------------------- */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: selects first card in the task list, edit a task -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        selectTask(index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + DATE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        // browser\u0027s url is updated to reflect the new task\u0027s name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        /* Case: invalid date -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "                Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                Venue.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Task, Index)} except that"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Task, Index)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Task editedTask) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedTask, null);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the task at index {@code toEdit} being"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * updated to values specified {@code editedTask}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Task editedTask,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateTask(expectedModel.getFilteredTaskList().get(toEdit.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 35,
      "Woodnsuns": 2,
      "thaddeuslzy": 1,
      "-": 209,
      "hotarumin": 9
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple tasks in schedule planner, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 tasks found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where task list is displaying the tasks we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 tasks found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: find task where task list is not displaying the task we are finding -\u003e 1 task found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple tasks in schedule planner, 2 keywords -\u003e 2 tasks found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple tasks in schedule planner, 2 keywords in reversed order -\u003e 2 tasks found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple tasks in schedule planner, 2 keywords with 1 repeat -\u003e 2 tasks found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple tasks in schedule planner, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 tasks found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same tasks in schedule planner after deleting 1 of them -\u003e 1 task found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertFalse(getModel().getSchedulePlanner().getTaskList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find task in schedule planner, keyword is same as name but of different case -\u003e 1 task found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find task in schedule planner, keyword is substring of name -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find task in schedule planner, name is substring of keyword -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find task not in schedule planner -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find date of task in schedule planner -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getDate().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of task in schedule planner -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getVenue().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of task in schedule planner -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPriority().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of task in schedule planner -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: find while a task is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getTaskListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find task in empty schedule planner -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllTasks();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * box displays {@code Messages#MESSAGE_TASKS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                MESSAGE_TASKS_LISTED_OVERVIEW, expectedModel.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 8,
      "-": 187
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getTaskListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        getSidebarPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        getProgressBarPanel().click();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        //assertNotEquals(SidebarPanel.DEFAULT_PAGE, getSidebarPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "hotarumin": 6
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cTask\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_TASKS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    public static void setFilteredList(Model model, Task... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return task -\u003e task.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 5,
      "-": 34
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    protected SchedulePlanner getInitialData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void schedulePlanner_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        Task[] expectedArray \u003d SampleDataUtil.getSampleTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        List\u003cTask\u003e expectedList \u003d Arrays.asList(expectedArray);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "        expectedList.sort((a, b) -\u003e Task.compare(a, b));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getTaskListPanel(), expectedList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "Woodnsuns": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/systemtests/SchedulePlannerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import guitests.guihandles.ProgressBarPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "import guitests.guihandles.SidebarPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.SchedulePlanner;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": " * A system test class for SchedulePlanner, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "    protected SchedulePlanner getInitialData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalTasks.getTypicalSchedulePlanner();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getTaskListPanel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public SidebarPanelHandle getSidebarPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return mainWindowHandle.getSidebarPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "    public ProgressBarPanelHandle getProgressBarPanel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        return mainWindowHandle.getProgressBarPanel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all tasks in the schedule planner."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllTasks() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(getModel().getSchedulePlanner().getTaskList().size(), getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all tasks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showTasksWithName(String keyword) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getSchedulePlanner().getTaskList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * Selects the task at {@code index} of the displayed list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectTask(Index index) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all tasks in the schedule planner."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllTasks() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(0, getModel().getSchedulePlanner().getTaskList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same task objects as {@code expectedModel}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the task list panel displays the tasks in the model correctly."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertEquals(new SchedulePlanner(expectedModel.getSchedulePlanner()), testApp.readStorageSchedulePlanner());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Calls {@code SidebarPanelHandle}, {@code TaskListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "        //getSidebarPanel().rememberUrl();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        getTaskListPanel().rememberSelectedTaskCard();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Asserts that the previously selected card is now deselected"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getTaskListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        getTaskListPanel().navigateToCard(getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hotarumin"
        },
        "content": "     * Asserts that the selected card in the task list panel remain unchanged."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getTaskListPanel().isSelectedTaskCardChanged());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 8,
      "-": 252,
      "hotarumin": 11
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.logic.commands.SelectCommand.MESSAGE_SELECT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static ssp.scheduleplanner.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends SchedulePlannerSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: select the first card in the task list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: select the last card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index taskCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + taskCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, taskCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: select the middle card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: filtered task list, select index within bounds of address book but out of bounds of task list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        int invalidIndex \u003d getModel().getSchedulePlanner().getTaskList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        /* Case: filtered task list, select index within bounds of address book and task list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllTasks();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "                MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected task.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_TASK_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getTaskListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SchedulePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 12,
      "-": 142
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import ssp.scheduleplanner.model.ReadOnlySchedulePlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlySchedulePlanner\u003e schedulePlanner, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Woodnsuns"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(schedulePlanner, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Woodnsuns": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonAng"
        },
        "content": "\u003cfx:root type\u003d\"ssp.scheduleplanner.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonAng": 1,
      "-": 5
    }
  }
]
